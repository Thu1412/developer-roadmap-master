{
  "backend-beginner": {
    "nodes": [
      {
        "id": "UFd8PEg6IwJMXvuv8Ow1f",
        "type": "section",
        "position": {
          "x": 8.678189763286014,
          "y": 689.9126418589183
        },
        "selected": true,
        "data": {
          "label": "",
          "style": {
            "width": 150,
            "height": 100,
            "fontSize": 17,
            "backgroundColor": "#ffffff",
            "borderColor": "#000000"
          }
        },
        "zIndex": -999,
        "width": 145,
        "height": 123,
        "style": {
          "width": 145,
          "height": 123
        },
        "positionAbsolute": {
          "x": 8.678189763286014,
          "y": 689.9126418589183
        },
        "dragging": false,
        "resizing": false,
        "focusable": true,
        "selectable": true
      },
      {
        "id": "Ju00mr0KLGN2BV6yEQGPt",
        "type": "vertical",
        "position": {
          "x": -204.47806963137555,
          "y": 1491.372464537289
        },
        "selected": true,
        "data": {
          "label": "vertical node",
          "style": {
            "strokeDasharray": "0.8 8",
            "strokeLinecap": "round",
            "strokeWidth": 3.5,
            "stroke": "#4136D4"
          }
        },
        "zIndex": 999,
        "width": 20,
        "height": 104,
        "positionAbsolute": {
          "x": -204.47806963137555,
          "y": 1491.372464537289
        },
        "dragging": false,
        "style": {
          "width": 20,
          "height": 104
        },
        "resizing": false,
        "focusable": true,
        "selectable": true
      },
      {
        "width": 413,
        "height": 124,
        "id": "sVXZrBCsiSzWBBYWTm-nQ",
        "type": "paragraph",
        "position": {
          "x": -400.97806963137555,
          "y": 1404.0164397619342
        },
        "selected": true,
        "data": {
          "label": "Have a look at the detailed version",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center",
            "borderColor": "#000000",
            "backgroundColor": "#ffffff"
          },
          "oldId": "0vLaVNJaJSHZ_bHli6Qzs"
        },
        "zIndex": 999,
        "positionAbsolute": {
          "x": -400.97806963137555,
          "y": 1404.0164397619342
        },
        "dragging": false,
        "style": {
          "width": 413,
          "height": 124
        },
        "resizing": false,
        "focusable": true,
        "selectable": true
      },
      {
        "width": 231,
        "height": 49,
        "id": "EwvLPSI6AlZ4TnNIJTZA4",
        "type": "topic",
        "position": {
          "x": -309.58230823147517,
          "y": 635.9941785421215
        },
        "selected": true,
        "data": {
          "label": "Learn about APIs",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "iGeAiNtqNadlJVDmd-p-g"
        },
        "style": {
          "width": 231,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -309.58230823147517,
          "y": 635.9941785421215
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 152,
        "height": 68,
        "id": "iogwMmOvub2ZF4zgg6WyF",
        "type": "title",
        "position": {
          "x": -270.08230823147517,
          "y": -119.42445334555111
        },
        "selected": true,
        "data": {
          "label": "Backend",
          "style": {
            "fontSize": 28,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "9nxw2PEl-_eQPW0FHNPq2"
        },
        "zIndex": 999,
        "dragging": false,
        "positionAbsolute": {
          "x": -270.08230823147517,
          "y": -119.42445334555111
        },
        "focusable": true,
        "selectable": true
      },
      {
        "width": 126,
        "height": 49,
        "id": "BdXbcz4-ar3XOX0wIKzBp",
        "type": "subtopic",
        "position": {
          "x": -555.4238043165935,
          "y": 57.59280263144706
        },
        "selected": true,
        "data": {
          "label": "Go",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "Of5xsnf0QtksCDnCCHKIv",
          "legend": {
            "id": "DMx7rAjVBWMbzjSde-tvp",
            "label": "Alternative Option / Pick this or purple",
            "color": "#4f7a28",
            "position": "left-center"
          }
        },
        "style": {
          "width": 126,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -555.4238043165935,
          "y": 57.59280263144706
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 126,
        "height": 49,
        "id": "8-lO-v6jCYYoklEJXULxN",
        "type": "subtopic",
        "position": {
          "x": -555.4238043165935,
          "y": 4.592802631447057
        },
        "selected": true,
        "data": {
          "label": "JavaScript",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "CyQ_GODtWgrz6Uikts5bJ",
          "legend": {
            "id": "NJhQIvMyMD1Cu-JA1UCmJ",
            "color": "#874efe",
            "label": "Personal Recommendation / Opinion",
            "position": "left-center"
          }
        },
        "style": {
          "width": 126,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -555.4238043165935,
          "y": 4.592802631447057
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 126,
        "height": 49,
        "id": "J_sVHsD72Yzyqb9KCIvAY",
        "type": "subtopic",
        "position": {
          "x": -555.4238043165935,
          "y": 110.59280263144706
        },
        "selected": true,
        "data": {
          "label": "Python",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "FIPHmInvgJg9e8KqDAh2g",
          "legend": {
            "id": "DMx7rAjVBWMbzjSde-tvp",
            "label": "Alternative Option / Pick this or purple",
            "color": "#4f7a28",
            "position": "left-center"
          }
        },
        "style": {
          "width": 126,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -555.4238043165935,
          "y": 110.59280263144706
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 231,
        "height": 50,
        "id": "2f0ZO6GJElfZ2Eis28Hzg",
        "type": "topic",
        "position": {
          "x": -310.2043395768536,
          "y": 54.70730350215206
        },
        "selected": true,
        "data": {
          "label": "Pick a Language",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "uGqgITLdZbxJdGUihNqxV"
        },
        "style": {
          "width": 231,
          "height": 50
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -310.2043395768536,
          "y": 54.70730350215206
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 132,
        "height": 49,
        "id": "_I1E__wCIVrhjMk6IMieE",
        "type": "subtopic",
        "position": {
          "x": -532.4238043165935,
          "y": 309.642069464665
        },
        "selected": true,
        "data": {
          "label": "Git",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "eyP1K2ve-C0gDYt6Hdgw0",
          "legend": {
            "id": "NJhQIvMyMD1Cu-JA1UCmJ",
            "color": "#874efe",
            "label": "Personal Recommendation / Opinion",
            "position": "left-center"
          }
        },
        "style": {
          "width": 132,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -532.4238043165935,
          "y": 309.642069464665
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 231,
        "height": 49,
        "id": "ezdqQW9wTUw93F6kjOzku",
        "type": "topic",
        "position": {
          "x": -310.2043395768536,
          "y": 309.642069464665
        },
        "selected": true,
        "data": {
          "label": "Version Control Systems",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "f2sY4RLE0k8vVAfZFnxgj"
        },
        "style": {
          "width": 231,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -310.2043395768536,
          "y": 309.642069464665
        },
        "dragging": false,
        "selectable": true
      },
      {
        "width": 132,
        "height": 49,
        "id": "ptD8EVqwFUYr4W5A_tABY",
        "type": "subtopic",
        "position": {
          "x": -532.4238043165935,
          "y": 366.10143585693174
        },
        "selected": true,
        "data": {
          "label": "Github",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "eCkVAP0s0GKyY88M2fBDS",
          "legend": {
            "id": "NJhQIvMyMD1Cu-JA1UCmJ",
            "color": "#874efe",
            "label": "Personal Recommendation / Opinion",
            "position": "left-center"
          }
        },
        "style": {
          "width": 132,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -532.4238043165935,
          "y": 366.10143585693174
        },
        "dragging": false,
        "selectable": true,
        "resizing": false
      },
      {
        "width": 231,
        "height": 49,
        "id": "NvUcSDWBhzJZ31nzT4UlE",
        "type": "topic",
        "position": {
          "x": -310.2043395768536,
          "y": 366.10143585693174
        },
        "selected": true,
        "data": {
          "label": "Repo hosting services",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "I-NkKNiKBNB6f8QaFzRgU"
        },
        "style": {
          "width": 231,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -310.2043395768536,
          "y": 366.10143585693174
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 145,
        "height": 49,
        "id": "FihTrMO56kj9jT8O_pO2T",
        "type": "subtopic",
        "position": {
          "x": 6.417691768524833,
          "y": 485.10143585693174
        },
        "selected": true,
        "data": {
          "label": "PostgreSQL",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "lNsaFZwGE7vA0Km-Jfft4",
          "legend": {
            "id": "NJhQIvMyMD1Cu-JA1UCmJ",
            "color": "#874efe",
            "label": "Personal Recommendation / Opinion",
            "position": "right-center"
          }
        },
        "style": {
          "width": 145,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 6.417691768524833,
          "y": 485.10143585693174
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 231,
        "height": 50,
        "id": "r45b461NxLN6wBODJ5CNP",
        "type": "topic",
        "position": {
          "x": -310.2043395768536,
          "y": 485.10143585693174
        },
        "selected": true,
        "data": {
          "label": "Relational Databases",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "sJ04XNIM7JqzHnffWd5UM"
        },
        "style": {
          "width": 231,
          "height": 50
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -310.2043395768536,
          "y": 485.10143585693174
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 161,
        "height": 49,
        "id": "Z7jp_Juj5PffSxV7UZcBb",
        "type": "subtopic",
        "position": {
          "x": -610.8178956686777,
          "y": 958.4323026615212
        },
        "selected": true,
        "data": {
          "label": "ORMs",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "FHrVrP-ndnV8MsDKMxdsq"
        },
        "style": {
          "width": 161,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -610.8178956686777,
          "y": 958.4323026615212
        },
        "dragging": false,
        "selectable": true
      },
      {
        "width": 161,
        "height": 49,
        "id": "qSAdfaGUfn8mtmDjHJi3z",
        "type": "subtopic",
        "position": {
          "x": -610.8178956686777,
          "y": 1012.4323026615212
        },
        "selected": true,
        "data": {
          "label": "ACID",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "4aBoOyTn1ALDRHYcfwzHf"
        },
        "style": {
          "width": 161,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -610.8178956686777,
          "y": 1012.4323026615212
        },
        "dragging": false,
        "selectable": true
      },
      {
        "width": 161,
        "height": 49,
        "id": "rq_y_OBMD9AH_4aoecvAi",
        "type": "subtopic",
        "position": {
          "x": -610.8178956686777,
          "y": 1066.4323026615211
        },
        "selected": true,
        "data": {
          "label": "Transactions",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "plXELtRHevUzYUL3doQSs"
        },
        "style": {
          "width": 161,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -610.8178956686777,
          "y": 1066.4323026615211
        },
        "dragging": false,
        "selectable": true
      },
      {
        "width": 161,
        "height": 49,
        "id": "bQnOAu863hsHdyNMNyJop",
        "type": "subtopic",
        "position": {
          "x": -610.8178956686777,
          "y": 1120.4323026615211
        },
        "selected": true,
        "data": {
          "label": "N+1 Problem",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "5pdTq6LCx8VXjd0-J1a1s"
        },
        "style": {
          "width": 161,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -610.8178956686777,
          "y": 1120.4323026615211
        },
        "dragging": false,
        "selectable": true
      },
      {
        "width": 231,
        "height": 49,
        "id": "LJt27onEOeIBomiEMTyKd",
        "type": "topic",
        "position": {
          "x": -310.2043395768536,
          "y": 1011.4323026615211
        },
        "selected": true,
        "data": {
          "label": "More about Databases",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "pNTfCAoFYG6YwBm5EOCvw"
        },
        "style": {
          "width": 231,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -310.2043395768536,
          "y": 1011.4323026615211
        },
        "dragging": false,
        "selectable": true,
        "resizing": false
      },
      {
        "width": 145,
        "height": 49,
        "id": "sNceS4MpSIjRkWhNDmrFg",
        "type": "subtopic",
        "position": {
          "x": 8.678189763286014,
          "y": 635.9941785421215
        },
        "selected": true,
        "data": {
          "label": "JSON APIs",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "eZd-7w3ka8BhaAx8kGTgi",
          "legend": {
            "id": "NJhQIvMyMD1Cu-JA1UCmJ",
            "color": "#874efe",
            "label": "Personal Recommendation / Opinion",
            "position": "right-center"
          }
        },
        "style": {
          "width": 145,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 8.678189763286014,
          "y": 635.9941785421215
        },
        "dragging": false,
        "selectable": true,
        "resizing": false
      },
      {
        "width": 146,
        "height": 49,
        "id": "lfNFDZZNdrB0lbEaMtU71",
        "type": "subtopic",
        "position": {
          "x": 6.417691768524833,
          "y": 582.9941785421215
        },
        "selected": true,
        "data": {
          "label": "REST",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "gVsbyjVssRCpAf6r-tF0O",
          "legend": {
            "id": "NJhQIvMyMD1Cu-JA1UCmJ",
            "color": "#874efe",
            "label": "Personal Recommendation / Opinion",
            "position": "right-center"
          }
        },
        "style": {
          "width": 146,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 6.417691768524833,
          "y": 582.9941785421215
        },
        "dragging": false,
        "selectable": true,
        "resizing": false
      },
      {
        "width": 231,
        "height": 49,
        "id": "ELj8af7Mi38kUbaPJfCUR",
        "type": "topic",
        "position": {
          "x": -310.2043395768536,
          "y": 726.4861514388111
        },
        "selected": true,
        "data": {
          "label": "Caching",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "T632e8R4J001IajMm9yp7"
        },
        "style": {
          "width": 231,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -310.2043395768536,
          "y": 726.4861514388111
        },
        "dragging": false,
        "selectable": true,
        "resizing": false
      },
      {
        "width": 190,
        "height": 49,
        "id": "381Kw1IMRv7CJp-Uf--qd",
        "type": "subtopic",
        "position": {
          "x": 43.00948964805815,
          "y": 1187.4900452642225
        },
        "selected": true,
        "data": {
          "label": "Integration Testing",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "U7mP1unVOQgVXCCuXh8De"
        },
        "style": {
          "width": 190,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 43.00948964805815,
          "y": 1187.4900452642225
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 193,
        "height": 49,
        "id": "NAGisfq2CgeK3SsuRjnMw",
        "type": "subtopic",
        "position": {
          "x": 43.00948964805815,
          "y": 1295.4900452642225
        },
        "selected": true,
        "data": {
          "label": "Functional Testing",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "Lcb9mmKc5k2UofZ0_o6Rs"
        },
        "style": {
          "width": 193,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 43.00948964805815,
          "y": 1295.4900452642225
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 193,
        "height": 49,
        "id": "3OYm6b9f6WOrKi4KTOZYK",
        "type": "subtopic",
        "position": {
          "x": 43.00948964805815,
          "y": 1241.4900452642225
        },
        "selected": true,
        "data": {
          "label": "Unit Testing",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "J_kRwf-neWCW5DjfBmybt"
        },
        "style": {
          "width": 193,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 43.00948964805815,
          "y": 1241.4900452642225
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 231,
        "height": 49,
        "id": "STQQbPa7PE3gbjMdL6P-t",
        "type": "topic",
        "position": {
          "x": -310.2043395768536,
          "y": 1244.3669598992026
        },
        "selected": true,
        "data": {
          "label": "Testing",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "RFUPBl2Q9hBXP9HacPOo1"
        },
        "style": {
          "width": 231,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -310.2043395768536,
          "y": 1244.3669598992026
        },
        "dragging": false,
        "selectable": true
      },
      {
        "width": 100,
        "height": 49,
        "id": "g8GjkJAhvnSxXTZks0V1g",
        "type": "subtopic",
        "position": {
          "x": -465.97806963137555,
          "y": 726.4861514388111
        },
        "selected": true,
        "data": {
          "label": "Redis",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "xPvVwGQw28uMeLYIWn8yn"
        },
        "style": {
          "width": 100,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": -465.97806963137555,
          "y": 726.4861514388111
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 375,
        "height": 49,
        "id": "uSLzfLPXxS5-P7ozscvjZ",
        "type": "button",
        "position": {
          "x": -383.56446376179997,
          "y": 1460.4861971343921
        },
        "selected": true,
        "data": {
          "label": "Backend Developer Roadmap",
          "href": "https://roadmap.sh/backend",
          "color": "#FFFFFf",
          "backgroundColor": "#4136D4",
          "style": {
            "fontSize": 17
          },
          "borderColor": "#4136D4",
          "oldId": "PkhQdVms2TGgnPrytCBPZ"
        },
        "zIndex": 999,
        "dragging": false,
        "positionAbsolute": {
          "x": -383.56446376179997,
          "y": 1460.4861971343921
        },
        "style": {
          "width": 375,
          "height": 49
        },
        "focusable": true,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 20,
        "height": 102,
        "id": "LEijbLyxg4RyutKEM2Y5g",
        "type": "vertical",
        "position": {
          "x": -204.08230823147517,
          "y": -220.42445334555111
        },
        "selected": true,
        "data": {
          "label": "vertical node",
          "style": {
            "strokeDasharray": "0.8 8",
            "strokeLinecap": "round",
            "strokeWidth": 3.5,
            "stroke": "#0A33FF"
          },
          "oldId": "xD07fJ1NmNeAarVCEfubU"
        },
        "zIndex": 999,
        "positionAbsolute": {
          "x": -204.08230823147517,
          "y": -220.42445334555111
        },
        "dragging": false,
        "focusable": true,
        "style": {
          "width": 20,
          "height": 102
        },
        "resizing": false,
        "selectable": true
      },
      {
        "id": "qN-6iiXWgn5qSzK3o0Tjo",
        "type": "legend",
        "position": {
          "x": -714.8814218617622,
          "y": -254.09541222709834
        },
        "selected": true,
        "data": {
          "label": "",
          "legends": [
            {
              "id": "NJhQIvMyMD1Cu-JA1UCmJ",
              "color": "#874efe",
              "label": "Personal Recommendation / Opinion"
            },
            {
              "id": "DMx7rAjVBWMbzjSde-tvp",
              "label": "Alternative Option / Pick this or purple",
              "color": "#4f7a28"
            },
            {
              "id": "R9WLhURhPdVNXP7AUTDvR",
              "label": "Order not strict / Learn anytime",
              "color": "#929292"
            }
          ]
        },
        "zIndex": 999,
        "width": 353,
        "height": 124,
        "positionAbsolute": {
          "x": -714.8814218617622,
          "y": -254.09541222709834
        },
        "dragging": false,
        "focusable": true,
        "selectable": true
      },
      {
        "id": "yHmHXymPNWwu8p1vvqD3o",
        "type": "paragraph",
        "position": {
          "x": -14.502815208049242,
          "y": -245.15106699547107
        },
        "selected": true,
        "data": {
          "label": "Find the detailed version of this roadmap along with other similar roadmaps",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left",
            "borderColor": "#000000",
            "backgroundColor": "#FFFFFf"
          }
        },
        "zIndex": 999,
        "width": 354,
        "height": 143,
        "positionAbsolute": {
          "x": -14.502815208049242,
          "y": -245.15106699547107
        },
        "dragging": false,
        "selectable": true,
        "focusable": true,
        "style": {
          "width": 354,
          "height": 143
        },
        "resizing": false
      },
      {
        "id": "2zqZkyVgigifcRS1H7F_b",
        "type": "button",
        "position": {
          "x": -1.2994407952490974,
          "y": -163.1655035777258
        },
        "selected": true,
        "data": {
          "label": "roadmap.sh",
          "href": "https://roadmap.sh",
          "color": "#ffffff",
          "backgroundColor": "#4136D6",
          "style": {
            "fontSize": 17
          }
        },
        "zIndex": 999,
        "width": 329,
        "height": 49,
        "dragging": false,
        "style": {
          "width": 329,
          "height": 49
        },
        "resizing": false,
        "positionAbsolute": {
          "x": -1.2994407952490974,
          "y": -163.1655035777258
        },
        "selectable": true,
        "focusable": true
      },
      {
        "id": "MfErpYwkJ0wiWJZEUVfrb",
        "type": "button",
        "position": {
          "x": -714.8814218617622,
          "y": -115.72969257809785
        },
        "selected": true,
        "data": {
          "label": "Visit the Detailed Version",
          "href": "/backend",
          "color": "#ffffff",
          "backgroundColor": "#232323",
          "style": {
            "fontSize": 17
          },
          "oldId": "2zqZkyVgigifcRS1H7F_b"
        },
        "zIndex": 999,
        "width": 351,
        "height": 49,
        "dragging": false,
        "style": {
          "width": 351,
          "height": 49
        },
        "resizing": false,
        "positionAbsolute": {
          "x": -714.8814218617622,
          "y": -115.72969257809785
        },
        "selectable": true,
        "focusable": true
      },
      {
        "width": 145,
        "height": 49,
        "id": "PY9G7KQy8bF6eIdr1ydHf",
        "type": "subtopic",
        "position": {
          "x": 8.678189763286014,
          "y": 689.9126418589183
        },
        "selected": true,
        "data": {
          "label": "Authentication",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "lfNFDZZNdrB0lbEaMtU71"
        },
        "style": {
          "width": 145,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 8.678189763286014,
          "y": 689.9126418589183
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "width": 123,
        "height": 49,
        "id": "UxS_mzVUjLigEwKrXnEeB",
        "type": "subtopic",
        "position": {
          "x": 20.030089179073684,
          "y": 749.5986472065365
        },
        "selected": true,
        "data": {
          "label": "JWT",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "center"
          },
          "oldId": "PY9G7KQy8bF6eIdr1ydHf"
        },
        "style": {
          "width": 123,
          "height": 49
        },
        "zIndex": 999,
        "focusable": true,
        "positionAbsolute": {
          "x": 20.030089179073684,
          "y": 749.5986472065365
        },
        "dragging": false,
        "resizing": false,
        "selectable": true
      },
      {
        "id": "le7iJXCULjq_4FHrhrQWu",
        "type": "paragraph",
        "position": {
          "x": -28.74067173877563,
          "y": -51.424453345551115
        },
        "selected": true,
        "data": {
          "label": "If you are a frontend developer jumping into backend development, I would recommend picking JavaScript and learning Node.js. Alternatively, Go and Python are also good options.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left"
          }
        },
        "zIndex": 999,
        "width": 360,
        "height": 157,
        "positionAbsolute": {
          "x": -28.74067173877563,
          "y": -51.424453345551115
        },
        "dragging": false,
        "style": {
          "width": 360,
          "height": 157
        },
        "resizing": true,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "wgdSRXw6AcPAwQZ0mqBAB",
        "type": "paragraph",
        "position": {
          "x": -28.74067173877563,
          "y": 100.59280263144706
        },
        "selected": true,
        "data": {
          "label": "Learn the language and build some CLI apps to practice your knowledge.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left",
            "color": "#001eff"
          },
          "oldId": "le7iJXCULjq_4FHrhrQWu"
        },
        "zIndex": 999,
        "width": 360,
        "height": 88,
        "positionAbsolute": {
          "x": -28.74067173877563,
          "y": 100.59280263144706
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": false,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "2BX-MgyEp1AGgtdnUITh5",
        "type": "paragraph",
        "position": {
          "x": -704.3814218617622,
          "y": 178.57554665444889
        },
        "selected": true,
        "data": {
          "label": "When you are following this roadmap make sure to develop as many projects as possible for each node of the roadmap.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left",
            "color": "#0033ff"
          },
          "oldId": "le7iJXCULjq_4FHrhrQWu"
        },
        "zIndex": 999,
        "width": 360,
        "height": 114,
        "positionAbsolute": {
          "x": -704.3814218617622,
          "y": 178.57554665444889
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": true,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "uM-SRBYQen3ZFiCDAyaJa",
        "type": "paragraph",
        "position": {
          "x": -28.74067173877563,
          "y": 242.57554665444889
        },
        "selected": true,
        "data": {
          "label": "Create your GitHub profile and start using GitHub for your future projects.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left"
          },
          "oldId": "le7iJXCULjq_4FHrhrQWu"
        },
        "zIndex": 999,
        "width": 360,
        "height": 88,
        "positionAbsolute": {
          "x": -28.74067173877563,
          "y": 242.57554665444889
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": true,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "UAbZBrVgdgCyG0GtU7HgE",
        "type": "paragraph",
        "position": {
          "x": -28.74067173877563,
          "y": 309.642069464665
        },
        "selected": true,
        "data": {
          "label": "See if any of your past projects can be published on GitHub as OpenSource.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left",
            "color": "#001eff"
          },
          "oldId": "wgdSRXw6AcPAwQZ0mqBAB"
        },
        "zIndex": 999,
        "width": 360,
        "height": 88,
        "positionAbsolute": {
          "x": -28.74067173877563,
          "y": 309.642069464665
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": false,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "WE87iPjyRBuLSQjW1-lQA",
        "type": "paragraph",
        "position": {
          "x": -704.3814218617622,
          "y": 452.60143585693174
        },
        "selected": true,
        "data": {
          "label": "Learn about the relational databases, normalization, DB migrations, SQL, DB Indexes and Query performance analysis.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left"
          },
          "oldId": "uM-SRBYQen3ZFiCDAyaJa"
        },
        "zIndex": 999,
        "width": 360,
        "height": 114,
        "positionAbsolute": {
          "x": -704.3814218617622,
          "y": 452.60143585693174
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": true,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "s1dRHfNP8Q6ytjueRHb1n",
        "type": "paragraph",
        "position": {
          "x": -704.3814218617622,
          "y": 581.9126418589183
        },
        "selected": true,
        "data": {
          "label": "Learn how to build RESTful APIs and add JWT authentication to secure your APIs.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left"
          },
          "oldId": "WE87iPjyRBuLSQjW1-lQA"
        },
        "zIndex": 999,
        "width": 360,
        "height": 88,
        "positionAbsolute": {
          "x": -704.3814218617622,
          "y": 581.9126418589183
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": true,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "1HAWiOizGfG3OT9KouNQg",
        "type": "paragraph",
        "position": {
          "x": -704.3814218617622,
          "y": 643.4861514388111
        },
        "selected": true,
        "data": {
          "label": "Develop some API and add JWT auth.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left",
            "color": "#001eff"
          },
          "oldId": "UAbZBrVgdgCyG0GtU7HgE"
        },
        "zIndex": 999,
        "width": 360,
        "height": 63,
        "positionAbsolute": {
          "x": -704.3814218617622,
          "y": 643.4861514388111
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": false,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "W8BIrC9VsUc4Z0t6G_FnZ",
        "type": "paragraph",
        "position": {
          "x": -696.2667613883802,
          "y": 793.5986472065365
        },
        "selected": true,
        "data": {
          "label": "Learn about different caching strategies, including HTTP caching as well.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left"
          },
          "oldId": "s1dRHfNP8Q6ytjueRHb1n"
        },
        "zIndex": 999,
        "width": 360,
        "height": 88,
        "positionAbsolute": {
          "x": -696.2667613883802,
          "y": 793.5986472065365
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": true,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "lIC09zhXysTm3qlAJqWMI",
        "type": "paragraph",
        "position": {
          "x": -696.2667613883802,
          "y": 851.4861514388111
        },
        "selected": true,
        "data": {
          "label": "Use Redis in some of your projects.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left",
            "color": "#001eff"
          },
          "oldId": "1HAWiOizGfG3OT9KouNQg"
        },
        "zIndex": 999,
        "width": 360,
        "height": 63,
        "positionAbsolute": {
          "x": -696.2667613883802,
          "y": 851.4861514388111
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": false,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "wMVGAEIHhVbL6ZXGZOb8Q",
        "type": "paragraph",
        "position": {
          "x": -167.56446376179997,
          "y": 824.4323026615212
        },
        "selected": true,
        "data": {
          "label": "Learn about additional database topics including performance analysis, ORMs, limitations, common issues to keep in mind with ORMs and in general.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left"
          },
          "oldId": "W8BIrC9VsUc4Z0t6G_FnZ"
        },
        "zIndex": 999,
        "width": 338,
        "height": 137,
        "positionAbsolute": {
          "x": -167.56446376179997,
          "y": 824.4323026615212
        },
        "dragging": false,
        "style": {
          "width": 338,
          "height": 137
        },
        "resizing": false,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "Lj9dbZmTjKHvooKWLEkhU",
        "type": "paragraph",
        "position": {
          "x": -167.56446376179997,
          "y": 938.4323026615212
        },
        "selected": true,
        "data": {
          "label": "Get some experience with some ORM.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left",
            "color": "#001eff"
          },
          "oldId": "lIC09zhXysTm3qlAJqWMI"
        },
        "zIndex": 999,
        "width": 360,
        "height": 63,
        "positionAbsolute": {
          "x": -167.56446376179997,
          "y": 938.4323026615212
        },
        "dragging": false,
        "style": {
          "width": 360
        },
        "resizing": false,
        "selectable": true,
        "focusable": true
      },
      {
        "id": "lxFXAD1DAeq3bGovSEuXE",
        "type": "paragraph",
        "position": {
          "x": -167.56446376179997,
          "y": 1073.4323026615211
        },
        "selected": true,
        "data": {
          "label": "Learn about differeng testing techniques and learn learn how to write automated tests.",
          "style": {
            "fontSize": 17,
            "justifyContent": "flex-start",
            "textAlign": "left"
          },
          "oldId": "wMVGAEIHhVbL6ZXGZOb8Q"
        },
        "zIndex": 999,
        "width": 396,
        "height": 96,
        "positionAbsolute": {
          "x": -167.56446376179997,
          "y": 1073.4323026615211
        },
        "dragging": false,
        "style": {
          "width": 396,
          "height": 96
        },
        "resizing": false,
        "selectable": true,
        "focusable": true
      }
    ],
    "edges": [
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "sourceHandle": "x2",
        "target": "sVXZrBCsiSzWBBYWTm-nQ",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "id": "PShueM-HfMGu2Jy1dt73g",
        "selected": true,
        "type": "smoothstep",
        "focusable": true,
        "selectable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "STQQbPa7PE3gbjMdL6P-t",
        "sourceHandle": "z2",
        "target": "3OYm6b9f6WOrKi4KTOZYK",
        "targetHandle": "y1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-STQQbPa7PE3gbjMdL6P-tz2-3OYm6b9f6WOrKi4KTOZYKy1",
        "selected": true,
        "focusable": true,
        "selectable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "STQQbPa7PE3gbjMdL6P-t",
        "sourceHandle": "z2",
        "target": "381Kw1IMRv7CJp-Uf--qd",
        "targetHandle": "y2",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-STQQbPa7PE3gbjMdL6P-tz2-381Kw1IMRv7CJp-Uf--qdy2",
        "selected": true,
        "focusable": true,
        "selectable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "STQQbPa7PE3gbjMdL6P-t",
        "sourceHandle": "z2",
        "target": "NAGisfq2CgeK3SsuRjnMw",
        "targetHandle": "y1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-STQQbPa7PE3gbjMdL6P-tz2-NAGisfq2CgeK3SsuRjnMwy1",
        "selected": true,
        "focusable": true,
        "selectable": true
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "iogwMmOvub2ZF4zgg6WyF",
        "sourceHandle": "x2",
        "target": "2f0ZO6GJElfZ2Eis28Hzg",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "selected": true,
        "id": "reactflow__edge-iogwMmOvub2ZF4zgg6WyFx2-2f0ZO6GJElfZ2Eis28Hzgw1",
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "2f0ZO6GJElfZ2Eis28Hzg",
        "sourceHandle": "y2",
        "target": "8-lO-v6jCYYoklEJXULxN",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-2f0ZO6GJElfZ2Eis28Hzgy2-8-lO-v6jCYYoklEJXULxNz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "2f0ZO6GJElfZ2Eis28Hzg",
        "sourceHandle": "y2",
        "target": "BdXbcz4-ar3XOX0wIKzBp",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-2f0ZO6GJElfZ2Eis28Hzgy2-BdXbcz4-ar3XOX0wIKzBpz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "2f0ZO6GJElfZ2Eis28Hzg",
        "sourceHandle": "y2",
        "target": "J_sVHsD72Yzyqb9KCIvAY",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-2f0ZO6GJElfZ2Eis28Hzgy2-J_sVHsD72Yzyqb9KCIvAYz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "2f0ZO6GJElfZ2Eis28Hzg",
        "sourceHandle": "x2",
        "target": "ezdqQW9wTUw93F6kjOzku",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "selected": true,
        "focusable": true,
        "selectable": true,
        "id": "reactflow__edge-2f0ZO6GJElfZ2Eis28Hzgx2-ezdqQW9wTUw93F6kjOzkuw1"
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "ezdqQW9wTUw93F6kjOzku",
        "sourceHandle": "y2",
        "target": "_I1E__wCIVrhjMk6IMieE",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-ezdqQW9wTUw93F6kjOzkuy2-_I1E__wCIVrhjMk6IMieEz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "NvUcSDWBhzJZ31nzT4UlE",
        "sourceHandle": "y2",
        "target": "ptD8EVqwFUYr4W5A_tABY",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "selected": true,
        "focusable": true,
        "selectable": true,
        "id": "reactflow__edge-NvUcSDWBhzJZ31nzT4UlEy2-ptD8EVqwFUYr4W5A_tABYz1"
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "NvUcSDWBhzJZ31nzT4UlE",
        "sourceHandle": "x2",
        "target": "r45b461NxLN6wBODJ5CNP",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "id": "reactflow__edge-NvUcSDWBhzJZ31nzT4UlEx2-r45b461NxLN6wBODJ5CNPw1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "r45b461NxLN6wBODJ5CNP",
        "sourceHandle": "z2",
        "target": "FihTrMO56kj9jT8O_pO2T",
        "targetHandle": "y1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-r45b461NxLN6wBODJ5CNPz2-FihTrMO56kj9jT8O_pO2Ty1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "r45b461NxLN6wBODJ5CNP",
        "sourceHandle": "x2",
        "target": "EwvLPSI6AlZ4TnNIJTZA4",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "id": "reactflow__edge-r45b461NxLN6wBODJ5CNPx2-EwvLPSI6AlZ4TnNIJTZA4w1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "EwvLPSI6AlZ4TnNIJTZA4",
        "sourceHandle": "z2",
        "target": "lfNFDZZNdrB0lbEaMtU71",
        "targetHandle": "y1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-EwvLPSI6AlZ4TnNIJTZA4z2-lfNFDZZNdrB0lbEaMtU71y1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "EwvLPSI6AlZ4TnNIJTZA4",
        "sourceHandle": "z2",
        "target": "sNceS4MpSIjRkWhNDmrFg",
        "targetHandle": "y1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-EwvLPSI6AlZ4TnNIJTZA4z2-sNceS4MpSIjRkWhNDmrFgy1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "EwvLPSI6AlZ4TnNIJTZA4",
        "sourceHandle": "z2",
        "target": "PY9G7KQy8bF6eIdr1ydHf",
        "targetHandle": "y1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-EwvLPSI6AlZ4TnNIJTZA4z2-PY9G7KQy8bF6eIdr1ydHfy1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "EwvLPSI6AlZ4TnNIJTZA4",
        "sourceHandle": "x2",
        "target": "ELj8af7Mi38kUbaPJfCUR",
        "targetHandle": "w2",
        "data": {
          "edgeStyle": "solid"
        },
        "id": "reactflow__edge-EwvLPSI6AlZ4TnNIJTZA4x2-ELj8af7Mi38kUbaPJfCURw2",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "ELj8af7Mi38kUbaPJfCUR",
        "sourceHandle": "y2",
        "target": "g8GjkJAhvnSxXTZks0V1g",
        "targetHandle": "z2",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-ELj8af7Mi38kUbaPJfCURy2-g8GjkJAhvnSxXTZks0V1gz2",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "LJt27onEOeIBomiEMTyKd",
        "sourceHandle": "y2",
        "target": "Z7jp_Juj5PffSxV7UZcBb",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-LJt27onEOeIBomiEMTyKdy2-Z7jp_Juj5PffSxV7UZcBbz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "LJt27onEOeIBomiEMTyKd",
        "sourceHandle": "y2",
        "target": "qSAdfaGUfn8mtmDjHJi3z",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-LJt27onEOeIBomiEMTyKdy2-qSAdfaGUfn8mtmDjHJi3zz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "LJt27onEOeIBomiEMTyKd",
        "sourceHandle": "y2",
        "target": "rq_y_OBMD9AH_4aoecvAi",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-LJt27onEOeIBomiEMTyKdy2-rq_y_OBMD9AH_4aoecvAiz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0.8 8",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "LJt27onEOeIBomiEMTyKd",
        "sourceHandle": "y2",
        "target": "bQnOAu863hsHdyNMNyJop",
        "targetHandle": "z1",
        "data": {
          "edgeStyle": "dashed"
        },
        "id": "reactflow__edge-LJt27onEOeIBomiEMTyKdy2-bQnOAu863hsHdyNMNyJopz1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "ELj8af7Mi38kUbaPJfCUR",
        "sourceHandle": "x2",
        "target": "LJt27onEOeIBomiEMTyKd",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "id": "reactflow__edge-ELj8af7Mi38kUbaPJfCURx2-LJt27onEOeIBomiEMTyKdw1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "LJt27onEOeIBomiEMTyKd",
        "sourceHandle": "x2",
        "target": "STQQbPa7PE3gbjMdL6P-t",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "id": "reactflow__edge-LJt27onEOeIBomiEMTyKdx2-STQQbPa7PE3gbjMdL6P-tw1",
        "selected": true,
        "selectable": true,
        "focusable": true
      },
      {
        "style": {
          "strokeDasharray": "0",
          "strokeLinecap": "round",
          "strokeWidth": 3.5,
          "stroke": "#2b78e4"
        },
        "source": "STQQbPa7PE3gbjMdL6P-t",
        "sourceHandle": "x2",
        "target": "sVXZrBCsiSzWBBYWTm-nQ",
        "targetHandle": "w1",
        "data": {
          "edgeStyle": "solid"
        },
        "id": "reactflow__edge-STQQbPa7PE3gbjMdL6P-tx2-sVXZrBCsiSzWBBYWTm-nQw1",
        "selected": true,
        "selectable": true,
        "focusable": true
      }
    ]
  },
  "backend": "---\nrenderer: 'editor'\njsonUrl: '/jsons/roadmaps/backend.json'\npdfUrl: '/pdfs/roadmaps/backend.pdf'\norder: 2\nbriefTitle: 'Backend'\nbriefDescription: 'Step by step guide to becoming a backend developer in 2025'\ntitle: 'Backend Developer'\ndescription: 'Step by step guide to becoming a modern backend developer in 2025'\nhasTopics: true\nisForkable: false\ncourses:\n  - title: 'Complete Course to Master SQL'\n    description: 'Learn SQL from scratch with this comprehensive course'\n    link: 'https://roadmap.sh/courses/sql'\n    features:\n      - '55+ Lessons'\n      - 'AI Tutor'\n      - 'Coding Environment'\n      - 'Quizzes'\n      - 'Certification'\n    instructor:\n      name: 'Kamran Ahmed'\n      image: 'https://github.com/kamranahmedse.png'\n      title: 'Founder - roadmap.sh'\npartner:\n  description: \"Get the latest Backend news from our sister site\"\n  link: \"https://thenewstack.io/?utm_source=roadmap.sh&utm_medium=Referral&utm_campaign=Alert\"\n  linkText: \"TheNewStack.io\"\nquestion:\n  title: 'What is Backend Development?'\n  description: |\n    Backend development refers to the server-side aspect of web development, focusing on creating and managing the server logic, databases, and APIs. It involves handling user authentication, authorization, and processing user requests, typically using [backend development languages](https://roadmap.sh/backend/languages) such as Python, Java, Ruby, PHP, JavaScript (Node.js), and .NET.\n\n    ## What does a Backend Developer do?\n    A backend developer focuses on creating and maintaining the server-side components of web applications. They are primarily tasked with developing server-side APIs, handling database operations, and ensuring that the backend can manage high traffic volumes efficiently. Key responsibilities include integrating external services such as payment gateways and cloud services, and enhancing the performance and scalability of systems. This role is crucial for processing and securing data, serving as the backbone that supports frontend developers in delivering a seamless user experience.\ndimensions:\n  width: 968\n  height: 3500\nschema:\n  headline: 'Backend Developer Roadmap: What is Backend Development?'\n  description: 'Learn what backend development is, what backend developers do and how to become one using our community-driven roadmap.'\n  imageUrl: 'https://roadmap.sh/roadmaps/backend.png'\n  datePublished: '2023-01-05'\n  dateModified: '2023-09-16'\nseo:\n  title: 'Backend Developer Roadmap: What is Backend Development'\n  description: 'Learn what backend development is, what backend developers do and how to become one using our community-driven roadmap.'\n  keywords:\n    - 'backend roadmap 2025'\n    - 'backend developer roadmap 2025'\n    - 'guide to becoming a developer'\n    - 'guide to becoming a backend developer'\n    - 'backend roadmap'\n    - 'backend developer'\n    - 'backend engineer'\n    - 'backend skills'\n    - 'backend development'\n    - 'javascript developer'\n    - 'backend development skills'\n    - 'backend development skills test'\n    - 'backend engineer roadmap'\n    - 'backend developer roadmap'\n    - 'become a backend developer'\n    - 'backend developer career path'\n    - 'typescript developer'\n    - 'javascript developer'\n    - 'modern javascript developer'\n    - 'nodejs developer'\n    - 'skills for backend development'\n    - 'learn backend development'\n    - 'what is backend development'\n    - 'backend developer quiz'\n    - 'backend developer interview questions'\nrelatedRoadmaps:\n  - 'frontend'\n  - 'full-stack'\n  - 'system-design'\n  - 'python'\n  - 'devops'\n  - 'javascript'\n  - 'nodejs'\n  - 'postgresql-dba'\nrelatedQuestions:\n  - 'javascript'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'role-roadmap'\n---\n",
  "content": {
    "acid@qSAdfaGUfn8mtmDjHJi3z": "# ACID\n\nACID is an acronym representing four key properties that guarantee reliable processing of database transactions. It stands for Atomicity, Consistency, Isolation, and Durability. Atomicity ensures that a transaction is treated as a single, indivisible unit that either completes entirely or fails completely. Consistency maintains the database in a valid state before and after the transaction. Isolation ensures that concurrent transactions do not interfere with each other, appearing to execute sequentially. Durability guarantees that once a transaction is committed, it remains so, even in the event of system failures. These properties are crucial in maintaining data integrity and reliability in database systems, particularly in scenarios involving multiple, simultaneous transactions or where data accuracy is critical, such as in financial systems or e-commerce platforms.\n\nVisit the following resources to learn more:\n\n- [@article@What is ACID Compliant Database?](https://retool.com/blog/whats-an-acid-compliant-database/)\n- [@article@What is ACID Compliance?: Atomicity, Consistency, Isolation](https://fauna.com/blog/what-is-acid-compliance-atomicity-consistency-isolation)\n- [@video@ACID Explained: Atomic, Consistent, Isolated & Durable](https://www.youtube.com/watch?v=yaQ5YMWkxq4)\n",
    "apache@jjjonHTHHo-NiAf6p9xPv": "# Apache\n\nApache, officially known as the Apache HTTP Server, is a free, open-source web server software developed and maintained by the Apache Software Foundation. It's one of the most popular web servers worldwide, known for its robustness, flexibility, and extensive feature set. Apache supports a wide range of operating systems and can handle various content types and programming languages through its modular architecture. It offers features like virtual hosting, SSL/TLS support, and URL rewriting. Apache's configuration files allow for detailed customization of server behavior. While it has faced competition from newer alternatives like Nginx, especially in high-concurrency scenarios, Apache remains widely used due to its stability, comprehensive documentation, and large community support. It's particularly favored for its ability to integrate with other open-source technologies in the LAMP (Linux, Apache, MySQL, PHP/Perl/Python) stack.\n\nVisit the following resources to learn more:\n\n- [@official@Apache Server](https://httpd.apache.org/)\n- [@official@Apache Server Documentation](https://httpd.apache.org/docs/2.4/)\n- [@video@What is Apache Web Server?](https://www.youtube.com/watch?v=kaaenHXO4t4)\n- [@video@Apache vs NGINX](https://www.youtube.com/watch?v=9nyiY-psbMs)\n- [@feed@Explore top posts about Apache](https://app.daily.dev/tags/apache?ref=roadmapsh)\n",
    "architectural-patterns@tHiUpG9LN35E5RaHddMv5": "# Architectural Patterns\n\nAn architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context. The architectural patterns address various issues in software engineering, such as computer hardware performance limitations, high availability and minimization of a business risk.\n\nVisit the following resources to learn more:\n\n- [@article@14 Architectural Patterns to know](https://www.redhat.com/architect/14-software-architecture-patterns)\n- [@article@10 Common Software Architectural Patterns in a nutshell](https://theiotacademy.medium.com/10-common-software-architectural-patterns-in-a-nutshell-1b1f6cf5036b)\n",
    "authentication@PY9G7KQy8bF6eIdr1ydHf": "# Authentication\n\nAPI authentication is the process of verifying the identity of clients attempting to access an API, ensuring that only authorized users or applications can interact with the API's resources. Common methods include API keys, OAuth 2.0, JSON Web Tokens (JWT), basic authentication, and OpenID Connect. These techniques vary in complexity and security level, from simple token-based approaches to more sophisticated protocols that handle both authentication and authorization. API authentication protects sensitive data, prevents unauthorized access, enables usage tracking, and can provide granular control over resource access. The choice of authentication method depends on factors such as security requirements, types of clients, ease of implementation, and scalability needs. Implementing robust API authentication is crucial for maintaining the integrity, security, and controlled usage of web services and applications in modern, interconnected software ecosystems.\n\nVisit the following resources to learn more:\n\n- [@roadmap.sh@Basic Authentication](https://roadmap.sh/guides/basic-authentication)\n- [@roadmap.sh@Session Based Authentication](https://roadmap.sh/guides/session-authentication)\n- [@roadmap.sh@Token Based Authentication](https://roadmap.sh/guides/token-authentication)\n- [@roadmap.sh@JWT Authentication](https://roadmap.sh/guides/jwt-authentication)\n- [@roadmap.sh@OAuth - Open Authorization](https://roadmap.sh/guides/oauth)\n- [@roadmap.sh@SSO - Single Sign On](https://roadmap.sh/guides/sso)\n- [@feed@Explore top posts about Authentication](https://app.daily.dev/tags/authentication?ref=roadmapsh)\n",
    "aws-neptune@5xy66yQrz1P1w7n6PcAFq": "# AWS Neptune\n\nAmazon Neptune is a fully managed graph database service provided by Amazon Web Services (AWS). It's designed to store and navigate highly connected data, supporting both property graph and RDF (Resource Description Framework) models. Neptune uses graph query languages like Gremlin and SPARQL, making it suitable for applications involving complex relationships, such as social networks, recommendation engines, fraud detection systems, and knowledge graphs. It offers high availability, with replication across multiple Availability Zones, and supports up to 15 read replicas for improved performance. Neptune integrates with other AWS services, provides encryption at rest and in transit, and offers fast recovery from failures. Its scalability and performance make it valuable for handling large-scale, complex data relationships in enterprise-level applications.\n\nLearn more from the following resources:\n\n- [@official@AWS Neptune](https://aws.amazon.com/neptune/)\n- [@article@Setting Up Amazon Neptune Graph Database](https://cliffordedsouza.medium.com/setting-up-amazon-neptune-graph-database-2b73512a7388)\n- [@video@Getting Started with Neptune Serverless](https://www.youtube.com/watch?v=b04-jjM9t4g)\n",
    "backpressure@JansCqGDyXecQkD1K7E7e": "# Backpressure\n\nBack pressure is a flow control mechanism in systems processing asynchronous data streams, where the receiving component signals its capacity to handle incoming data to the sending component. This feedback loop prevents overwhelming the receiver with more data than it can process, ensuring system stability and optimal performance. In software systems, particularly those dealing with high-volume data or event-driven architectures, back pressure helps manage resource allocation, prevent memory overflows, and maintain responsiveness. It's commonly implemented in reactive programming, message queues, and streaming data processing systems. By allowing the receiver to control the flow of data, back pressure helps create more resilient, efficient systems that can gracefully handle varying loads and prevent cascading failures in distributed systems.\n\nVisit the following resources to learn more:\n\n- [@article@Awesome Architecture: Backpressure](https://awesome-architecture.com/back-pressure/)\n- [@article@Backpressure explained — The Resisted Flow of Data through Software](https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7)\n- [@video@What is Back Pressure](https://www.youtube.com/watch?v=viTGm_cV7lE)\n",
    "base@QZwTLOvjUTaSb_9deuxsR": "# Base\n\nOracle Base Database Service enables you to maintain absolute control over your data while using the combined capabilities of Oracle Database and Oracle Cloud Infrastructure. Oracle Base Database Service offers database systems (DB systems) on virtual machines. They are available as single-node DB systems and multi-node RAC DB systems on Oracle Cloud Infrastructure (OCI). You can manage these DB systems by using the OCI Console, the OCI API, the OCI CLI, the Database CLI (DBCLI), Enterprise Manager, or SQL Developer.\n\nLearn more from the following resources:\n\n- [@official@Base Database Documentation](https://docs.oracle.com/en-us/iaas/base-database/index.html)\n",
    "basic-authentication@yRiJgjjv2s1uV9vgo3n8m": "# Basic authentication\n\nBasic Authentication is a simple HTTP authentication scheme built into the HTTP protocol. It works by sending a user's credentials (username and password) encoded in base64 format within the HTTP header. When a client makes a request to a server requiring authentication, the server responds with a 401 status code and a \"WWW-Authenticate\" header. The client then resends the request with the Authorization header containing the word \"Basic\" followed by the base64-encoded string of \"username:password\". While easy to implement, Basic Authentication has significant security limitations: credentials are essentially sent in plain text (base64 is easily decoded), and it doesn't provide any encryption. Therefore, it should only be used over HTTPS connections to ensure the credentials are protected during transmission. Due to its simplicity and lack of advanced security features, Basic Authentication is generally recommended only for simple, low-risk scenarios or as a fallback mechanism.\n\nVisit the following resources to learn more:\n\n- [@roadmap.sh@HTTP Basic Authentication](https://roadmap.sh/guides/http-basic-authentication)\n- [@video@Basic Authentication in 5 minutes](https://www.youtube.com/watch?v=rhi1eIjSbvk)\n- [@video@Illustrated HTTP Basic Authentication](https://www.youtube.com/watch?v=mwccHwUn7Gc)\n- [@feed@Explore top posts about Authentication](https://app.daily.dev/tags/authentication?ref=roadmapsh)\n",
    "bcrypt@dlG1bVkDmjI3PEGpkm1xH": "# Bcrypt\n\nBcrypt is a password-hashing function designed to securely hash passwords for storage in databases. Created by Niels Provos and David Mazières, it's based on the Blowfish cipher and incorporates a salt to protect against rainbow table attacks. Bcrypt's key feature is its adaptive nature, allowing for the adjustment of its cost factor to make it slower as computational power increases, thus maintaining resistance against brute-force attacks over time. It produces a fixed-size hash output, typically 60 characters long, which includes the salt and cost factor. Bcrypt is widely used in many programming languages and frameworks due to its security strength and relative ease of implementation. Its deliberate slowness in processing makes it particularly effective for password storage, where speed is not a priority but security is paramount.\n\nVisit the following resources to learn more:\n\n- [@opensource@bcrypt](https://github.com/kelektiv/node.bcrypt.js)\n- [@article@Understanding bcrypt](https://auth0.com/blog/hashing-in-action-understanding-bcrypt/)\n- [@video@bcrypt explained](https://www.youtube.com/watch?v=AzA_LTDoFqY)\n",
    "bitbucket@Ry_5Y-BK7HrkIc6X0JG1m": "# Bitbucket\n\nBitbucket is a web-based version control repository hosting service owned by Atlassian. It primarily uses Git version control systems, offering both cloud-hosted and self-hosted options. Bitbucket provides features such as pull requests for code review, branch permissions, and inline commenting on code. It integrates seamlessly with other Atlassian products like Jira and Trello, making it popular among teams already using Atlassian tools. Bitbucket supports continuous integration and deployment through Bitbucket Pipelines. It offers unlimited private repositories for small teams, making it cost-effective for smaller organizations.\n\nVisit the following resources to learn more:\n\n- [@official@Bitbucket](https://bitbucket.org/product)\n- [@official@Overview of Bitbucket](https://bitbucket.org/product/guides/getting-started/overview#a-brief-overview-of-bitbucket)\n- [@article@Using Git with Bitbucket Cloud](https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud)\n- [@video@Bitbucket tutorial | How to use Bitbucket Cloud](https://www.youtube.com/watch?v=M44nEyd_5To)\n- [@feed@Explore top posts about Bitbucket](https://app.daily.dev/tags/bitbucket?ref=roadmapsh)\n",
    "browsers-and-how-they-work@P82WFaTPgQEPNp5IIuZ1Y": "# Browsers\n\nWeb browsers are software applications that enable users to access, retrieve, and navigate information on the World Wide Web. They interpret and display HTML, CSS, and JavaScript to render web pages. Modern browsers like Google Chrome, Mozilla Firefox, Apple Safari, and Microsoft Edge offer features such as tabbed browsing, bookmarks, extensions, and synchronization across devices. They incorporate rendering engines (e.g., Blink, Gecko, WebKit) to process web content, and JavaScript engines for executing code. Browsers also manage security through features like sandboxing, HTTPS enforcement, and pop-up blocking. They support various web standards and technologies, including HTML5, CSS3, and Web APIs, enabling rich, interactive web experiences. With the increasing complexity of web applications, browsers have evolved to become powerful platforms, balancing performance, security, and user experience in the ever-changing landscape of the internet.\n\nVisit the following resources to learn more:\n\n- [@article@How Browsers Work](https://www.ramotion.com/blog/what-is-web-browser/)\n- [@article@Populating the Page: How Browsers Work](https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work)\n- [@video@How Do Web Browsers Work?](https://www.youtube.com/watch?v=5rLFYtXHo9s)\n- [@feed@Explore top posts about Browsers](https://app.daily.dev/tags/browsers?ref=roadmapsh)\n",
    "building-for-scale@SHmbcMRsc3SygEDksJQBD": "# Building for Scale\n\nSpeaking in general terms, scalability is the ability of a system to handle a growing amount of work by adding resources to it. A software that was conceived with a scalable architecture in mind, is a system that will support higher workloads without any fundamental changes to it, but don't be fooled, this isn't magic. You'll only get so far with smart thinking without adding more sources to it. When you think about the infrastructure of a scalable system, you have two main ways of building it: using on-premises resources or leveraging all the tools a cloud provider can give you.\n\nThe main difference between on-premises and cloud resources will be **flexibility**, on cloud providers you don't really need to plan ahead, you can upgrade your infrastructure with a couple of clicks, while with on-premises resources you will need a certain level of planning.\n\nVisit the following resources to learn more:\n\n- [@article@Scalable Architecture: A Definition and How-To Guide](https://www.sentinelone.com/blog/scalable-architecture/)\n- [@video@Scaling Distributed Systems - Software Architecture Introduction](https://www.youtube.com/watch?v=gxfERVP18-g)\n",
    "c@rImbMHLLfJwjf3l25vBkc": "# C\\#\n\nC# (pronounced C-sharp) is a modern, object-oriented programming language developed by Microsoft as part of its .NET framework. It combines the power and efficiency of C++ with the simplicity of Visual Basic, featuring strong typing, lexical scoping, and support for functional, generic, and component-oriented programming paradigms. C# is widely used for developing Windows desktop applications, web applications with ASP.NET, games with Unity, and cross-platform mobile apps using Xamarin. It offers features like garbage collection, type safety, and extensive library support. C# continues to evolve, with regular updates introducing new capabilities such as asynchronous programming, nullable reference types, and pattern matching. Its integration with the .NET ecosystem and Microsoft's development tools makes it a popular choice for enterprise software development and large-scale applications.\n\nVisit the following resources to learn more:\n\n- [@official@C# Tour](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/)\n- [@course@C# Learning Path](https://docs.microsoft.com/en-us/learn/paths/csharp-first-steps/?WT.mc_id=dotnet-35129-website)\n- [@video@Learn C# Programming – Full Course with Mini-Projects](https://www.youtube.com/watch?v=YrtFtdTTfv0)\n- [@feed@Explore top posts about C#](https://app.daily.dev/tags/csharp?ref=roadmapsh)\n",
    "caching@ELj8af7Mi38kUbaPJfCUR": "# Caching\n\nCaching is a technique used in computing to store and retrieve frequently accessed data quickly, reducing the need to fetch it from the original, slower source repeatedly. It involves keeping a copy of data in a location that's faster to access than its primary storage. Caching can occur at various levels, including browser caching, application-level caching, and database caching. It significantly improves performance by reducing latency, decreasing network traffic, and lowering the load on servers or databases. Common caching strategies include time-based expiration, least recently used (LRU) algorithms, and write-through or write-back policies. While caching enhances speed and efficiency, it also introduces challenges in maintaining data consistency and freshness. Effective cache management is crucial in balancing performance gains with the need for up-to-date information in dynamic systems.\n\nVisit the following resources to learn more:\n\n- [@article@What is Caching - AWS](https://aws.amazon.com/caching/)\n- [@article@Caching - Cloudflare](https://www.cloudflare.com/learning/cdn/what-is-caching/)\n",
    "caddy@Op-PSPNoyj6Ss9CS09AXh": "# Caddy\n\nCaddy is a modern, open-source web server written in Go. It's known for its simplicity, automatic HTTPS encryption, and HTTP/2 support out of the box. Caddy stands out for its ease of use, with a simple configuration syntax and the ability to serve static files with zero configuration. It automatically obtains and renews SSL/TLS certificates from Let's Encrypt, making secure deployments straightforward. Caddy supports various plugins and modules for extended functionality, including reverse proxying, load balancing, and dynamic virtual hosting. It's designed with security in mind, implementing modern web standards by default. While it may not match the raw performance of servers like Nginx in extremely high-load scenarios, Caddy's simplicity, built-in security features, and low resource usage make it an attractive choice for many web hosting needs, particularly for smaller to medium-sized projects or developers seeking a hassle-free server setup.\n\nVisit the following resources to learn more:\n\n- [@official@Caddy Server](https://caddyserver.com/)\n- [@opensource@caddyserver/caddy - Caddy on GitHub](https://github.com/caddyserver/caddy)\n- [@video@How to Make a Simple Caddy 2 Website](https://www.youtube.com/watch?v=WgUV_BlHvj0)\n",
    "cap-theorem@LAdKDJ4LcMaDWqslMvE8X": "# CAP Theorem\n\nThe CAP Theorem, also known as Brewer's Theorem, is a fundamental principle in distributed database systems. It states that in a distributed system, it's impossible to simultaneously guarantee all three of the following properties: Consistency (all nodes see the same data at the same time), Availability (every request receives a response, without guarantee that it contains the most recent version of the data), and Partition tolerance (the system continues to operate despite network failures between nodes). According to the theorem, a distributed system can only strongly provide two of these three guarantees at any given time. This principle guides the design and architecture of distributed systems, influencing decisions on data consistency models, replication strategies, and failure handling. Understanding the CAP Theorem is crucial for designing robust, scalable distributed systems and for choosing appropriate database solutions for specific use cases in distributed computing environments.\n\nVisit the following resources to learn more:\n\n- [@article@What is CAP Theorem?](https://www.bmc.com/blogs/cap-theorem/)\n- [@article@An Illustrated Proof of the CAP Theorem](https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/)\n- [@article@CAP Theorem and its applications in NoSQL Databases](https://www.ibm.com/uk-en/cloud/learn/cap-theorem)\n- [@video@What is CAP Theorem?](https://www.youtube.com/watch?v=_RbsFXWRZ10)\n",
    "cassandra@gT6-z2vhdIQDzmR2K1g1U": "# Cassandra\n\nApache Cassandra is a highly scalable, distributed NoSQL database designed to handle large amounts of structured data across multiple commodity servers. It provides high availability with no single point of failure, offering linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure. Cassandra uses a masterless ring architecture, where all nodes are equal, allowing for easy data distribution and replication. It supports flexible data models and can handle both unstructured and structured data. Cassandra excels in write-heavy environments and is particularly suitable for applications requiring high throughput and low latency. Its data model is based on wide column stores, offering a more complex structure than key-value stores. Widely used in big data applications, Cassandra is known for its ability to handle massive datasets while maintaining performance and reliability.\n\nVisit the following resources to learn more:\n\n- [@official@Apache Cassandra](https://cassandra.apache.org/_/index.html)\n- [article@Cassandra - Quick Guide](https://www.tutorialspoint.com/cassandra/cassandra_quick_guide.htm)\n- [@video@Apache Cassandra - Course for Beginners](https://www.youtube.com/watch?v=J-cSy5MeMOA)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "cdn@Nq2BO53bHJdFT1rGZPjYx": "# CDN (Content Delivery Network)\n\nA Content Delivery Network (CDN) service aims to provide high availability and performance improvements of websites. This is achieved with fast delivery of website assets and content typically via geographically closer endpoints to the client requests.\n\nTraditional commercial CDNs (Amazon CloudFront, Akamai, CloudFlare and Fastly) provide servers across the globe which can be used for this purpose. Serving assets and contents via a CDN reduces bandwidth on website hosting, provides an extra layer of caching to reduce potential outages and can improve website security as well\n\nVisit the following resources to learn more:\n\n- [@article@CloudFlare - What is a CDN? | How do CDNs work?](https://www.cloudflare.com/en-ca/learning/cdn/what-is-a-cdn/)\n- [@article@AWS - CDN](https://aws.amazon.com/what-is/cdn/)\n- [@video@What is Cloud CDN?](https://www.youtube.com/watch?v=841kyd_mfH0)\n- [@video@What is a CDN and how does it work?](https://www.youtube.com/watch?v=RI9np1LWzqw)\n",
    "ci--cd@mGfD7HfuP184lFkXZzGjG": "# CI/CD\n\nCI/CD (Continuous Integration/Continuous Delivery) is a set of practices and tools in software development that automate the process of building, testing, and deploying code changes. Continuous Integration involves frequently merging code changes into a central repository, where automated builds and tests are run. Continuous Delivery extends this by automatically deploying all code changes to a testing or staging environment after the build stage. Some implementations include Continuous Deployment, where changes are automatically released to production. CI/CD pipelines typically involve stages like code compilation, unit testing, integration testing, security scans, and deployment. This approach aims to improve software quality, reduce time to market, and increase development efficiency by catching and addressing issues early in the development cycle.\n\nVisit the following resources to learn more:\n\n- [@article@What is CI/CD?](https://about.gitlab.com/topics/ci-cd/)\n- [@article@A Primer: Continuous Integration and Continuous Delivery (CI/CD)](https://thenewstack.io/a-primer-continuous-integration-and-continuous-delivery-ci-cd/)\n- [@video@DevOps CI/CD Explained in 100 Seconds](https://www.youtube.com/watch?v=scEDHsr3APg)\n- [@video@Automate your Workflows with GitHub Actions](https://www.youtube.com/watch?v=nyKZTKQS_EQ)\n- [@article@Articles about CI/CD](https://thenewstack.io/category/ci-cd/)\n- [@feed@Explore top posts about CI/CD](https://app.daily.dev/tags/cicd?ref=roadmapsh)\n",
    "circuit-breaker@spkiQTPvXY4qrhhVUkoPV": "# Circuit Breaker\n\nThe circuit breaker design pattern is a way to protect a system from failures or excessive load by temporarily stopping certain operations if the system is deemed to be in a failed or overloaded state. It is commonly used in cloud computing environments to prevent cascading failures and to improve the resilience and availability of a system.  A circuit breaker consists of three states: closed, open, and half-open. In the closed state, the circuit breaker allows operations to proceed as normal. If the system encounters a failure or becomes overloaded, the circuit breaker moves to the open state, and all subsequent operations are immediately stopped. After a specified period of time, the circuit breaker moves to the half-open state, and a small number of operations are allowed to proceed. If these operations are successful, the circuit breaker moves back to the closed state; if they fail, the circuit breaker moves back to the open state.\n\nVisit the following resources to learn more:\n\n- [@article@Circuit Breaker - AWS Well-Architected Framework](https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_graceful_degradation.html)\n- [@article@The Circuit Breaker Pattern](https://aerospike.com/blog/circuit-breaker-pattern/)\n- [@video@Back to Basics: Static Stability Using a Circuit Breaker Pattern](https://www.youtube.com/watch?v=gy1RITZ7N7s)\n",
    "client-side@KWTbEVX_WxS8jmSaAX3Fe": "# Client Side Caching\n\nClient-side caching is a technique where web browsers or applications store data locally on the user's device to improve performance and reduce server load. It involves saving copies of web pages, images, scripts, and other resources on the client's system for faster access on subsequent visits. Modern browsers implement various caching mechanisms, including HTTP caching (using headers like Cache-Control and ETag), service workers for offline functionality, and local storage APIs. Client-side caching significantly reduces network traffic and load times, enhancing user experience, especially on slower connections. However, it requires careful management to balance improved performance with the need for up-to-date content. Developers must implement appropriate cache invalidation strategies and consider cache-busting techniques for critical updates. Effective client-side caching is crucial for creating responsive, efficient web applications while minimizing server resource usage.\n\nVisit the following resources to learn more:\n\n- [@article@Client Side Caching](https://redis.io/docs/latest/develop/use/client-side-caching/)\n- [@video@Everything you need to know about HTTP Caching](https://www.youtube.com/watch?v=HiBDZgTNpXY)\n",
    "containerization-vs-virtualization@SGVwJme-jT_pbOTvems0v": "# Containerization vs. Virtualization\n\nContainerization and virtualization are both technologies for isolating and running multiple applications on shared hardware, but they differ significantly in approach and resource usage. Virtualization creates separate virtual machines (VMs), each with its own operating system, running on a hypervisor. This provides strong isolation but consumes more resources. Containerization, exemplified by Docker, uses a shared operating system kernel to create isolated environments (containers) for applications. Containers are lighter, start faster, and use fewer resources than VMs. They're ideal for microservices architectures and rapid deployment. Virtualization offers better security isolation and is suitable for running different operating systems on the same hardware. Containerization provides greater efficiency and scalability, especially for cloud-native applications. The choice between them depends on specific use cases, security requirements, and infrastructure needs.\n\nVisit the following resources to learn more:\n\n- [@article@Containerization vs. Virtualization: Everything you need to know](https://middleware.io/blog/containerization-vs-virtualization/)\n- [@video@Virtual Machine (VM) vs Docker](https://www.youtube.com/watch?v=a1M_thDTqmU)\n- [@feed@Explore top posts about Containers](https://app.daily.dev/tags/containers?ref=roadmapsh)\n",
    "cookie-based-auth@ffzsh8_5yRq85trFt9Xhk": "# Cookie-Based Authentication\n\nCookie-based authentication is a method of maintaining user sessions in web applications. When a user logs in, the server creates a session and sends a unique identifier (session ID) to the client as a cookie. This cookie is then sent with every subsequent request, allowing the server to identify and authenticate the user. The actual session data is typically stored on the server, with the cookie merely serving as a key to access this data. This approach is stateful on the server side and works well for traditional web applications. It's relatively simple to implement and is natively supported by browsers. However, cookie-based authentication faces challenges with cross-origin requests, can be vulnerable to CSRF attacks if not properly secured, and may not be ideal for modern single-page applications or mobile apps. Despite these limitations, it remains a common authentication method, especially for server-rendered web applications.\n\nVisit the following resources to learn more:\n\n- [@article@How does cookie based authentication work?](https://stackoverflow.com/questions/17769011/how-does-cookie-based-authentication-work)\n- [@video@Session vs Token Authentication in 100 Seconds](https://www.youtube.com/watch?v=UBUNrFtufWo)\n",
    "cors@LU6WUbkWKbPM1rb2_gEqa": "# Cors\n\nCross-Origin Resource Sharing (CORS) is a security mechanism implemented by web browsers to control access to resources (like APIs or fonts) on a web page from a different domain than the one serving the web page. It extends and adds flexibility to the Same-Origin Policy, allowing servers to specify who can access their resources. CORS works through a system of HTTP headers, where browsers send a preflight request to the server hosting the cross-origin resource, and the server responds with headers indicating whether the actual request is allowed. This mechanism helps prevent unauthorized access to sensitive data while enabling legitimate cross-origin requests. CORS is crucial for modern web applications that often integrate services and resources from multiple domains, balancing security needs with the functionality requirements of complex, distributed web systems.\n\nVisit the following resources to learn more:\n\n- [@article@Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n- [@article@Understanding CORS](https://rbika.com/blog/understanding-cors)\n- [@video@CORS in 100 Seconds](https://www.youtube.com/watch?v=4KHiSt0oLJ0)\n- [@video@CORS in 6 minutes](https://www.youtube.com/watch?v=PNtFSVU-YTI)\n",
    "couchdb@qOlNzZ7U8LhIGukb67n7U": "# CouchDB\n\nApache CouchDB is an open-source document-oriented NoSQL database. It uses JSON to store data, JavaScript as its query language using MapReduce, and HTTP for an API. Unlike a relational database, a CouchDB database does not store data and relationships in tables. Instead, each database is a collection of independent documents. Each document maintains its own data and self-contained schema.\n\nVisit the following resources to learn more:\n\n- [@official@CouchDB](https://couchdb.apache.org/)\n- [@official@CouchDB Documentation](https://docs.couchdb.org/en/stable/)\n- [@video@What is CouchDB?](https://www.youtube.com/watch?v=Mru4sHzIfSA)\n- [@feed@Explore top posts about CouchDB](https://app.daily.dev/tags/couchdb?ref=roadmapsh)\n",
    "cqrs@u8IRw5PuXGUcmxA0YYXgx": "# CQRS\n\nCQRS (Command Query Responsibility Segregation) is an architectural pattern that separates read and write operations for a data store. In this pattern, \"commands\" handle data modification (create, update, delete), while \"queries\" handle data retrieval. The principle behind CQRS is that for many systems, especially complex ones, the requirements for reading data differ significantly from those for writing data. By separating these concerns, CQRS allows for independent scaling, optimization, and evolution of the read and write sides. This can lead to improved performance, scalability, and security. CQRS is often used in event-sourced systems and can be particularly beneficial in high-performance, complex domain applications. However, it also introduces additional complexity and should be applied judiciously based on the specific needs and constraints of the system.\n\nVisit the following resources to learn more:\n\n- [@article@CQRS Pattern](https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs)\n- [@video@Learn CQRS Pattern in 5 minutes!](https://www.youtube.com/watch?v=eiut3FIY1Cg)\n",
    "csp@HgQBde1zLUFtlwB66PR6_": "# Content Security Policy\n\nContent Security Policy (CSP) is a security standard implemented by web browsers to prevent cross-site scripting (XSS), clickjacking, and other code injection attacks. It works by allowing web developers to specify which sources of content are trusted and can be loaded on a web page. CSP is typically implemented through HTTP headers or meta tags, defining rules for various types of resources like scripts, stylesheets, images, and fonts. By restricting the origins from which content can be loaded, CSP significantly reduces the risk of malicious code execution. It also provides features like reporting violations to help developers identify and fix potential security issues. While powerful, implementing CSP requires careful configuration to balance security with functionality, especially for sites using third-party resources or inline scripts.\n\nVisit the following resources to learn more:\n\n- [@article@MDN — Content Security Policy (CSP)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)\n- [@article@Google Devs — Content Security Policy (CSP)](https://developers.google.com/web/fundamentals/security/csp)\n- [@video@Content Security Policy Explained](https://www.youtube.com/watch?v=-LjPRzFR5f0)\n- [@feed@Explore top posts about Security](https://app.daily.dev/tags/security?ref=roadmapsh)\n",
    "data-replication@wrl7HHWXOaxoKVlNZxZ6d": "# Data Replication\n\nData replication is the process of creating and maintaining multiple copies of the same data across different locations or nodes in a distributed system. It enhances data availability, reliability, and performance by ensuring that data remains accessible even if one or more nodes fail. Replication can be synchronous (changes are applied to all copies simultaneously) or asynchronous (changes are propagated after being applied to the primary copy). It's widely used in database systems, content delivery networks, and distributed file systems. Replication strategies include master-slave, multi-master, and peer-to-peer models. While improving fault tolerance and read performance, replication introduces challenges in maintaining data consistency across copies and managing potential conflicts. Effective replication strategies must balance consistency, availability, and partition tolerance, often in line with the principles of the CAP theorem.\n\nVisit the following resources to learn more:\n\n- [@article@Data Replication? - IBM](https://www.ibm.com/topics/data-replication)\n- [@video@What is Data Replication?](https://www.youtube.com/watch?v=iO8a1nMbL1o)\n",
    "database-indexes@y-xkHFE9YzhNIX3EiWspL": "# Database Indexes\n\nDatabase indexes are data structures that improve the speed of data retrieval operations in a database management system. They work similarly to book indexes, providing a quick way to look up information based on specific columns or sets of columns. Indexes create a separate structure that holds a reference to the actual data, allowing the database engine to find information without scanning the entire table. While indexes significantly enhance query performance, especially for large datasets, they come with trade-offs. They increase storage space requirements and can slow down write operations as the index must be updated with each data modification. Common types include B-tree indexes for general purpose use, bitmap indexes for low-cardinality data, and hash indexes for equality comparisons. Proper index design is crucial for optimizing database performance, balancing faster reads against slower writes and increased storage needs.\n\nVisit the following resources to learn more:\n\n- [@article@What is a Database Index?](https://www.codecademy.com/article/sql-indexes)\n- [@video@Database Indexing Explained](https://www.youtube.com/watch?v=-qNSXK7s7_w)\n- [@feed@Explore top posts about Database](https://app.daily.dev/tags/database?ref=roadmapsh)\n",
    "design-and-development-principles@9Fpoor-Os_9lvrwu5Zjh-": "# Design and Development Principles\n\nDesign and Development Principles are fundamental guidelines that inform the creation of software systems. Key principles include:\n\n- SOLID (Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)\n- DRY (Don't Repeat Yourself)\n- KISS (Keep It Simple, Stupid)\n- YAGNI (You Aren't Gonna Need It)\n- Separation of Concerns\n- Modularity\n- Encapsulation\n- Composition over Inheritance\n- Loose Coupling and High Cohesion\n- Principle of Least Astonishment\n\nVisit the following resources to learn more:\n\n- [@article@Design Principles - Wikipedia](https://en.wikipedia.org/wiki/Design_principles)\n- [@article@Design Principles - Microsoft](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/index)\n",
    "dns-and-how-it-works@hkxw9jPGYphmjhTjw8766": "# DNS\n\nDNS (Domain Name System) is a hierarchical, decentralized naming system for computers, services, or other resources connected to the Internet or a private network. It translates human-readable domain names (like `www.example.com`) into IP addresses (like 192.0.2.1) that computers use to identify each other. DNS servers distributed worldwide work together to resolve these queries, forming a global directory service. The system uses a tree-like structure with root servers at the top, followed by top-level domain servers (.com, .org, etc.), authoritative name servers for specific domains, and local DNS servers. DNS is crucial for the functioning of the Internet, enabling users to access websites and services using memorable names instead of numerical IP addresses. It also supports email routing, service discovery, and other network protocols.\n\nVisit the following resources to learn more:\n\n- [@article@Everything You Need to Know About DNS](https://cs.fyi/guide/everything-you-need-to-know-about-dns)\n- [@article@What is DNS?](https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/)\n- [@article@How DNS works (comic)](https://howdns.works/)\n- [@video@DNS and How does it Work?](https://www.youtube.com/watch?v=Wj0od2ag5sk)\n- [@feed@Explore top posts about DNS](https://app.daily.dev/tags/dns?ref=roadmapsh)\n",
    "domain-driven-design@BvHi5obg0L1JDZFKBzx9t": "# Domain-Driven Design\n\nDomain-Driven Design (DDD) is a software development approach that focuses on creating a deep understanding of the business domain and using this knowledge to inform the design of software systems. It emphasizes close collaboration between technical and domain experts to develop a shared language (ubiquitous language) and model that accurately represents the core concepts and processes of the business. DDD promotes organizing code around business concepts (bounded contexts), using rich domain models to encapsulate business logic, and separating the domain logic from infrastructure concerns. Key patterns in DDD include entities, value objects, aggregates, repositories, and domain services. This approach aims to create more maintainable and flexible software systems that closely align with business needs and can evolve with changing requirements. DDD is particularly valuable for complex domains where traditional CRUD-based architectures may fall short in capturing the nuances and rules of the business.\n\nVisit the following resources to learn more:\n\n- [@article@Domain-Driven Design](https://redis.com/glossary/domain-driven-design-ddd/)\n- [@video@Domain Driven Design: What You Need To Know](https://www.youtube.com/watch?v=4rhzdZIDX_k)\n- [@feed@Explore top posts about Domain-Driven Design](https://app.daily.dev/tags/domain-driven-design?ref=roadmapsh)\n",
    "dynamodb@dwfEHInbX2eFiafM-nRMX": "# DynamoDB\n\nAmazon DynamoDB is a fully managed, serverless NoSQL database service provided by Amazon Web Services (AWS). It offers high-performance, scalable, and flexible data storage for applications of any scale. DynamoDB supports both key-value and document data models, providing fast and predictable performance with seamless scalability. It features automatic scaling, built-in security, backup and restore options, and global tables for multi-region deployment. DynamoDB excels in handling high-traffic web applications, gaming backends, mobile apps, and IoT solutions. It offers consistent single-digit millisecond latency at any scale and supports both strongly consistent and eventually consistent read models. With its integration into the AWS ecosystem, on-demand capacity mode, and support for transactions, DynamoDB is widely used for building highly responsive and scalable applications, particularly those with unpredictable workloads or requiring low-latency data access.\n\nLearn more from the following resources:\n\n- [@official@AWS DynamoDB](https://aws.amazon.com/dynamodb/)\n- [@video@AWS DynamoDB Tutorial For Beginners](https://www.youtube.com/watch?v=2k2GINpO308)\n- [@feed@daily.dev AWS DynamoDB Feed](https://app.daily.dev/tags/aws-dynamodb)\n",
    "elasticsearch@NulaE1isWqn-feYHg4YQT": "# Elasticsearch\n\nElastic search at its core is a document-oriented search engine. It is a document based database that lets you INSERT, DELETE , RETRIEVE and even perform analytics on the saved records. But, Elastic Search is unlike any other general purpose database you have worked with, in the past. It's essentially a search engine and offers an arsenal of features you can use to retrieve the data stored in it, as per your search criteria. And that too, at lightning speeds.\n\nVisit the following resources to learn more:\n\n- [@official@Elasticsearch Website](https://www.elastic.co/elasticsearch/)\n- [@official@Elasticsearch Documentation](https://www.elastic.co/guide/index.html)\n- [@video@What is Elasticsearch](https://www.youtube.com/watch?v=ZP0NmfyfsoM)\n- [@feed@Explore top posts about ELK](https://app.daily.dev/tags/elk?ref=roadmapsh)\n",
    "event-sourcing@wqE-mkxvehOzOv8UyE39p": "# Event Sourcing\n\nEvent sourcing is a design pattern in which the state of a system is represented as a sequence of events that have occurred over time. In an event-sourced system, changes to the state of the system are recorded as events and stored in an event store. The current state of the system is derived by replaying the events from the event store. One of the main benefits of event sourcing is that it provides a clear and auditable history of all the changes that have occurred in the system. This can be useful for debugging and for tracking the evolution of the system over time.Event sourcing is often used in conjunction with other patterns, such as Command Query Responsibility Segregation (CQRS) and domain-driven design, to build scalable and responsive systems with complex business logic. It is also useful for building systems that need to support undo/redo functionality or that need to integrate with external systems.\n\nVisit the following resources to learn more:\n\n- [@article@Event Sourcing - Martin Fowler](https://martinfowler.com/eaaDev/EventSourcing.html)\n- [@video@Event Sourcing 101](https://www.youtube.com/watch?v=lg6aF5PP4Tc)\n- [@feed@Explore top posts about Architecture](https://app.daily.dev/tags/architecture?ref=roadmapsh)\n",
    "failure-modes@GwApfL4Yx-b5Y8dB9Vy__": "# Failure Modes\n\nDatabase failure modes refer to the various ways in which a database system can malfunction or cease to operate correctly. These include hardware failures (like disk crashes or network outages), software bugs, data corruption, performance degradation due to overload, and inconsistencies in distributed systems. Common failure modes involve data loss, system unavailability, replication lag in distributed databases, and deadlocks. To mitigate these, databases employ strategies such as redundancy, regular backups, transaction logging, and failover mechanisms. Understanding potential failure modes is crucial for designing robust database systems with high availability and data integrity. It informs the implementation of fault tolerance measures, recovery procedures, and monitoring systems to ensure database reliability and minimize downtime in critical applications.\n\nVisit the following resources to learn more:\n\n- [@article@Database Failure Modes](https://ieeexplore.ieee.org/document/7107294/)\n",
    "firebase@RyJFLLGieJ8Xjt-DlIayM": "# Firebase\n\nFirebase is a comprehensive mobile and web application development platform owned by Google. It provides a suite of cloud-based services that simplify app development, hosting, and scaling. Key features include real-time database, cloud storage, authentication, hosting, cloud functions, and analytics. Firebase offers real-time synchronization, allowing data to be updated across clients instantly. Its authentication service supports multiple providers, including email/password, social media logins, and phone authentication. The platform's serverless architecture enables developers to focus on front-end development without managing backend infrastructure. Firebase also provides tools for app testing, crash reporting, and performance monitoring.\n\nLearn more from the following resources:\n\n- [@official@Firebase](https://firebase.google.com/)\n- [@official@Firebase Documentation](https://firebase.google.com/docs)\n- [@video@Firebase in 100 seconds](https://www.youtube.com/watch?v=vAoB4VbhRzM)\n- [@course@The Ultimate Guide to Firebase](https://fireship.io/lessons/the-ultimate-beginners-guide-to-firebase/)\n",
    "functional-testing@NAGisfq2CgeK3SsuRjnMw": "# Functional Testing\n\nFunctional testing is where software is tested to ensure functional requirements are met. Usually, it is a form of black box testing in which the tester has no understanding of the source code; testing is performed by providing input and comparing expected/actual output. It contrasts with non-functional testing, which includes performance, load, scalability, and penetration testing.\n\nVisit the following resources to learn more:\n\n- [@article@What is Functional Testing?](https://www.guru99.com/functional-testing.html)\n- [@video@Functional Testing vs Non-Functional Testing](https://www.youtube.com/watch?v=NgQT7miTP9M)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)\n",
    "git@_I1E__wCIVrhjMk6IMieE": "# Git\n\nGit is a distributed version control system designed to handle projects of any size with speed and efficiency. Created by Linus Torvalds in 2005, it tracks changes in source code during software development, allowing multiple developers to work together on non-linear development. Git maintains a complete history of all changes, enabling easy rollbacks and comparisons between versions. Its distributed nature means each developer has a full copy of the repository, allowing for offline work and backup. Git's key features include branching and merging capabilities, staging area for commits, and support for collaborative workflows like pull requests. Its speed, flexibility, and robust branching and merging capabilities have made it the most widely used version control system in software development, particularly for open-source projects and team collaborations.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Git & GitHub Roadmap](https://roadmap.sh/git-github)\n- [@official@Git Documentation](https://git-scm.com/doc)\n- [@video@Git & GitHub Crash Course For Beginners](https://www.youtube.com/watch?v=SWYqp7iY_Tc)\n- [@video@Learn Git - Full Course](https://www.youtube.com/watch?v=rH3zE7VlIMs)\n- [@article@Git Cheat Sheet](https://cs.fyi/guide/git-cheatsheet)\n- [@article@Learn Git Branching](https://learngitbranching.js.org/)\n- [@feed@Explore top posts about Git](https://app.daily.dev/tags/git?ref=roadmapsh)\n",
    "github@ptD8EVqwFUYr4W5A_tABY": "# GitHub\n\nGitHub is a web-based platform for version control and collaboration using Git. Owned by Microsoft, it provides hosting for software development and offers features beyond basic Git functionality. GitHub includes tools for project management, code review, and social coding. Key features include repositories for storing code, pull requests for proposing and reviewing changes, issues for tracking bugs and tasks, and actions for automating workflows. It supports both public and private repositories, making it popular for open-source projects and private development. GitHub's collaborative features, like forking repositories and inline code comments, facilitate team development and community contributions. With its extensive integrations and large user base, GitHub has become a central hub for developers, serving as a portfolio, collaboration platform, and deployment tool for software projects of all sizes.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Git & GitHub Roadmap](https://roadmap.sh/git-github)\n- [@official@GitHub](https://github.com)\n- [@official@GitHub Documentation](https://docs.github.com)\n- [@video@What is GitHub?](https://www.youtube.com/watch?v=w3jLJU7DT5E)\n- [@video@Git vs. GitHub: Whats the difference?](https://www.youtube.com/watch?v=wpISo9TNjfU)\n- [@video@Git and GitHub for Beginners](https://www.youtube.com/watch?v=RGOj5yH7evk)\n- [@feed@Explore top posts about GitHub](https://app.daily.dev/tags/github?ref=roadmapsh)\n",
    "gitlab@Wcp-VDdFHipwa7hNAp1z_": "# GitLab\n\nGitLab is a web-based DevOps platform that provides a complete solution for the software development lifecycle. It offers source code management, continuous integration/continuous deployment (CI/CD), issue tracking, and more, all integrated into a single application. GitLab supports Git repositories and includes features like merge requests (similar to GitHub's pull requests), wiki pages, and issue boards. It emphasizes DevOps practices, providing built-in CI/CD pipelines, container registry, and Kubernetes integration. GitLab offers both cloud-hosted and self-hosted options, giving organizations flexibility in deployment. Its all-in-one approach differentiates it from competitors, as it includes features that might require multiple tools in other ecosystems. GitLab's focus on the entire DevOps lifecycle, from planning to monitoring, makes it popular among enterprises and teams seeking a unified platform for their development workflows.\n\nVisit the following resources to learn more:\n\n- [@official@GitLab](https://gitlab.com/)\n- [@official@GitLab Documentation](https://docs.gitlab.com/)\n- [@video@What is GitLab and Why Use It?](https://www.youtube.com/watch?v=bnF7f1zGpo4)\n- [@feed@Explore top posts about GitLab](https://app.daily.dev/tags/gitlab?ref=roadmapsh)\n",
    "go@BdXbcz4-ar3XOX0wIKzBp": "# Go\n\nGo, also known as Golang, is a statically typed, compiled programming language designed by Google. It combines the efficiency of compiled languages with the ease of use of dynamically typed interpreted languages. Go features built-in concurrency support through goroutines and channels, making it well-suited for networked and multicore systems. It has a simple and clean syntax, fast compilation times, and efficient garbage collection. Go's standard library is comprehensive, reducing the need for external dependencies. The language emphasizes simplicity and readability, with features like implicit interfaces and a lack of inheritance. Go is particularly popular for building microservices, web servers, and distributed systems. Its performance, simplicity, and robust tooling make it a favored choice for cloud-native development, DevOps tools, and large-scale backend systems.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Go Roadmap](https://roadmap.sh/golang)\n- [@official@Go Reference Documentation](https://go.dev/doc/)\n- [@article@Go by Example - annotated example programs](https://gobyexample.com/)\n- [@article@Go, the Programming Language of the Cloud](https://thenewstack.io/go-the-programming-language-of-the-cloud/)\n- [@video@Go Programming – Golang Course with Bonus Projects](https://www.youtube.com/watch?v=un6ZyFkqFKo)\n- [@feed@Explore top posts about Golang](https://app.daily.dev/tags/golang?ref=roadmapsh)\n",
    "gof-design-patterns@6XIWO0MoE-ySl4qh_ihXa": "# GoF Design Patterns\n\nThe Gang of Four (GoF) Design Patterns are a collection of 23 foundational software design patterns that provide solutions to common object-oriented design problems. These patterns are grouped into three categories: *Creational* (focused on object creation like Singleton and Factory), *Structural* (focused on class and object composition like Adapter and Composite), and *Behavioral* (focused on communication between objects like Observer and Strategy). Each pattern offers a proven template for addressing specific design challenges, promoting code reusability, flexibility, and maintainability across software systems.\n\nLearn more from the following links:\n\n- [@article@Gangs of Four (GoF) Design Patterns](https://www.digitalocean.com/community/tutorials/gangs-of-four-gof-design-patterns)\n- [@article@Design Patterns for Humans](https://github.com/kamranahmedse/design-patterns-for-humans)\n- [@video@Tutorial - Builder Pattern (Gang of Four Design Patterns Series)](https://www.youtube.com/watch?v=_sa2WlAFWQos)\n",
    "graceful-degradation@G9AI_i3MkUE1BsO3_-PH7": "# Graceful Degradation\n\nGraceful degradation is a design principle that states that a system should be designed to continue functioning, even if some of its components or features are not available. In the context of web development, graceful degradation refers to the ability of a web page or application to continue functioning, even if the user's browser or device does not support certain features or technologies. Graceful degradation is often used as an alternative to progressive enhancement, a design principle that states that a system should be designed to take advantage of advanced features and technologies if they are available.\n\nVisit the following resources to learn more:\n\n- [@article@What is Graceful Degradation & Why Does it Matter?](https://blog.hubspot.com/website/graceful-degradation)\n- [@article@Four Considerations When Designing Systems For Graceful Degradation](https://newrelic.com/blog/best-practices/design-software-for-graceful-degradation)\n- [@video@Graceful Degradation - Georgia Tech](https://www.youtube.com/watch?v=Tk7e0LMsAlI)\n",
    "graphql@zp3bq38tMnutT2N0tktOW": "# GraphQL\n\nGraphQL is a query language for APIs and a runtime for executing those queries, developed by Facebook. Unlike REST, where fixed endpoints return predefined data, GraphQL allows clients to request exactly the data they need, making API interactions more flexible and efficient. It uses a single endpoint and relies on a schema that defines the types and structure of the available data. This approach reduces over-fetching and under-fetching of data, making it ideal for complex applications with diverse data needs across multiple platforms (e.g., web, mobile).\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated GraphQL Roadmap](https://roadmap.sh/graphql)\n- [@official@GraphQL](https://graphql.org/)\n- [@video@Tutorial - GraphQL Explained in 100 Seconds](https://www.youtube.com/watch?v=eIQh02xuVw4)\n- [@feed@Explore top posts about GraphQL](https://app.daily.dev/tags/graphql?ref=roadmapsh)\n",
    "grpc@J-TOE2lT4At1mSdNoxPS1": "# gRPC\n\ngRPC is a high-performance, open source universal RPC framework, RPC stands for Remote Procedure Call, there's an ongoing debate on what the g stands for. RPC is a protocol that allows a program to execute a procedure of another program located on another computer. The great advantage is that the developer doesn’t need to code the details of the remote interaction. The remote procedure is called like any other function. But the client and the server can be coded in different languages.\n\nVisit the following resources to learn more:\n\n- [@official@gRPC Website](https://grpc.io/)\n- [@article@What Is GRPC?](https://www.wallarm.com/what/the-concept-of-grpc)\n- [@video@What Is GRPC?](https://www.youtube.com/watch?v=hVrwuMnCtok)\n- [@feed@Explore top posts about gRPC](https://app.daily.dev/tags/grpc?ref=roadmapsh)\n",
    "hateoas@dLY0KafPstajCcSbslC4M": "# Hateoas\n\nHATEOAS (Hypermedia As The Engine Of Application State) is a constraint of RESTful architecture that allows clients to navigate an API dynamically through hypermedia links provided in responses. Instead of hard-coding URLs or endpoints, the client discovers available actions through these links, much like a web browser following links on a webpage. This enables greater flexibility and decouples clients from server-side changes, making the system more adaptable and scalable without breaking existing clients. It's a key element of REST's principle of statelessness and self-descriptive messages.\n\nLearn more from the following resources:\n\n- [@article@What is HATEOAS and why is it important for my REST API?](https://restcookbook.com/Basics/hateoas/)\n- [@video@What happened to HATEOAS](https://www.youtube.com/watch?v=HNTSrytKCoQ)\n",
    "how-does-the-internet-work@yCnn-NfSxIybUQ2iTuUGq": "# Internet\n\nThe internet is a global network of interconnected computers that communicate using standardized protocols, primarily TCP/IP. When you request a webpage, your device sends a data packet through your internet service provider (ISP) to a DNS server, which translates the website's domain name into an IP address. The packet is then routed across various networks (using routers and switches) to the destination server, which processes the request and sends back the response. This back-and-forth exchange enables the transfer of data like web pages, emails, and files, making the internet a dynamic, decentralized system for global communication.\n\nVisit the following resources to learn more:\n\n- [@article@How does the Internet Work?](https://cs.fyi/guide/how-does-internet-work)\n- [@article@The Internet Explained](https://www.vox.com/2014/6/16/18076282/the-internet)\n- [@article@How Does the Internet Work?](http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm)\n- [@roadmap.sh@Introduction to Internet](/guides/what-is-internet)\n- [@video@How does the Internet work?](https://www.youtube.com/watch?v=x3c1ih2NJEg)\n- [@video@How does the internet work? (Full Course)](https://www.youtube.com/watch?v=zN8YNNHcaZc)\n",
    "https@x-WBJjBd8u93ym5gtxGsR": "# HTTPS\n\nHTTPS (Hypertext Transfer Protocol Secure) is an extension of HTTP designed to secure data transmission between a client (e.g., browser) and a server. It uses encryption through SSL/TLS protocols to ensure data confidentiality, integrity, and authenticity. This prevents sensitive information, like login credentials or payment details, from being intercepted or tampered with by attackers. HTTPS is essential for securing web applications and has become a standard for most websites, especially those handling user data, as it helps protect against man-in-the-middle attacks and eavesdropping.\n\nVisit the following resources to learn more:\n\n- [@article@What is HTTPS?](https://www.cloudflare.com/en-gb/learning/ssl/what-is-https/)\n- [@article@Why HTTPS Matters](https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https)\n- [@article@How HTTPS works (comic)](https://howhttps.works/)\n- [@article@HTTPS explained with carrier pigeons](https://baida.dev/articles/https-explained-with-carrier-pigeons)\n- [@video@HTTP vs HTTPS](https://www.youtube.com/watch?v=nOmT_5hqgPk)\n",
    "influx-db@XbM4TDImSH-56NsITjyHK": "# InfluxDB\n\nInfluxDB is a high-performance, open-source time-series database designed for handling large volumes of timestamped data, such as metrics, events, and real-time analytics. It is optimized for use cases like monitoring, IoT, and application performance management, where data arrives in continuous streams. InfluxDB supports SQL-like queries through its query language (Flux), and it can handle high write and query loads efficiently. Key features include support for retention policies, downsampling, and automatic data compaction, making it ideal for environments that require fast and scalable time-series data storage and retrieval.\n\nVisit the following resources to learn more:\n\n- [@official@InfluxDB Website](https://www.influxdata.com/)\n- [@article@Time series database](https://www.influxdata.com/time-series-database/)\n- [@video@The Basics of Time Series Data](https://www.youtube.com/watch?v=wBWTj-1XiRU)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "instrumentation@4X-sbqpP0NDhM99bKdqIa": "# Instrumentation, Monitoring, and Telemetry\n\nInstrumentation, monitoring, and telemetry are critical components for ensuring system reliability and performance. *Instrumentation* refers to embedding code or tools within applications to capture key metrics, logs, and traces. *Monitoring* involves observing these metrics in real time to detect anomalies, failures, or performance issues, often using dashboards and alerting systems. *Telemetry* is the automated collection and transmission of this data from distributed systems, enabling visibility into system behavior. Together, these practices provide insights into the health, usage, and performance of systems, aiding in proactive issue resolution and optimizing overall system efficiency.\n\nVisit the following resources to learn more:\n\n- [@article@What is Instrumentation?](https://en.wikipedia.org/wiki/Instrumentation_/(computer_programming/))\n- [@article@What is Monitoring?](https://www.yottaa.com/performance-monitoring-backend-vs-front-end-solutions/)\n- [@article@What is Telemetry?](https://www.sumologic.com/insight/what-is-telemetry/)\n- [@video@Observability vs. APM vs. Monitoring](https://www.youtube.com/watch?v=CAQ_a2-9UOI)\n- [@feed@Explore top posts about Monitoring](https://app.daily.dev/tags/monitoring?ref=roadmapsh)\n",
    "integration-testing@381Kw1IMRv7CJp-Uf--qd": "# Integration Testing\n\nIntegration testing focuses on verifying the interactions between different components or modules of a software system to ensure they work together as expected. It comes after unit testing and tests how modules communicate with each other, often using APIs, databases, or third-party services. The goal is to catch issues related to the integration points, such as data mismatches, protocol errors, or misconfigurations. Integration tests help ensure that independently developed components can function seamlessly as part of a larger system, making them crucial for identifying bugs that wouldn't surface in isolated unit tests.\n\nVisit the following resources to learn more:\n\n- [@article@Integration Testing](https://www.guru99.com/integration-testing.html)\n- [@article@How to Integrate and Test Your Tech Stack](https://thenewstack.io/how-to-integrate-and-test-your-tech-stack/)\n- [@video@What is Integration Testing?](https://www.youtube.com/watch?v=kRD6PA6uxiY)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)\n",
    "internet@SiYUdtYMDImRPmV2_XPkH": "# Internet\n\nThe internet is a global network of interconnected computers that communicate using standardized protocols, primarily TCP/IP. When you request a webpage, your device sends a data packet through your internet service provider (ISP) to a DNS server, which translates the website's domain name into an IP address. The packet is then routed across various networks (using routers and switches) to the destination server, which processes the request and sends back the response. This back-and-forth exchange enables the transfer of data like web pages, emails, and files, making the internet a dynamic, decentralized system for global communication.\n\nVisit the following resources to learn more:\n\n- [@article@How does the Internet Work?](https://cs.fyi/guide/how-does-internet-work)\n- [@article@The Internet Explained](https://www.vox.com/2014/6/16/18076282/the-internet)\n- [@article@How Does the Internet Work?](http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm)\n- [@roadmap.sh@Introduction to Internet](/guides/what-is-internet)\n- [@video@How does the Internet work?](https://www.youtube.com/watch?v=x3c1ih2NJEg)\n- [@video@How does the internet work? (Full Course)](https://www.youtube.com/watch?v=zN8YNNHcaZc)\n",
    "java@ANeSwxJDJyQ-49pO2-CCI": "# Java\n\nJava is a high-level, object-oriented programming language known for its portability, robustness, and scalability. Developed by Sun Microsystems (now Oracle), Java follows the \"write once, run anywhere\" principle, allowing code to run on any device with a Java Virtual Machine (JVM). It's widely used for building large-scale enterprise applications, Android mobile apps, and web services. Java features automatic memory management (garbage collection), a vast standard library, and strong security features, making it a popular choice for backend systems, distributed applications, and cloud-based solutions.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Java Roadmap](https://roadmap.sh/java)\n- [@official@Java Website](https://www.java.com/)\n- [@video@Complete Java course](https://www.youtube.com/watch?v=xk4_1vDrzzo)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "javascript@8-lO-v6jCYYoklEJXULxN": "# JavaScript\n\nJavaScript is a versatile, high-level programming language primarily used for adding interactivity and dynamic features to websites. It runs in the browser, allowing for client-side scripting that can manipulate HTML and CSS, respond to user events, and interact with web APIs. JavaScript is also used on the server side with environments like Node.js, enabling full-stack development. It supports event-driven, functional, and imperative programming styles, and has a rich ecosystem of libraries and frameworks (like React, Angular, and Vue) that enhance its capabilities and streamline development.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated JavaScript Roadmap](https://roadmap.sh/javascript)\n- [@article@The Modern JavaScript Tutorial](https://javascript.info/)\n- [@article@Build 30 Javascript Projects in 30 days](https://javascript30.com/)\n- [@video@JavaScript Crash Course for Beginners](https://youtu.be/hdI2bqOjy3c?t=2)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "json-apis@sNceS4MpSIjRkWhNDmrFg": "# JSON APIs\n\nJSON or JavaScript Object Notation is an encoding scheme that is designed to eliminate the need for an ad-hoc code for each application to communicate with servers that communicate in a defined way. JSON API module exposes an implementation for data stores and data structures, such as entity types, bundles, and fields.\n\nVisit the following resources to learn more:\n\n- [@official@JSON API](https://jsonapi.org/)\n- [@article@What is JSON API?](https://medium.com/@niranjan.cs/what-is-json-api-3b824fba2788)\n- [@video@JSON API: Explained in 4 minutes](https://www.youtube.com/watch?v=N-4prIh7t38)\n",
    "jwt@UxS_mzVUjLigEwKrXnEeB": "# JWT\n\nJWT (JSON Web Token) is an open standard for securely transmitting information between parties as a JSON object. It consists of three parts: a header (which specifies the token type and algorithm used for signing), a payload (which contains the claims or the data being transmitted), and a signature (which is used to verify the token’s integrity and authenticity). JWTs are commonly used for authentication and authorization purposes, allowing users to securely transmit and validate their identity and permissions across web applications and APIs. They are compact, self-contained, and can be easily transmitted in HTTP headers, making them popular for modern web and mobile applications.\n\nVisit the following resources to learn more:\n\n- [@official@jwt.io Website](https://jwt.io/)\n- [@article@What is JWT?](https://www.akana.com/blog/what-is-jwt)\n- [@video@What Is JWT and Why Should You Use JWT](https://www.youtube.com/watch?v=7Q17ubqLfaM)\n- [@feed@Explore top posts about JWT](https://app.daily.dev/tags/jwt?ref=roadmapsh)\n",
    "kafka@VoYSis1F1ZfTxMlQlXQKB": "# Kafka\n\nApache Kafka is a distributed event streaming platform designed for high-throughput, fault-tolerant data processing. It acts as a message broker, allowing systems to publish and subscribe to streams of records, similar to a distributed commit log. Kafka is highly scalable and can handle large volumes of data with low latency, making it ideal for real-time analytics, log aggregation, and data integration. It features topics for organizing data streams, partitions for parallel processing, and replication for fault tolerance, enabling reliable and efficient handling of large-scale data flows across distributed systems.\n\nVisit the following resources to learn more:\n\n- [@official@Apache Kafka](https://kafka.apache.org/quickstart)\n- [@video@Apache Kafka Fundamentals](https://www.youtube.com/watch?v=B5j3uNBH8X4)\n- [@video@Kafka in 100 Seconds](https://www.youtube.com/watch?v=uvb00oaa3k8)\n- [@feed@Explore top posts about Kafka](https://app.daily.dev/tags/kafka?ref=roadmapsh)\n- [@offical@Apache Kafka Streams](https://docs.confluent.io/platform/current/streams/concepts.html)\n- [@offical@Kafka Streams Confluent](https://kafka.apache.org/documentation/streams/)\n",
    "learn-about-apis@EwvLPSI6AlZ4TnNIJTZA4": "# APIs\n\nAn API (Application Programming Interface) is a set of defined rules and protocols that allow different software applications to communicate and interact with each other. It provides a standardized way for developers to access and manipulate the functionalities or data of a service, application, or platform without needing to understand its internal workings. APIs can be public or private and are commonly used to integrate disparate systems, facilitate third-party development, and enable interoperability between applications. They typically include endpoints, request methods (like GET, POST, PUT), and data formats (like JSON or XML) to interact with.\n\nVisit the following resources to learn more:\n\n- [@article@What is an API?](https://aws.amazon.com/what-is/api/)\n- [@video@What is an API (in 5 minutes)](https://www.youtube.com/watch?v=ByGJQzlzxQg)\n- [@feed@daily.dev API Feed](https://app.daily.dev/tags/rest-api)\n",
    "loadshifting@HoQdX7a4SnkFRU4RPQ-D5": "# Load Shifting\n\nLoad shifting is a strategy used to manage and distribute computing or system workloads more efficiently by moving or redistributing the load from peak times to off-peak periods. This approach helps in balancing the demand on resources, optimizing performance, and reducing costs. In cloud computing and data centers, load shifting can involve rescheduling jobs, leveraging different regions or availability zones, or adjusting resource allocation based on real-time demand. By smoothing out peak loads, organizations can enhance system reliability, minimize latency, and better utilize their infrastructure.\n\nLearn more from the following resources:\n\n- [@video@Load Shifting 101](https://www.youtube.com/watch?v=DOyMJEdk5aE)\n- [@wiki@Load Shifting](https://en.wikipedia.org/wiki/Load_shifting)\n",
    "long-polling@osvajAJlwGI3XnX0fE-kA": "# Long Polling\n\nLong polling is a technique where the client polls the server for new data. However, if the server does not have any data available for the client, instead of sending an empty response, the server holds the request and waits for some specified period of time for new data to be available. If new data becomes available during that time, the server immediately sends a response to the client, completing the open request. If no new data becomes available and the timeout period specified by the client expires, the server sends a response indicating that fact. The client will then immediately re-request data from the server, creating a new request-response cycle.\n\nLearn more from the following resources:\n\n- [@article@Long Polling](https://javascript.info/long-polling)\n- [@video@What is Long Polling?](https://www.youtube.com/watch?v=LD0_-uIsnOE)\n",
    "lxc@31ZlpfIPr9-5vYZqvjUeL": "# LXC\n\nLXC is an abbreviation used for Linux Containers which is an operating system that is used for running multiple Linux systems virtually on a controlled host via a single Linux kernel. LXC is a userspace interface for the Linux kernel containment features. Through a powerful API and simple tools, it lets Linux users easily create and manage system or application containers.\n\nVisit the following resources to learn more:\n\n- [@official@LXC Documentation](https://linuxcontainers.org/lxc/documentation/)\n- [@article@What is LXC?](https://linuxcontainers.org/lxc/introduction/)\n- [@video@Getting Started with LXD Containerization](https://www.youtube.com/watch?v=aIwgPKkVj8s)\n- [@video@Getting Started with LXC containers](https://youtu.be/CWmkSj_B-wo)\n",
    "mariadb@tD3i-8gBpMKCHB-ITyDiU": "# MariaDB\n\nMariaDB server is a community developed fork of MySQL server. Started by core members of the original MySQL team, MariaDB actively works with outside developers to deliver the most feature rich, stable, and sanely licensed open SQL server in the industry. MariaDB was created with the intention of being a more versatile, drop-in replacement version of MySQL\n\nVisit the following resources to learn more:\n\n- [@official@MariaDB](https://mariadb.org/)\n- [@article@MariaDB vs MySQL](https://www.guru99.com/mariadb-vs-mysql.html)\n- [@video@MariaDB Tutorial For Beginners in One Hour](https://www.youtube.com/watch?v=_AMj02sANpI)\n- [@feed@Explore top posts about Infrastructure](https://app.daily.dev/tags/infrastructure?ref=roadmapsh)\n",
    "md5@jWwA6yX4Zjx-r_KpDaD3c": "# MD5\n\nMD5 (Message-Digest Algorithm 5) is a widely used cryptographic hash function that produces a 128-bit hash value, typically represented as a 32-character hexadecimal number. It was designed to provide a unique identifier for data by generating a fixed-size output (the hash) for any input. While MD5 was once popular for verifying data integrity and storing passwords, it is now considered cryptographically broken and unsuitable for security-sensitive applications due to vulnerabilities that allow for collision attacks (where two different inputs produce the same hash). As a result, MD5 has largely been replaced by more secure hash functions like SHA-256.\n\nVisit the following resources to learn more:\n\n- [@article@Wikipedia - MD5](https://en.wikipedia.org/wiki/MD5)\n- [@article@What is MD5?](https://www.techtarget.com/searchsecurity/definition/MD5)\n- [@article@Why is MD5 not safe?](https://infosecscout.com/why-md5-is-not-safe/)\n- [@video@How the MD5 hash function works](https://www.youtube.com/watch?v=5MiMK45gkTY)\n",
    "memcached@xPvVwGQw28uMeLYIWn8yn": "# Memcached\n\nMemcached (pronounced variously mem-cash-dee or mem-cashed) is a general-purpose distributed memory-caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached is free and open-source software, licensed under the Revised BSD license. Memcached runs on Unix-like operating systems (Linux and macOS) and on Microsoft Windows. It depends on the `libevent` library. Memcached's APIs provide a very large hash table distributed across multiple machines. When the table is full, subsequent inserts cause older data to be purged in the least recently used (LRU) order. Applications using Memcached typically layer requests and additions into RAM before falling back on a slower backing store, such as a database.\n\nVisit the following resources to learn more:\n\n- [@opensource@memcached/memcached](https://github.com/memcached/memcached#readme)\n- [@article@Memcached Tutorial](https://www.tutorialspoint.com/memcached/index.htm)\n- [@video@Redis vs Memcached](https://www.youtube.com/watch?v=Gyy1SiE8avE)\n",
    "message-brokers@nJ5FpFgGCRaALcWmAKBKT": "# Message Brokers\n\nMessage brokers are intermediaries that facilitate communication between distributed systems or components by receiving, routing, and delivering messages. They enable asynchronous message passing, decoupling producers (senders) from consumers (receivers), which improves scalability and flexibility. Common functions of message brokers include message queuing, load balancing, and ensuring reliable message delivery through features like persistence and acknowledgment. Popular message brokers include Apache Kafka, RabbitMQ, and ActiveMQ, each offering different features and capabilities suited to various use cases like real-time data processing, event streaming, or task management.\n\nVisit the following resources to learn more:\n\n- [@article@What are Message Brokers?](https://www.ibm.com/topics/message-brokers)\n- [@video@Introduction to Message Brokers](https://www.youtube.com/watch?v=57Qr9tk6Uxc)\n- [@video@Kafka vs RabbitMQ](https://www.youtube.com/watch?v=_5mu7lZz5X4)\n",
    "microservices@K55h3aqOGe6-hgVhiFisT": "# Microservices\n\nMicroservices is an architectural style that structures an application as a collection of loosely coupled, independently deployable services. Each microservice focuses on a specific business capability and communicates with others via lightweight protocols, typically HTTP or messaging queues. This approach allows for greater scalability, flexibility, and resilience, as services can be developed, deployed, and scaled independently. Microservices also facilitate the use of diverse technologies and languages for different components, and they support continuous delivery and deployment. However, managing microservices involves complexity in terms of inter-service communication, data consistency, and deployment orchestration.\n\nVisit the following resources to learn more:\n\n- [@article@Pattern: Microservice Architecture](https://microservices.io/patterns/microservices.html)\n- [@article@What is Microservices?](https://smartbear.com/solutions/microservices/)\n- [@article@Microservices 101](https://thenewstack.io/microservices-101/)\n- [@article@Articles about Microservices](https://thenewstack.io/category/microservices/)\n- [@video@Microservices explained in 5 minutes](https://www.youtube.com/watch?v=lL_j7ilk7rc)\n- [@feed@Explore top posts about Microservices](https://app.daily.dev/tags/microservices?ref=roadmapsh)\n",
    "migration-strategies@f7iWBkC0X7yyCoP_YubVd": "# Migration Strategies\n\nMigration strategies involve planning and executing the transition of applications, data, or infrastructure from one environment to another, such as from on-premises systems to the cloud or between different cloud providers. Key strategies include:\n\n1. **Rehost (Lift and Shift)**: Moving applications as-is to the new environment with minimal changes, which is often the quickest but may not fully leverage new platform benefits.\n2. **Replatform**: Making some optimizations or changes to adapt applications for the new environment, enhancing performance or scalability while retaining most of the existing architecture.\n3. **Refactor**: Redesigning and modifying applications to optimize for the new environment, often taking advantage of new features and improving functionality or performance.\n4. **Repurchase**: Replacing existing applications with new, often cloud-based, solutions that better meet current needs.\n5. **Retain**: Keeping certain applications or systems in their current environment due to specific constraints or requirements.\n6. **Retire**: Decommissioning applications that are no longer needed or are redundant.\n\nVisit the following resources to learn more:\n\n- [@article@Databases as a Challenge for Continuous Delivery](https://phauer.com/2015/databases-challenge-continuous-delivery/)\n- [@video@AWS Cloud Migration Strategies](https://www.youtube.com/watch?v=9ziB82V7qVM)\n",
    "migrations@ZsZvStCvKwFhlBYe9HGhl": "# Migrations\n\nDatabase migrations are a version-controlled way to manage and apply incremental changes to a database schema over time, allowing developers to modify the database structure (e.g., adding tables, altering columns) without affecting existing data. They ensure that the database evolves alongside application code in a consistent, repeatable manner across environments (e.g., development, testing, production), while maintaining compatibility with older versions of the schema. Migrations are typically written in SQL or a database-agnostic language, and are executed using migration tools like Liquibase, Flyway, or built-in ORM features such as Django or Rails migrations.\n\nLearn more from the following resources:\n\n- [@article@What are Database Migrations?](https://www.prisma.io/dataguide/types/relational/what-are-database-migrations)\n- [@video@Database Migrations for Beginners](https://www.youtube.com/watch?v=dJDBP7pPA-o)\n",
    "mongodb@28U6q_X-NTYf7OSKHjoWH": "# MongoDB\n\nMongoDB is a NoSQL, open-source database designed for storing and managing large volumes of unstructured or semi-structured data. It uses a document-oriented data model where data is stored in BSON (Binary JSON) format, which allows for flexible and hierarchical data representation. Unlike traditional relational databases, MongoDB doesn't require a fixed schema, making it suitable for applications with evolving data requirements or varying data structures. It supports horizontal scaling through sharding and offers high availability with replica sets. MongoDB is commonly used for applications requiring rapid development, real-time analytics, and large-scale data handling, such as content management systems, IoT applications, and big data platforms.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated MongoDB Roadmap](https://roadmap.sh/mongodb)\n- [@official@MongoDB Website](https://www.mongodb.com/)\n- [@official@Learning Path for MongoDB Developers](https://learn.mongodb.com/catalog)\n- [@article@MongoDB Online Sandbox](https://mongoplayground.net/)\n- [@feed@daily.dev MongoDB Feed](https://app.daily.dev/tags/mongodb)\n",
    "monitoring@QvMEEsXh0-rzn5hDGcmEv": "# Monitoring\n\nMonitoring involves continuously observing and tracking the performance, availability, and health of systems, applications, and infrastructure. It typically includes collecting and analyzing metrics, logs, and events to ensure systems are operating within desired parameters. Monitoring helps detect anomalies, identify potential issues before they escalate, and provides insights into system behavior. It often involves tools and platforms that offer dashboards, alerts, and reporting features to facilitate real-time visibility and proactive management. Effective monitoring is crucial for maintaining system reliability, performance, and for supporting incident response and troubleshooting.\n\nA few popular tools are Grafana, Sentry, Mixpanel, NewRelic.\n\n- [@article@Top Monitoring Tools](https://thectoclub.com/tools/best-application-monitoring-software/)\n- [@video@Grafana Explained in 5 Minutes](https://www.youtube.com/watch?v=lILY8eSspEo)\n- [@feed@daily.dev Monitoring Feed](https://app.daily.dev/tags/monitoring)\n",
    "monolithic-apps@Ke522R-4k6TDeiDRyZbbU": "# Monolithic Apps\n\nMonolithic applications are designed as a single, cohesive unit where all components—such as user interface, business logic, and data access—are tightly integrated and run as a single service. This architecture simplifies development and deployment since the entire application is managed and deployed together. However, it can lead to challenges with scalability, maintainability, and agility as the application grows. Changes to one part of the application may require redeploying the entire system, and scaling might necessitate duplicating the entire application rather than scaling individual components. Monolithic architectures can be suitable for smaller applications or projects with less complex requirements, but many organizations transition to microservices or modular architectures to address these limitations as they scale.\n\nVisit the following resources to learn more:\n\n- [@article@Pattern: Monolithic Architecture](https://microservices.io/patterns/monolithic.html)\n- [@article@Monolithic Architecture - Advantages & Disadvantages](https://datamify.medium.com/monolithic-architecture-advantages-and-disadvantages-e71a603eec89)\n- [@video@Monolithic vs Microservice Architecture](https://www.youtube.com/watch?v=NdeTGlZ__Do)\n",
    "more-about-databases@LJt27onEOeIBomiEMTyKd": "# Databases\n\nA database is a collection of useful data of one or more related organizations structured in a way to make data an asset to the organization. A database management system is a software designed to assist in maintaining and extracting large collections of data in a timely fashion.\n\nVisit the following resources to learn more:\n\n- [@article@Oracle: What is a Database?](https://www.oracle.com/database/what-is-database/)\n- [@article@Prisma.io: What are Databases?](https://www.prisma.io/dataguide/intro/what-are-databases)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "ms-iis@0NJDgfe6eMa7qPUOI6Eya": "# MS IIS\n\nMicrosoft Internet Information Services (IIS) is a flexible, secure, and high-performance web server developed by Microsoft for hosting and managing web applications and services on Windows Server. IIS supports a variety of web technologies, including ASP.NET, PHP, and static content. It provides features such as request handling, authentication, SSL/TLS encryption, and URL rewriting. IIS also offers robust management tools, including a graphical user interface and command-line options, for configuring and monitoring web sites and applications. It is commonly used for deploying enterprise web applications and services in a Windows-based environment, offering integration with other Microsoft technologies and services.\n\nVisit the following resources to learn more:\n\n- [@official@Microsoft -IIS](https://www.iis.net/)\n- [@video@Learn Windows Web Server IIS](https://www.youtube.com/watch?v=1VdxPWwtISA)\n- [@video@What is IIS?](https://www.youtube.com/watch?v=hPWSqEXOjQY)\n- [@feed@Explore top posts about .NET](https://app.daily.dev/tags/.net?ref=roadmapsh)\n",
    "ms-sql@dEsTje8kfHwWjCI3zcgLC": "# MS SQL\n\nMicrosoft SQL Server (MS SQL) is a relational database management system developed by Microsoft for managing and storing structured data. It supports a wide range of data operations, including querying, transaction management, and data warehousing. SQL Server provides tools and features for database design, performance optimization, and security, including support for complex queries through T-SQL (Transact-SQL), data integration with SQL Server Integration Services (SSIS), and business intelligence with SQL Server Analysis Services (SSAS) and SQL Server Reporting Services (SSRS). It is commonly used in enterprise environments for applications requiring reliable data storage, transaction processing, and reporting.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated SQL Roadmap](https://roadmap.sh/sql)\n- [@official@MS SQL](https://www.microsoft.com/en-ca/sql-server/)\n- [@article@Tutorials for SQL Server](https://docs.microsoft.com/en-us/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver15)\n- [@video@SQL Server tutorial for beginners](https://www.youtube.com/watch?v=-EPMOaV7h_Q)\n",
    "mysql@VPxOdjJtKAqmM5V0LR5OC": "# MySQL\n\nMySQL is an open-source relational database management system (RDBMS) known for its speed, reliability, and ease of use. It uses SQL (Structured Query Language) for database interactions and supports a range of features for data management, including transactions, indexing, and stored procedures. MySQL is widely used for web applications, data warehousing, and various other applications due to its scalability and flexibility. It integrates well with many programming languages and platforms, and is often employed in conjunction with web servers and frameworks in popular software stacks like LAMP (Linux, Apache, MySQL, PHP/Python/Perl). MySQL is maintained by Oracle Corporation and has a large community and ecosystem supporting its development and use.\n\nVisit the following resources to learn more:\n\n- [@official@MySQL](https://www.mysql.com/)\n- [@article@MySQL for Developers](https://planetscale.com/courses/mysql-for-developers/introduction/course-introduction)\n- [@article@MySQL Tutorial](https://www.mysqltutorial.org/)\n- [@video@MySQL Complete Course](https://www.youtube.com/watch?v=5OdVJbNCSso)\n- [@feed@Explore top posts about MySQL](https://app.daily.dev/tags/mysql?ref=roadmapsh)\n",
    "n1-problem@bQnOAu863hsHdyNMNyJop": "# N plus one problem\n\nThe N+1 problem occurs in database querying when an application performs a query to retrieve a list of items and then issues additional queries to fetch related data for each item individually. This often results in inefficiencies and performance issues because the number of queries issued grows proportionally with the number of items retrieved. For example, if an application retrieves 10 items and then performs an additional query for each item to fetch related details, it ends up executing 11 queries (1 for the list and 10 for the details), leading to a total of 11 queries instead of 2. This can severely impact performance, especially with larger datasets. Solutions to the N+1 problem typically involve optimizing queries to use joins or batching techniques to retrieve related data in fewer, more efficient queries.\n\nVisit the following resources to learn more:\n\n- [@article@In Detail Explanation of N+1 Problem](https://medium.com/doctolib/understanding-and-fixing-n-1-query-30623109fe89)\n- [@article@What is the N+1 Problem](https://planetscale.com/blog/what-is-n-1-query-problem-and-how-to-solve-it)\n- [@article@Solving N+1 Problem: For Java Backend Developers](https://dev.to/jackynote/solving-the-notorious-n1-problem-optimizing-database-queries-for-java-backend-developers-2o0p)\n- [@video@SQLite and the N+1 (no) problem](https://www.youtube.com/watch?v=qPfAQY_RahA)\n",
    "neo4j@BTNJfWemFKEeNeTyENXui": "# NEO4J\n\nNeo4j is a highly popular open-source graph database designed to store, manage, and query data as interconnected nodes and relationships. Unlike traditional relational databases that use tables and rows, Neo4j uses a graph model where data is represented as nodes (entities) and edges (relationships), allowing for highly efficient querying of complex, interconnected data. It supports Cypher, a declarative query language specifically designed for graph querying, which simplifies operations like traversing relationships and pattern matching. Neo4j is well-suited for applications involving complex relationships, such as social networks, recommendation engines, and fraud detection, where understanding and leveraging connections between data points is crucial.\n\nVisit the following resources to learn more:\n\n- [@official@Neo4j Website](https://neo4j.com)\n- [@video@Neo4j in 100 Seconds](https://www.youtube.com/watch?v=T6L9EoBy8Zk)\n- [@video@Neo4j Course for Beginners](https://www.youtube.com/watch?v=_IgbB24scLI)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "nginx@z5AdThp9ByulmM9uekgm-": "# Nginx\n\nNginx is a high-performance, open-source web server and reverse proxy server known for its efficiency, scalability, and low resource consumption. Originally developed as a web server, Nginx is also commonly used as a load balancer, HTTP cache, and mail proxy. It excels at handling a large number of concurrent connections due to its asynchronous, event-driven architecture. Nginx's features include support for serving static content, handling dynamic content through proxying to application servers, and providing SSL/TLS termination. Its modular design allows for extensive customization and integration with various applications and services, making it a popular choice for modern web infrastructures.\n\nVisit the following resources to learn more:\n\n- [@official@Nginx Website](https://nginx.org/)\n- [@video@NGINX Explained in 100 Seconds](https://www.youtube.com/watch?v=JKxlsvZXG7c)\n- [@video@NGINX Tutorial for Beginners](https://www.youtube.com/watch?v=9t9Mp0BGnyI)\n- [@feed@Explore top posts about Nginx](https://app.daily.dev/tags/nginx?ref=roadmapsh)\n",
    "normalization@Ge2SnKBrQQrU-oGLz6TmT": "# Database Normalization\n\nDatabase normalization is the process of structuring a relational database in accordance with a series of so-called normal forms in order to reduce data redundancy and improve data integrity. It was first proposed by Edgar F. Codd as part of his relational model. Normalization entails organizing the columns (attributes) and tables (relations) of a database to ensure that their dependencies are properly enforced by database integrity constraints. It is accomplished by applying some formal rules either by a process of synthesis (creating a new database design) or decomposition (improving an existing database design).\n\nVisit the following resources to learn more:\n\n- [@article@What is Normalization in DBMS (SQL)? 1NF, 2NF, 3NF, BCNF Database with Example](https://www.guru99.com/database-normalization.html)\n- [@video@Complete guide to Database Normalization in SQL](https://www.youtube.com/watch?v=rBPQ5fg_kiY)\n- [@feed@Explore top posts about Database](https://app.daily.dev/tags/database?ref=roadmapsh)\n",
    "nosql-databases@F8frGuv1dunOdcVJ_IiGs": "# NoSQL databases\n\nNoSQL databases are a category of database management systems designed for handling unstructured, semi-structured, or rapidly changing data. Unlike traditional relational databases, which use fixed schemas and SQL for querying, NoSQL databases offer flexible data models and can be classified into several types:\n\n1. **Document Stores**: Store data in JSON, BSON, or XML formats, allowing for flexible and hierarchical data structures (e.g., MongoDB, CouchDB).\n2. **Key-Value Stores**: Store data as key-value pairs, suitable for high-speed read and write operations (e.g., Redis, Riak).\n3. **Column-Family Stores**: Store data in columns rather than rows, which is useful for handling large volumes of data and wide columnar tables (e.g., Apache Cassandra, HBase).\n4. **Graph Databases**: Optimize the storage and querying of data with complex relationships using graph structures (e.g., Neo4j, Amazon Neptune).\n\nNoSQL databases are often used for applications requiring high scalability, flexibility, and performance, such as real-time analytics, content management systems, and distributed data storage.\n\nVisit the following resources to learn more:\n\n- [@article@NoSQL Explained](https://www.mongodb.com/nosql-explained)\n- [@video@How do NoSQL Databases work](https://www.youtube.com/watch?v=0buKQHokLK8)\n- [@video@SQL vs NoSQL Explained](https://www.youtube.com/watch?v=ruz-vK8IesE)\n- [@feed@Explore top posts about NoSQL](https://app.daily.dev/tags/nosql?ref=roadmapsh)\n",
    "oauth@vp-muizdICcmU0gN8zmkS": "# OAuth\n\nOAuth is an open standard for authorization that allows third-party applications to access a user's resources without exposing their credentials. It works by issuing access tokens after users grant permission, which applications then use to interact with resource servers on behalf of the user. This process involves a resource owner (the user), a resource server (which holds the data), and an authorization server (which issues tokens). OAuth enables secure, token-based access management, commonly used for granting applications permissions to interact with services like social media accounts or cloud storage.\n\nVisit the following resources to learn more:\n\n- [@article@Okta - What the Heck is OAuth](https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth)\n- [@article@DigitalOcean - An Introduction to OAuth 2](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2)\n- [@video@OAuth 2 Explained In Simple Terms](https://www.youtube.com/watch?v=ZV5yTm4pT8g)\n- [@feed@Explore top posts about OAuth](https://app.daily.dev/tags/oauth?ref=roadmapsh)\n",
    "observability@Z01E67D6KjrShvQCHjGR7": "# Observability\n\nObservability refers to the ability to understand and monitor the internal state of a system based on its external outputs, such as metrics, logs, and traces. It encompasses collecting, analyzing, and visualizing data to gain insights into system performance, detect anomalies, and troubleshoot issues. Effective observability involves integrating these data sources to provide a comprehensive view of system behavior, enabling proactive management and rapid response to problems. It helps in understanding complex systems, improving reliability, and optimizing performance by making it easier to identify and address issues before they impact users.\n\nVisit the following resources to learn more:\n\n- [@article@DataDog Docs](https://docs.datadoghq.com/)\n- [@article@AWS CloudWatch Docs](https://aws.amazon.com/cloudwatch/getting-started/)\n- [@article@Sentry Docs](https://docs.sentry.io/)\n- [@article@Observability and Instrumentation: What They Are and Why They Matter](https://newrelic.com/blog/best-practices/observability-instrumentation)\n- [@video@What is observability?](https://www.youtube.com/watch?v=--17See0KHs)\n- [@feed@Explore top posts about Observability](https://app.daily.dev/tags/observability?ref=roadmapsh)\n",
    "open-api-specs@9cD5ag1L0GqHx4_zxc5JX": "# Open API Spec\n\nThe OpenAPI Specification (OAS), formerly known as Swagger, is a standard for defining and documenting RESTful APIs. It provides a structured format in YAML or JSON to describe API endpoints, request and response formats, authentication methods, and other metadata. By using OAS, developers can create a comprehensive and machine-readable API description that facilitates client generation, automated documentation, and testing. This specification promotes consistency and clarity in API design, enhances interoperability between different systems, and enables tools to generate client libraries, server stubs, and interactive API documentation.\n\nVisit the following resources to learn more:\n\n- [@official@OpenAPI Specification Website](https://swagger.io/specification/)\n- [@official@Open API Live Editor](https://swagger.io/tools/swagger-editor/)\n- [@video@OpenAPI 3.0: How to Design and Document APIs with the Latest OpenAPI Specification 3.0](https://www.youtube.com/watch?v=6kwmW_p_Tig)\n- [@video@ REST API and OpenAPI: It’s Not an Either/Or Question](https://www.youtube.com/watch?v=pRS9LRBgjYg)\n",
    "openid@z3EJBpgGm0_Uj3ymhypbX": "# OpenID\n\nOpenID is an open standard for decentralized authentication that allows users to log in to multiple websites and applications using a single set of credentials, managed by an identity provider (IdP). It enables users to authenticate their identity through an external service, simplifying the login process and reducing the need for multiple usernames and passwords. OpenID typically works in conjunction with OAuth 2.0 for authorization, allowing users to grant access to their data while maintaining security. This approach enhances user convenience and streamlines identity management across various platforms.\n\nVisit the following resources to learn more:\n\n- [@official@OpenID Website](https://openid.net/)\n- [@article@OpenID Connect Protocol](https://auth0.com/docs/authenticate/protocols/openid-connect-protocol)\n- [@video@An Illustrated Guide to OAuth and OpenID Connect](https://www.youtube.com/watch?v=t18YB3xDfXI)\n- [@video@OAuth 2.0 and OpenID Connect (in plain English)](https://www.youtube.com/watch?v=996OiexHze0)\n- [@feed@Explore top posts about Authentication](https://app.daily.dev/tags/authentication?ref=roadmapsh)\n",
    "oracle@h1SAjQltHtztSt8QmRgab": "# Oracle\n\nOracle Database is a highly robust, enterprise-grade relational database management system (RDBMS) developed by Oracle Corporation. Known for its scalability, reliability, and comprehensive features, Oracle Database supports complex data management tasks and mission-critical applications. It provides advanced functionalities like SQL querying, transaction management, high availability through clustering, and data warehousing. Oracle's database solutions include support for various data models, such as relational, spatial, and graph, and offer tools for security, performance optimization, and data integration. It is widely used in industries requiring large-scale, secure, and high-performance data processing.\n\nVisit the following resources to learn more:\n\n- [@official@Oracle Website](https://www.oracle.com/database/)\n- [@official@Oracle Docs](https://docs.oracle.com/en/database/index.html)\n- [@video@Oracle SQL Tutorial for Beginners](https://www.youtube.com/watch?v=ObbNGhcxXJA)\n- [@feed@Explore top posts about Oracle](https://app.daily.dev/tags/oracle?ref=roadmapsh)\n",
    "orms@Z7jp_Juj5PffSxV7UZcBb": "# ORMs\n\nObject-Relational Mapping (ORM) is a programming technique that allows developers to interact with a relational database using object-oriented programming concepts. ORM frameworks map database tables to classes and rows to objects, enabling developers to perform database operations through objects rather than writing raw SQL queries. This abstraction simplifies data manipulation and improves code maintainability by aligning database interactions with the application's object model. ORM tools handle the translation between objects and database schemas, manage relationships, and often provide features like lazy loading and caching. Popular ORM frameworks include Hibernate for Java, Entity Framework for .NET, and SQLAlchemy for Python.\n\nVisit the following resources to learn more:\n\n- [@article@What is an ORM, how does it work, and how should I use one?](https://stackoverflow.com/a/1279678)\n- [@article@What is an ORM](https://www.freecodecamp.org/news/what-is-an-orm-the-meaning-of-object-relational-mapping-database-tools/)\n- [@video@Why Use an ORM?](https://www.youtube.com/watch?v=vHt2LC1EM3Q)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "owasp-risks@AAgciyxuDvS2B_c6FRMvT": "# OWASP Security Risks\n\nOWASP or Open Web Application Security Project is an online community that produces freely-available articles, methodologies, documentation, tools, and technologies in the field of web application security.\n\nVisit the following resources to learn more:\n\n- [@official@OWASP Website](https://owasp.org/)\n- [@opensource@OWASP Application Security Verification Standard](https://github.com/OWASP/ASVS)\n- [@article@OWASP Top 10 Security Risks](https://cheatsheetseries.owasp.org/IndexTopTen.html)\n- [@article@OWASP Cheatsheets](https://cheatsheetseries.owasp.org/cheatsheets/AJAX_Security_Cheat_Sheet.html)\n",
    "php@l9Wrq_Ad9-Ju4NIB0m5Ha": "# PHP\n\nPHP (Hypertext Preprocessor) is a widely-used, open-source scripting language designed primarily for web development but also applicable for general-purpose programming. It is embedded within HTML to create dynamic web pages and interact with databases, often working with MySQL or other database systems. PHP is known for its simplicity, ease of integration with various web servers, and extensive support for web-related functionalities. Its wide adoption is driven by its role in powering major platforms and content management systems like WordPress, Joomla, and Drupal. PHP's features include server-side scripting, session management, and support for various web protocols and formats.\n\nVisit the following resources to learn more:\n\n- [@official@Visit Dedicated PHP Roadmap](https://roadmap.sh/php)\n- [@official@PHP](https://php.net/)\n- [@article@PHP - The Right Way](https://phptherightway.com/)\n- [@video@PHP for Beginners](https://www.youtube.com/watch?v=zZ6vybT1HQs)\n- [@feed@Explore top posts about PHP](https://app.daily.dev/tags/php?ref=roadmapsh)\n",
    "pick-a-language@2f0ZO6GJElfZ2Eis28Hzg": "# Learn a Language\n\nEven if you’re a beginner, the first thing you’ll learn is that web development is primarily divided into two aspects: Frontend Development and Backend Development, each with its unique tools and technologies. For Frontend Development, foundational technologies include HTML, CSS, and JavaScript. Similarly, Backend Development revolves around server-side programming languages like Python, Java, or Node.js, complemented by databases, frameworks, and web servers that enable website functionality.\n",
    "postgresql@FihTrMO56kj9jT8O_pO2T": "# PostgreSQL\n\nPostgreSQL is an advanced, open-source relational database management system (RDBMS) known for its robustness, extensibility, and standards compliance. It supports a wide range of data types and advanced features, including complex queries, foreign keys, and full-text search. PostgreSQL is highly extensible, allowing users to define custom data types, operators, and functions. It supports ACID (Atomicity, Consistency, Isolation, Durability) properties for reliable transaction processing and offers strong support for concurrency and data integrity. Its capabilities make it suitable for various applications, from simple web apps to large-scale data warehousing and analytics solutions.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated PostgreSQL DBA Roadmap](https://roadmap.sh/postgresql-dba)\n- [@official@Official Website](https://www.postgresql.org/)\n- [@article@Learn PostgreSQL - Full Tutorial for Beginners](https://www.postgresqltutorial.com/)\n- [@video@PostgreSQL in 100 Seconds](https://www.youtube.com/watch?v=n2Fluyr3lbc)\n- [@video@Postgres tutorial for Beginners](https://www.youtube.com/watch?v=SpfIwlAYaKk)\n- [@feed@Explore top posts about PostgreSQL](https://app.daily.dev/tags/postgresql?ref=roadmapsh)\n",
    "profiling-perfor@SYXJhanu0lFmGj2m2XXhS": "# Profiling Performance\n\nProfiling performance involves analyzing a system or application's behavior to identify bottlenecks, inefficiencies, and areas for optimization. This process typically involves collecting detailed information about resource usage, such as CPU and memory consumption, I/O operations, and execution time of functions or methods. Profiling tools can provide insights into how different parts of the code contribute to overall performance, highlighting slow or resource-intensive operations. By understanding these performance characteristics, developers can make targeted improvements, optimize code paths, and enhance system responsiveness and scalability. Profiling is essential for diagnosing performance issues and ensuring that applications meet desired performance standards.\n\nLearn more from the following resources:\n\n- [@article@How to Profile SQL Queries for Better Performance](https://servebolt.com/articles/profiling-sql-queries/)\n- [@video@Performance Profiling](https://www.youtube.com/watch?v=MaauQTeGg2k)\n",
    "python@J_sVHsD72Yzyqb9KCIvAY": "# Python\n\nPython is a high-level, interpreted programming language known for its readability, simplicity, and versatility. Its design emphasizes code readability and a clear, straightforward syntax, making it accessible for both beginners and experienced developers. Python supports multiple programming paradigms, including procedural, object-oriented, and functional programming. It has a rich ecosystem of libraries and frameworks, such as Django and Flask for web development, Pandas and NumPy for data analysis, and TensorFlow and PyTorch for machine learning. Python is widely used in web development, data science, automation, and scripting, and it benefits from a strong community and extensive documentation.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Python Roadmap](https://roadmap.sh/python)\n- [@official@Python Website](https://www.python.org/)\n- [@article@Automate the Boring Stuff](https://automatetheboringstuff.com/)\n- [@course@Python Full Course for free](https://www.youtube.com/watch?v=ix9cRaBkVe0)\n- [@article@An Introduction to Python for Non-Programmers](https://thenewstack.io/an-introduction-to-python-for-non-programmers/)\n- [@feed@Explore top posts about Python](https://app.daily.dev/tags/python?ref=roadmapsh)\n",
    "rabbitmq@GPFRMcY1DEtRgnaZwJ3vW": "# RabbitMQ\n\nRabbitMQ is an open-source message broker that facilitates the exchange of messages between distributed systems using the Advanced Message Queuing Protocol (AMQP). It enables asynchronous communication by queuing and routing messages between producers and consumers, which helps decouple application components and improve scalability and reliability. RabbitMQ supports features such as message durability, acknowledgments, and flexible routing through exchanges and queues. It is highly configurable, allowing for various messaging patterns, including publish/subscribe, request/reply, and point-to-point communication. RabbitMQ is widely used in enterprise environments for handling high-throughput messaging and integrating heterogeneous systems.\n\nVisit the following resources to learn more:\n\n- [@official@RabbitMQ Tutorials](https://www.rabbitmq.com/getstarted.html)\n- [@video@RabbitMQ Tutorial - Message Queues and Distributed Systems](https://www.youtube.com/watch?v=nFxjaVmFj5E)\n- [@video@RabbitMQ in 100 Seconds](https://m.youtube.com/watch?v=NQ3fZtyXji0)\n- [@feed@Explore top posts about RabbitMQ](https://app.daily.dev/tags/rabbitmq?ref=roadmapsh)\n",
    "real-time-data@5XGvep2qoti31bsyqNzrU": "# Real Time Data\n\nReal-time data refers to information that is processed and made available immediately or with minimal delay, allowing users or systems to react promptly to current conditions. This type of data is essential in applications requiring immediate updates and responses, such as financial trading platforms, online gaming, real-time analytics, and monitoring systems. Real-time data processing involves capturing, analyzing, and delivering information as it is generated, often using technologies like stream processing frameworks (e.g., Apache Kafka, Apache Flink) and low-latency databases. Effective real-time data systems can handle high-speed data flows, ensuring timely and accurate decision-making.\n\nLearn more from the following resources:\n\n- [@article@Real-time Data - Wiki](https://en.wikipedia.org/wiki/Real-time_data)\n- [@article@What is Real-time Data?](https://www.qlik.com/us/streaming-data/real-time-data)\n",
    "redis@g8GjkJAhvnSxXTZks0V1g": "# Redis\n\nRedis is an open-source, in-memory data structure store known for its speed and versatility. It supports various data types, including strings, lists, sets, hashes, and sorted sets, and provides functionalities such as caching, session management, real-time analytics, and message brokering. Redis operates as a key-value store, allowing for rapid read and write operations, and is often used to enhance performance and scalability in applications. It supports persistence options to save data to disk, replication for high availability, and clustering for horizontal scaling. Redis is widely used for scenarios requiring low-latency access to data and high-throughput performance.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Redis Roadmap](https://roadmap.sh/redis)\n- [@official@Redis](https://redis.io/)\n- [@official@Redis Documentation](https://redis.io/docs/latest/)\n- [@video@Redis in 100 Seconds](https://www.youtube.com/watch?v=G1rOthIU-uo)\n- [@course@Redis Crash Course](https://www.youtube.com/watch?v=XCsS_NVAa1g)\n- [@feed@Explore top posts about Redis](https://app.daily.dev/tags/redis?ref=roadmapsh)\n",
    "redis@M0iaSSdVPWaCUpyTG50Vf": "# Redis\n\nRedis is an open-source, in-memory data structure store known for its speed and versatility. It supports various data types, including strings, lists, sets, hashes, and sorted sets, and provides functionalities such as caching, session management, real-time analytics, and message brokering. Redis operates as a key-value store, allowing for rapid read and write operations, and is often used to enhance performance and scalability in applications. It supports persistence options to save data to disk, replication for high availability, and clustering for horizontal scaling. Redis is widely used for scenarios requiring low-latency access to data and high-throughput performance.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Redis Roadmap](https://roadmap.sh/redis)\n- [@official@Redis](https://redis.io/)\n- [@official@Redis Documentation](https://redis.io/docs/latest/)\n- [@video@Redis in 100 Seconds](https://www.youtube.com/watch?v=G1rOthIU-uo)\n- [@course@Redis Crash Course](https://www.youtube.com/watch?v=XCsS_NVAa1g)\n- [@feed@Explore top posts about Redis](https://app.daily.dev/tags/redis?ref=roadmapsh)\n",
    "relational-databases@r45b461NxLN6wBODJ5CNP": "# Relational Databases\n\nRelational databases are a type of database management system (DBMS) that organizes data into structured tables with rows and columns, using a schema to define data relationships and constraints. They employ Structured Query Language (SQL) for querying and managing data, supporting operations such as data retrieval, insertion, updating, and deletion. Relational databases enforce data integrity through keys (primary and foreign) and constraints (such as unique and not-null), and they are designed to handle complex queries, transactions, and data relationships efficiently. Examples of relational databases include MySQL, PostgreSQL, and Oracle Database. They are commonly used for applications requiring structured data storage, strong consistency, and complex querying capabilities.\n\nVisit the following resources to learn more:\n\n- [@article@Relational Databases](https://www.ibm.com/cloud/learn/relational-databases)\n- [@article@51 Years of Relational Databases](https://learnsql.com/blog/codd-article-databases/)\n- [@course@Databases and SQL](https://www.edx.org/course/databases-5-sql)\n- [@article@Intro To Relational Databases](https://www.udacity.com/course/intro-to-relational-databases--ud197)\n- [@video@What is Relational Database](https://youtu.be/OqjJjpjDRLc)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "repo-hosting-services@NvUcSDWBhzJZ31nzT4UlE": "# Repo Hosting Services\n\nRepo hosting services are platforms that provide storage, management, and collaboration tools for version-controlled code repositories. These services support version control systems like Git, Mercurial, or Subversion, allowing developers to manage and track changes to their codebases, collaborate with others, and automate workflows. Key features often include branching and merging, pull requests, issue tracking, code review, and integration with continuous integration/continuous deployment (CI/CD) pipelines. Popular repo hosting services include GitHub, GitLab, and Bitbucket, each offering various levels of free and paid features tailored to different team sizes and project requirements.\n\nVisit the following resources to learn more:\n\n- [@official@GitHub](https://github.com)\n- [@official@GitLab](https://about.gitlab.com/)\n- [@official@BitBucket](https://bitbucket.org/product/guides/getting-started/overview)\n",
    "rest@lfNFDZZNdrB0lbEaMtU71": "# REST\n\nA REST API (Representational State Transfer Application Programming Interface) is an architectural style for designing networked applications. It relies on standard HTTP methods (GET, POST, PUT, DELETE) to interact with resources, which are represented as URIs (Uniform Resource Identifiers). REST APIs are stateless, meaning each request from a client to a server must contain all the information needed to understand and process the request. They use standard HTTP status codes to indicate the outcome of requests and often communicate in formats like JSON or XML. REST APIs are widely used due to their simplicity, scalability, and ease of integration with web services and applications.\n\nVisit the following resources to learn more:\n\n- [@article@What is a REST API?](https://www.redhat.com/en/topics/api/what-is-a-rest-api)\n- [@article@Roy Fieldings dissertation chapter, Representational State Transfer (REST)](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)\n- [@article@Learn REST: A RESTful Tutorial](https://restapitutorial.com/)\n- [@video@What is a REST API?](https://www.youtube.com/watch?v=-mN3VyJuCjM)\n- [@feed@Explore top posts about REST API](https://app.daily.dev/tags/rest-api?ref=roadmapsh)\n",
    "rethinkdb@5T0ljwlHL0545ICCeehcQ": "# RethinkDB\n\nRethinkDB is an open-source, distributed NoSQL database designed for real-time applications. It focuses on providing real-time capabilities by allowing applications to automatically receive updates when data changes, using its changefeed feature. RethinkDB's data model is based on JSON documents, and it supports rich queries, including joins, aggregations, and filtering. It offers a flexible schema and supports horizontal scaling through sharding and replication for high availability. Although development on RethinkDB ceased in 2016, its approach to real-time data and powerful querying capabilities make it notable for applications needing immediate data updates and responsiveness.\n\nLearn more from the following resources:\n\n- [@official@RethinkDB Website](https://rethinkdb.com/)\n- [@course@RethinkDB Crash Course](https://www.youtube.com/watch?v=pW3PFtchHDc)\n",
    "ruby@SlH0Rl07yURDko2nDPfFy": "# Ruby\n\nRuby is a high-level, object-oriented programming language known for its simplicity, productivity, and elegant syntax. Designed to be intuitive and easy to read, Ruby emphasizes developer happiness and quick development cycles. It supports multiple programming paradigms, including procedural, functional, and object-oriented programming. Ruby is particularly famous for its web framework, Ruby on Rails, which facilitates rapid application development by providing conventions and tools for building web applications efficiently. The language's flexibility, combined with its rich ecosystem of libraries and a strong community, makes it popular for web development, scripting, and prototyping.\n\nVisit the following resources to learn more:\n\n- [@article@Ruby Website](https://www.ruby-lang.org/en/)\n- [@article@Learn Ruby in 20 minutes](https://www.ruby-lang.org/en/documentation/quickstart/)\n- [@article@Ruby, An Introduction to a Programmer’s Best Friend](https://thenewstack.io/ruby-a-programmers-best-friend/)\n- [@video@Ruby Comprehensive courses](https://www.youtube.com/playlist?list=PL_EzhIKp343lBMH4UuklrMRL_WkilGoXe)\n- [@feed@Explore top posts about Ruby](https://app.daily.dev/tags/ruby?ref=roadmapsh)\n",
    "rust@CWwh2abwqx4hAxpAGvhIx": "# Rust\n\nRust is a systems programming language known for its focus on safety, performance, and concurrency. It provides fine-grained control over system resources while ensuring memory safety without needing a garbage collector. Rust's ownership model enforces strict rules on how data is accessed and managed, preventing common issues like null pointer dereferences and data races. Its strong type system and modern features, such as pattern matching and concurrency support, make it suitable for a wide range of applications, from low-level systems programming to high-performance web servers and tools. Rust is gaining traction in both industry and open source for its reliability and efficiency.\n\nVisit the following resources to learn more:\n\n- [@roadmap.sh@Visit Dedicated Rust Roadmap](https://roadmap.sh/rust)\n- [@official@The Rust Programming Language - Book](https://doc.rust-lang.org/book/)\n- [@article@Rust vs. Go: Why They’re Better Together](https://thenewstack.io/rust-vs-go-why-theyre-better-together/)\n- [@article@Rust by the Numbers: The Rust Programming Language in 2021](https://thenewstack.io/rust-by-the-numbers-the-rust-programming-language-in-2021/)\n- [@video@Learn Rust Programming](https://www.youtube.com/watch?v=BpPEoZW5IiY)\n- [@feed@Explore top posts about Rust](https://app.daily.dev/tags/rust?ref=roadmapsh)\n",
    "saml@UCHtaePVxS-0kpqlYxbfC": "# Security Assertion Markup Language (SAML)\n\nSecurity Assertion Markup Language (SAML) is an XML-based framework used for single sign-on (SSO) and identity federation, enabling users to authenticate once and gain access to multiple applications or services. It allows for the exchange of authentication and authorization data between an identity provider (IdP) and a service provider (SP). SAML assertions are XML documents that contain user identity information and attributes, and are used to convey authentication credentials and permissions. By implementing SAML, organizations can streamline user management, enhance security through centralized authentication, and simplify the user experience by reducing the need for multiple logins across different systems.\n\nLearn more from the following resources:\n\n- [@video@How SAML Authentication Works](https://www.youtube.com/watch?v=VzRnb9u8T1A)\n- [@article@SAML Explained in Plain English](https://www.onelogin.com/learn/saml)\n",
    "scaling-databases@95d9itpUZ4s9roZN8kG9x": "# Scaling Databases\n\nScaling databases is the process of adapting them to handle more data and users efficiently. It's achieved by either upgrading existing hardware (vertical scaling) or adding more servers (horizontal scaling). Techniques like sharding and replication are key. This ensures databases continue to be a robust asset as they grow.\n\nLearn more from the following resources:\n\n- [@article@Strategies for Scaling Databases: A Comprehensive Guide](https://medium.com/@anil.goyal0057/strategies-for-scaling-databases-a-comprehensive-guide-b69cda7df1d3)\n- [@article@Horizontal vs. Vertical Scaling - How to Scale a Database](https://www.freecodecamp.org/news/horizontal-vs-vertical-scaling-in-database/)\n",
    "scrypt@kGTALrvCpxyVCXHRmkI7s": "# Scrypt\n\nscrypt is a key derivation function designed to be computationally intensive and memory-hard to resist brute-force attacks and hardware-based attacks, such as those using GPUs or ASICs. It was developed to provide secure password hashing by making it difficult and costly for attackers to perform large-scale attacks. scrypt combines a hash function with a large amount of memory usage and a CPU-intensive computation process, which ensures that even if an attacker can perform many computations in parallel, the memory requirements make such attacks impractical. It is commonly used in cryptographic applications, including secure password storage and cryptocurrency mining.\n\nVisit the following resources to learn more:\n\n- [@official@sCrypt Website](https://scrypt.io/)\n- [@article@sCrypt: A Beginner’s Guide](https://medium.com/@yusufedresmaina/scrypt-a-beginners-guide-cf1aecf8b010)\n- [@article@Wikipedia - scrypt](https://en.wikipedia.org/wiki/Scrypt)\n",
    "search-engines@gKTSe9yQFVbPVlLzWB0hC": "# Search Engines\n\nSearch engines like Elasticsearch are specialized tools designed for fast, scalable, and flexible searching and analyzing of large volumes of data. Elasticsearch is an open-source, distributed search and analytics engine built on Apache Lucene, offering full-text search capabilities, real-time indexing, and advanced querying features. Key characteristics of search engines like Elasticsearch include:\n\n1. **Full-Text Search**: Support for complex search queries, including relevance scoring and text analysis.\n2. **Distributed Architecture**: Scalability through horizontal distribution across multiple nodes or servers.\n3. **Real-Time Indexing**: Ability to index and search data almost instantaneously.\n4. **Powerful Query DSL**: A domain-specific language for constructing and executing sophisticated queries.\n5. **Analytics**: Capabilities for aggregating and analyzing data, often used for log and event data analysis.\n\nVisit the following resources to learn more:\n\n- [@official@Elasticsearch](https://www.elastic.co/elasticsearch/)\n",
    "server-security@TZ0BWOENPv6pQm8qYB8Ow": "# Server Security\n\nServer security involves protecting servers from threats and vulnerabilities to ensure the confidentiality, integrity, and availability of the data and services they manage. Key practices include:\n\n1. **Patch Management**: Regularly updating software and operating systems to fix vulnerabilities.\n2. **Access Control**: Implementing strong authentication mechanisms and restricting access to authorized users only.\n3. **Firewalls and Intrusion Detection**: Using firewalls to block unauthorized access and intrusion detection systems to monitor and respond to suspicious activities.\n4. **Encryption**: Encrypting data both in transit and at rest to protect sensitive information from unauthorized access.\n5. **Security Hardening**: Configuring servers with minimal services and features, applying security best practices to reduce the attack surface.\n6. **Regular Backups**: Performing regular backups to ensure data can be restored in case of loss or corruption.\n7. **Monitoring and Logging**: Continuously monitoring server activity and maintaining logs for auditing and detecting potential security incidents.\n\nLearn more from the following resources:\n\n- [@video@10 Tips for Hardening your Linux Servers](https://www.youtube.com/watch?v=Jnxx_IAC0G4)\n- [@article@What is a hardened server?](https://www.sophos.com/en-us/cybersecurity-explained/what-is-server-hardening)\n",
    "server-sent-events@RUSdlokJUcEYbCvq5FJBJ": "# Server Sent Events\n\nServer-Sent Events (SSE) is a technology for sending real-time updates from a server to a web client over a single, persistent HTTP connection. It enables servers to push updates to clients efficiently and automatically reconnects if the connection is lost. SSE is ideal for applications needing one-way communication, such as live notifications or real-time data feeds, and uses a simple text-based format for transmitting event data, which can be easily handled by clients using the `EventSource` API in JavaScript.\n\nVisit the following resources to learn more:\n\n- [@article@Server Sent Events - MDN](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)\n- [@video@Server-Sent Events | Postman Level Up](https://www.youtube.com/watch?v=KrE044J8jEQ&t=1s)\n",
    "server-side@z1-eP4sV75GBEIdM4NvL9": "# Server side\n\nServer-side caching is a technique used to improve application performance by storing frequently accessed data in memory on the server, reducing the need for repeated data retrieval or computation. This approach helps to speed up response times and reduce the load on databases and other backend services. Common methods include caching database query results, HTML fragments, and API responses. Popular server-side caching tools and technologies include Redis, Memcached, and built-in caching mechanisms in web frameworks. By efficiently managing and serving cached content, server-side caching enhances scalability and responsiveness of applications.\n\nVisit the following resources to learn more:\n\n- [@article@Server-side caching and Client-side caching](https://www.codingninjas.com/codestudio/library/server-side-caching-and-client-side-caching)\n- [@article@Caching strategies](https://medium.com/@genchilu/cache-strategy-in-backend-d0baaacd2d79)\n- [@article@Local vs distributed](https://redis.io/glossary/distributed-caching/)\n- [@feed@Explore top posts about Web Development](https://app.daily.dev/tags/webdev?ref=roadmapsh)\n",
    "serverless@nkmIv3dNwre4yrULMgTh3": "# Serverless\n\nServerless computing is a cloud computing model where developers build and run applications without managing server infrastructure. In this model, cloud providers handle the server management, scaling, and maintenance tasks. Developers deploy code in the form of functions, which are executed in response to events or triggers, and are billed based on the actual usage rather than reserved capacity. This approach simplifies development by abstracting infrastructure concerns, enabling automatic scaling, and reducing operational overhead. Common serverless platforms include AWS Lambda, Google Cloud Functions, and Azure Functions, which support a range of event-driven applications and microservices.\n\nVisit the following resources to learn more:\n\n- [@article@Serverless](https://www.ibm.com/cloud/learn/serverless)\n- [@article@AWS Services](https://aws.amazon.com/serverless/)\n- [@video@Serverless Computing in 100 Seconds](https://www.youtube.com/watch?v=W_VV2Fx32_Y\\&ab_channel=Fireship)\n- [@feed@Explore top posts about Serverless](https://app.daily.dev/tags/serverless?ref=roadmapsh)\n",
    "service-mesh@n14b7sfTOwsjKTpFC9EZ2": "# Service Mesh\n\nA service mesh is an architectural pattern for enhancing communication, security, and management between microservices in a distributed network. It employs a collection of intelligent proxies to manage service-to-service communication, ensuring high availability, efficient load balancing, and robust service discovery. Additionally, a service mesh offers advanced features like observability for monitoring network behavior, and various traffic management capabilities. In a typical service mesh setup, each microservice is paired with a proxy. This proxy, often deployed using a sidecar pattern, is responsible not only for handling communication to and from its associated microservice but also for implementing various network functionalities. These functionalities include load balancing, intelligent routing, and ensuring secure data transfer. The sidecar pattern, integral to service meshes, involves deploying the proxy as a sidecar container alongside the main microservice container, especially in Kubernetes environments. This design allows the service mesh to function independently from the microservices themselves, simplifying management and updates.\n\nVisit the following resources to learn more:\n\n- [@article@What is a Service Mesh (AWS blog)?](https://aws.amazon.com/what-is/service-mesh/)\n- [@article@What is a Service Mesh (RedHat blog)?](https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh)\n- [@video@What is a Service Mesh?](https://www.youtube.com/watch?v=vh1YtWjfcyk)\n- [@feed@Explore top posts about Service Mesh](https://app.daily.dev/tags/service-mesh?ref=roadmapsh)\n",
    "sha@JVN38r5jENoteia3YeIQ3": "# SHA family\n\nSHA (Secure Hash Algorithm) is a family of cryptographic hash functions designed to generate a fixed-size hash value from variable-sized input data, ensuring data integrity and security. SHA functions are used for tasks such as verifying data integrity, storing passwords securely, and creating digital signatures. The SHA family includes several versions, such as SHA-1, SHA-2, and SHA-3. SHA-1 produces a 160-bit hash value but is now considered weak due to vulnerabilities, while SHA-2, with hash sizes of 224, 256, 384, and 512 bits, offers stronger security. SHA-3 is the latest member, providing additional security features and flexibility.\n\nVisit the following resources to learn more:\n\n- [@article@What is SHA?](https://www.encryptionconsulting.com/education-center/what-is-sha/)\n- [@video@SHA: Secure Hashing Algorithm](https://www.youtube.com/watch?v=DMtFhACPnTY)\n",
    "sharding-strategies@zWstl08R4uzqve4BdYurp": "# Sharding strategies\n\nSharding strategy is a technique to split a large dataset into smaller chunks (logical shard) in which we distribute these chunks in different machines/database nodes in order to distribute the traffic load. It’s a good mechanism to improve the scalability of an application. Many databases support sharding, but not all.\n\nVisit the following resources to learn more:\n\n- [@article@Wikipedia - Sharding in Database Architectures](https://en.wikipedia.org/wiki/Shard_\\(database_architecture\\))\n- [@article@How sharding a database can make it faster](https://stackoverflow.blog/2022/03/14/how-sharding-a-database-can-make-it-faster/)\n- [@video@What is Database Sharding?](https://www.youtube.com/watch?v=XP98YCr-iXQ)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "short-polling@Tt7yr-ChHncJG0Ge1f0Xk": "# Short Polling\n\nShort polling is a technique where a client periodically sends requests to a server at regular intervals to check for updates or new data. The server responds with the current state or any changes since the last request. While simple to implement and compatible with most HTTP infrastructures, short polling can be inefficient due to the frequent network requests and potential for increased latency in delivering updates. It contrasts with long polling and WebSockets, which offer more efficient mechanisms for real-time communication. Short polling is often used when real-time requirements are less stringent and ease of implementation is a priority.\n\nLearn more from the following resources:\n\n- [@article@Amazon SQS Short and Long Polling](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.html)\n- [@video@Short Polling vs Long Polling vs WebSockets](https://www.youtube.com/watch?v=ZBM28ZPlin8)\n",
    "soa@tObmzWpjsJtK4GWhx6pwB": "# SOA\n\nService-Oriented Architecture (SOA) is an architectural pattern where software components, known as services, are designed to be reusable, loosely coupled, and interact over a network. Each service is a self-contained unit that performs a specific business function and communicates with other services through standardized protocols and data formats, such as HTTP and XML. SOA enables organizations to build scalable, flexible, and interoperable systems by allowing services to be developed, deployed, and maintained independently. This approach promotes modularity, easier integration of disparate systems, and agility in adapting to changing business requirements.\n\nVisit the following resources to learn more:\n\n- [@article@What is SOA?](https://aws.amazon.com/what-is/service-oriented-architecture/)\n- [@article@Reference Architecture Foundation for Service Oriented Architecture](http://docs.oasis-open.org/soa-rm/soa-ra/v1.0/soa-ra.html)\n- [@video@Service Oriented Architecture (SOA) Simplified](https://www.youtube.com/watch?v=PA9RjHI463g)\n- [@feed@Explore top posts about Architecture](https://app.daily.dev/tags/architecture?ref=roadmapsh)\n",
    "soap@sSNf93azjuyMzQqIHE0Rh": "# SOAP\n\nSimple Object Access Protocol (SOAP) is a message protocol for exchanging information between systems and applications. When it comes to application programming interfaces (APIs), a SOAP API is developed in a more structured and formalized way. SOAP messages can be carried over a variety of lower-level protocols, including the web-related Hypertext Transfer Protocol (HTTP).\n\nVisit the following resources to learn more:\n\n- [@video@REST vs SOAP](https://www.youtube.com/watch?v=_fq8Ye8kodA)\n",
    "solr@iN_1EuIwCx_7lRBw1Io4U": "# Solr\n\nSolr is an open-source, highly scalable search platform built on Apache Lucene, designed for full-text search, faceted search, and real-time indexing. It provides powerful features for indexing and querying large volumes of data with high performance and relevance. Solr supports complex queries, distributed searching, and advanced text analysis, including tokenization and stemming. It offers features such as faceted search, highlighting, and geographic search, and is commonly used for building search engines and data retrieval systems in various applications, from e-commerce to content management.\n\nVisit the following resources to learn more:\n\n- [@article@Solr Website](https://solr.apache.org/)\n- [@article@Solr Documentation](https://solr.apache.org/resources.html#documentation)\n- [@opensource@Solr on GitHub](https://github.com/apache/solr)\n- [@video@Apache Solr vs Elasticsearch Differences](https://www.youtube.com/watch?v=MMWBdSdbu5k)\n",
    "sqlite@kdulE3Z_BdbtRmq6T2KmR": "# SQLite\n\nSQLite is a lightweight, serverless, self-contained SQL database engine that is designed for simplicity and efficiency. It is widely used in embedded systems and applications where a full-featured database server is not required, such as mobile apps, desktop applications, and small to medium-sized websites. SQLite stores data in a single file, which makes it easy to deploy and manage. It supports standard SQL queries and provides ACID (Atomicity, Consistency, Isolation, Durability) compliance to ensure data integrity. SQLite’s small footprint, minimal configuration, and ease of use make it a popular choice for applications needing a compact, high-performance database solution.\n\nVisit the following resources to learn more:\n\n- [@official@SQLite](https://www.sqlite.org/index.html)\n- [@article@SQLite Tutorial](https://www.sqlitetutorial.net/)\n- [@video@SQLite Introduction](https://www.youtube.com/watch?v=8Xyn8R9eKB8)\n- [@feed@Explore top posts about SQLite](https://app.daily.dev/tags/sqlite?ref=roadmapsh)\n",
    "ssltls@0v3OsaghJEGHeXX0c5kqn": "# SSL/TLS\n\nSecure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols used to provide security in internet communications. These protocols encrypt the data that is transmitted over the web, so anyone who tries to intercept packets will not be able to interpret the data. One difference that is important to know is that SSL is now deprecated due to security flaws, and most modern web browsers no longer support it. But TLS is still secure and widely supported, so preferably use TLS.\n\nVisit the following resources to learn more:\n\n- [@article@Wikipedia - SSL/TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security)\n- [@article@Cloudflare - What is SSL?](https://www.cloudflare.com/learning/ssl/what-is-ssl/)\n- [@video@SSL, TLS, HTTPS Explained](https://www.youtube.com/watch?v=j9QmMEWmcfo)\n",
    "telemetry@neVRtPjIHP_VG7lHwfah0": "# Telemetry\n\nTelemetry involves the automated collection, transmission, and analysis of data from remote or distributed systems to monitor their performance and health. It provides real-time insights into system operations, helping to identify and diagnose issues, optimize performance, and ensure reliability. Telemetry systems collect metrics such as resource usage, error rates, and system events, which are then analyzed to detect anomalies, track trends, and inform decision-making. This data-driven approach is crucial for maintaining and improving the performance and stability of software applications, networks, and hardware systems.\n\nLearn more from the following resources:\n\n- [@article@What is telemetry and how does it work?](https://www.techtarget.com/whatis/definition/telemetry)\n- [@course@OpenTelemetry Course - Understand Software Performance](https://www.youtube.com/watch?v=r8UvWSX3KA8)\n- [@feed@daily.dev OpenTelemetry feed](https://app.daily.dev/tags/opentelemetry)\n",
    "test-driven-development@I-PUAE2AzbEaUkW9vMaUM": "# Test Driven Development\n\nTest driven development (TDD) is the process of writing tests for software's requirements which will fail until the software is developed to meet those requirements. Once those tests pass, then the cycle repeats to refactor code or develop another feature/requirement. In theory, this ensures that software is written to meet requirements in the simplest form, and avoids code defects.\n\nVisit the following resources to learn more:\n\n- [@article@What is Test Driven Development (TDD)?](https://www.guru99.com/test-driven-development.html)\n- [@article@Test-driven development](https://www.ibm.com/garage/method/practices/code/practice_test_driven_development/)\n- [@video@Test-Driven Development](https://www.youtube.com/watch?v=Jv2uxzhPFl4)\n- [@feed@Explore top posts about TDD](https://app.daily.dev/tags/tdd?ref=roadmapsh)\n",
    "testing@STQQbPa7PE3gbjMdL6P-t": "# Testing\n\nTesting is a systematic process used to evaluate the functionality, performance, and quality of software or systems to ensure they meet specified requirements and standards. It involves various methodologies and levels, including unit testing (testing individual components), integration testing (verifying interactions between components), system testing (assessing the entire system's behavior), and acceptance testing (confirming it meets user needs). Testing can be manual or automated and aims to identify defects, validate that features work as intended, and ensure the system performs reliably under different conditions. Effective testing is critical for delivering high-quality software and mitigating risks before deployment.\n\nVisit the following resources to learn more:\n\n- [@article@What is Software Testing?](https://www.guru99.com/software-testing-introduction-importance.html)\n- [@article@Testing Pyramid](https://www.browserstack.com/guide/testing-pyramid-for-test-automation)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)\n",
    "throttling@qAu-Y4KI2Z_y-EqiG86cR": "# Throttling\n\nThrottling is a technique used to control the rate at which requests or operations are processed, typically to prevent overloading a system or service. It involves setting limits on the number of requests a user or application can make within a specific time period. Throttling helps manage resource consumption, ensure fair usage, and maintain system stability by avoiding excessive load that could degrade performance or cause outages. It is commonly implemented in APIs, network services, and databases to balance demand, protect against abuse, and ensure consistent performance across users and services.\n\nVisit the following resources to learn more:\n\n- [@article@Throttling - AWS Well-Architected Framework](https://docs.aws.amazon.com/wellarchitected/2022-03-31/framework/rel_mitigate_interaction_failure_throttle_requests.html)\n- [@video@Throttling vs Debouncing](https://www.youtube.com/watch?v=tJhA0DrH5co)\n",
    "timescale@WiAK70I0z-_bzbWNwiHUd": "# TimeScale\n\nTimescaleDB is an open-source, time-series database built as an extension to PostgreSQL. It is designed to handle large volumes of time-stamped data efficiently, making it suitable for applications that require high-performance analytics on time-series data, such as monitoring systems, IoT applications, and financial services. TimescaleDB leverages PostgreSQL’s features while providing additional capabilities for time-series data, including efficient data ingestion, advanced time-based queries, and automatic data partitioning (hypertables). It supports complex queries and aggregations, making it a powerful tool for analyzing trends and patterns in time-series data.\n\nVisit the following resources to learn more:\n\n- [@official@Timescale Website](https://www.timescale.com/)\n- [@video@Tutorial - TimeScaleDB Explained in 100 Seconds](https://www.youtube.com/watch?v=69Tzh_0lHJ8)\n- [@video@What is Time Series Data?](https://www.youtube.com/watch?v=Se5ipte9DMY)\n",
    "token-authentication@0rGj7FThLJZouSQUhnqGW": "# Token authentication\n\nToken-based authentication is a protocol which allows users to verify their identity, and in return receive a unique access token. During the life of the token, users then access the website or app that the token has been issued for, rather than having to re-enter credentials each time they go back to the same webpage, app, or any resource protected with that same token. Auth tokens work like a stamped ticket. The user retains access as long as the token remains valid. Once the user logs out or quits an app, the token is invalidated. Token-based authentication is different from traditional password-based or server-based authentication techniques. Tokens offer a second layer of security, and administrators have detailed control over each action and transaction.\n\nVisit the following resources to learn more:\n\n- [@roadmap.sh@Token Based Authentication](https://roadmap.sh/guides/token-authentication)\n- [@article@What Is Token-Based Authentication?](https://www.okta.com/identity-101/what-is-token-based-authentication/)\n- [@video@Why is JWT popular?](https://www.youtube.com/watch?v=P2CPd9ynFLg)\n- [@feed@Explore top posts about Authentication](https://app.daily.dev/tags/authentication?ref=roadmapsh)\n",
    "transactions@rq_y_OBMD9AH_4aoecvAi": "# Transactions\n\nIn database systems, a transaction is a series of operations that are executed as a single, atomic unit to ensure data integrity and consistency. Transactions adhere to the ACID properties: Atomicity ensures all operations complete successfully or none are applied; Consistency maintains the database's valid state; Isolation prevents transactions from interfering with each other; and Durability guarantees that once a transaction is committed, its changes are permanent. These properties collectively ensure that databases handle concurrent operations reliably and maintain accurate and consistent data even in the face of failures.\n\nVisit the following resources to learn more:\n\n- [@article@What are Transactions?](https://fauna.com/blog/database-transaction)\n- [@video@What is a Database transaction?](https://www.youtube.com/watch?v=wHUOeXbZCYA)\n- [@video@ACID Properties in Databases With Examples](https://www.youtube.com/watch?v=GAe5oB742dw)\n",
    "twelve-factor-apps@8DmabQJXlrT__COZrDVTV": "# Twelve-Factor Apps\n\nThe Twelve-Factor App methodology is a set of principles for building modern, scalable, and maintainable web applications, particularly suited for cloud environments. It emphasizes best practices for developing applications in a way that facilitates portability, scalability, and ease of deployment. Key principles include:\n\n1. **Codebase**: One codebase tracked in version control, with many deploys.\n2. **Dependencies**: Explicitly declare and isolate dependencies.\n3. **Config**: Store configuration in the environment.\n4. **Backing Services**: Treat backing services as attached resources.\n5. **Build, Release, Run**: Separate build and run stages.\n6. **Processes**: Execute the app as one or more stateless processes.\n7. **Port Binding**: Export services via port binding.\n8. **Concurrency**: Scale out via the process model.\n9. **Disposability**: Maximize robustness with fast startup and graceful shutdown.\n10. **Dev/Prod Parity**: Keep development, staging, and production environments as similar as possible.\n11. **Logs**: Treat logs as streams of events.\n12. **Admin Processes**: Run administrative or management tasks as one-off processes.\n\nVisit the following resources to learn more:\n\n- [@article@The Twelve-Factor App](https://12factor.net/)\n- [@article@An illustrated guide to 12 Factor Apps](https://www.redhat.com/architect/12-factor-app)\n- [@video@Every Developer NEEDS To Know 12-Factor App Principles](https://www.youtube.com/watch?v=FryJt0Tbt9Q)\n",
    "types-of-scaling@osQlGGy38xMcKLtgZtWaZ": "# Horizontal/Vertical Scaling\n\nHorizontal scaling (scaling out/in) involves adding or removing instances of resources, such as servers or containers, to handle increased or decreased loads. It distributes the workload across multiple instances to improve performance and redundancy. This method enhances the system's capacity by expanding the number of nodes in a distributed system.\n\nVertical scaling (scaling up/down) involves increasing or decreasing the resources (CPU, memory, storage) of a single instance or server to handle more load or reduce capacity. This method improves performance by upgrading the existing hardware or virtual machine but has limits based on the maximum capacity of the individual resource.\n\nVisit the following resources to learn more:\n\n- [@article@Horizontal vs Vertical Scaling](https://touchstonesecurity.com/horizontal-vs-vertical-scaling-what-you-need-to-know/)\n- [@video@Vertical Vs Horizontal Scaling: Key Differences You Should Know](https://www.youtube.com/watch?v=dvRFHG2-uYs)\n- [@video@System Design 101](https://www.youtube.com/watch?v=Y-Gl4HEyeUQ)\n",
    "unit-testing@3OYm6b9f6WOrKi4KTOZYK": "# Unit Testing\n\nUnit testing is a software testing method where individual components or units of a program are tested in isolation to ensure they function correctly. This approach focuses on verifying the smallest testable parts of an application, such as functions or methods, by executing them with predefined inputs and comparing the results to expected outcomes. Unit tests are typically automated and written by developers during the coding phase to catch bugs early, facilitate code refactoring, and ensure that each unit of code performs as intended. By isolating and testing each component, unit testing helps improve code reliability and maintainability.\n\nVisit the following resources to learn more:\n\n- [@article@Unit Testing](https://en.wikipedia.org/wiki/Unit_testing)\n- [@article@What is Unit Testing?](https://www.guru99.com/unit-testing-guide.html)\n- [@video@What is Unit Testing?](https://www.youtube.com/watch?v=W2KOSaetWBk)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)\n",
    "version-control-systems@ezdqQW9wTUw93F6kjOzku": "# Version Control Systems\n\nVersion Control Systems (VCS) are tools that manage and track changes to code or documents over time, allowing multiple users to collaborate on a project efficiently. They record every change made to files, enabling developers to revert to previous versions, compare changes, and maintain a history of modifications. VCS can be centralized, where the repository is hosted on a central server (e.g., Subversion), or distributed, where each user has a complete copy of the repository (e.g., Git, Mercurial). Version control facilitates collaboration, enhances code integrity, and supports continuous integration by enabling smooth management of concurrent changes and resolving conflicts.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Git & GitHub Roadmap](https://roadmap.sh/git-github)\n- [@official@Git Documentation](https://git-scm.com/doc)\n- [@article@What is Version Control?](https://www.atlassian.com/git/tutorials/what-is-version-control)\n- [@video@Version Control System (VCS) - Everything you need to know](https://www.youtube.com/watch?v=SVkuliabq4g)\n",
    "web-security@RBrIP5KbVQ2F0ly7kMfTo": "# Web Security Knowledge\n\nWeb security involves protecting web applications from threats and vulnerabilities to ensure data confidentiality, integrity, and availability. Key practices include strong authentication and authorization mechanisms, using encryption (e.g., SSL/TLS) for secure data transmission, and validating user inputs to prevent attacks like SQL injection and cross-site scripting (XSS). Secure coding practices, effective session management, and regular updates and patching are crucial for maintaining security. Additionally, ongoing security testing, including penetration testing and vulnerability assessments, helps identify and address potential weaknesses, safeguarding applications and maintaining user trust.\n\nVisit the following resources to learn more:\n\n- [@article@Why HTTPS Matters](https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https)\n- [@opensource@OWASP Web Application Security Testing Checklist](https://github.com/0xRadi/OWASP-Web-Checklist)\n- [@video@7 Security Risks and Hacking Stories for Web Developers](https://www.youtube.com/watch?v=4YOpILi9Oxs)\n- [@feed@Explore top posts about Security](https://app.daily.dev/tags/security?ref=roadmapsh)\n",
    "web-servers@fekyMpEnaGqjh1Cu4Nyc4": "# Web Servers\n\nWeb servers are software or hardware systems that handle requests from clients (usually web browsers) and serve web content, such as HTML pages, images, and other resources. They process incoming HTTP or HTTPS requests, interact with application servers or databases if needed, and send the appropriate response back to the client. Popular web servers include Apache HTTP Server, Nginx, and Microsoft Internet Information Services (IIS). Web servers are essential for hosting websites and web applications, managing traffic, and ensuring reliable access to online resources by handling concurrent connections, serving static and dynamic content, and providing security features like SSL/TLS encryption.\n\nVisit the following resources to learn more:\n\n- [@article@What is a Web Server? - Mozilla](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server)\n- [@article@What is a Web Server?](https://www.hostinger.co.uk/tutorials/what-is-a-web-server)\n- [@video@Web Server Concepts and Examples](https://youtu.be/9J1nJOivdyw)\n",
    "websockets@sVuIdAe08IWJVqAt4z-ag": "# Web sockets\n\nWebSockets provide a protocol for full-duplex, real-time communication between a client (usually a web browser) and a server over a single, long-lived connection. Unlike traditional HTTP, which requires multiple request-response cycles to exchange data, WebSockets establish a persistent connection that allows for continuous data exchange in both directions. This enables efficient real-time interactions, such as live chat, online gaming, and real-time updates on web pages. WebSocket connections start with an HTTP handshake, then upgrade to a WebSocket protocol, facilitating low-latency communication and reducing overhead compared to HTTP polling or long polling.\n\nVisit the following resources to learn more:\n\n- [@official@Socket.io Library Bidirectional and Low-latency Communication for Every Platform](https://socket.io/)\n- [@article@Introduction to WebSockets](https://www.tutorialspoint.com/websockets/index.htm)\n- [@video@A Beginners Guide to WebSockets](https://www.youtube.com/watch?v=8ARodQ4Wlf4)\n- [@video@How Web Sockets Work](https://www.youtube.com/watch?v=G0_e02DdH7I)\n",
    "what-is-domain-name@ZhSuu2VArnzPDp6dPQQSC": "# Domain Name\n\nA domain name is a human-readable address used to identify a specific location on the internet, making it easier to access websites and online services. It translates to an IP address, which is a numerical identifier used by computers to locate and connect to servers. A domain name consists of two main parts: the **second-level domain** (e.g., \"example\" in \"example.com\") and the **top-level domain** (e.g., \".com\"). Domain names are managed by domain name registrars and are essential for establishing a web presence, providing a user-friendly way to navigate to websites instead of using numeric IP addresses.\n\nVisit the following resources to learn more:\n\n- [@article@What is a Domain Name?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_domain_name)\n- [@article@What is a Domain Name? | Domain name vs. URL](https://www.cloudflare.com/en-gb/learning/dns/glossary/what-is-a-domain-name/)\n- [@video@A Beginners Guide to How Domain Names Work](https://www.youtube.com/watch?v=Y4cRx19nhJk)\n- [@video@Everything You Need to Know About Domain Names](https://www.youtube.com/watch?v=qO5qcQgiNX4)\n",
    "what-is-hosting@aqMaEY8gkKMikiqleV5EP": "# Hosting\n\nHosting refers to the service of providing server space and resources for storing and delivering website files and applications to users over the internet. Hosting providers offer the infrastructure, such as servers, storage, and network connectivity, required to make websites and applications accessible online. There are various types of hosting, including shared hosting (where multiple websites share a single server), virtual private servers (VPS), dedicated hosting (where a single server is dedicated to one user), and cloud hosting (which uses a network of servers to provide scalable resources). Hosting services often include domain registration, security features, and technical support to ensure websites are reliably available and perform well.\n\nVisit the following resources to learn more:\n\n- [@article@What is the difference between Webpage, Website, Web server, and search engine?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/Pages_sites_servers_and_search_engines)\n- [@article@What is a web server?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_web_server)\n- [@video@What is Web Hosting and How Does It Work?](https://www.youtube.com/watch?v=H8oAvyqQwew)\n- [@video@Different Types of Web Hosting Explained](https://www.youtube.com/watch?v=AXVZYzw8geg)\n- [@video@Where to Host a Fullstack Project on a Budget](https://www.youtube.com/watch?v=Kx_1NYYJS7Q)\n",
    "what-is-http@R12sArWVpbIs_PHxBqVaR": "# What is HTTP?\n\nHTTP (Hypertext Transfer Protocol) is a protocol used for transmitting hypertext via the World Wide Web. It defines how messages are formatted and transmitted, and how web servers and browsers should respond to various commands. HTTP operates on a request-response model: a client (usually a web browser) sends an HTTP request to a server for resources, such as web pages or files, and the server responds with the requested content and an HTTP status code indicating the result of the request. HTTP is stateless, meaning each request from a client to a server is independent and does not retain information about previous interactions. It forms the foundation of data communication on the web and is typically used with secure HTTP (HTTPS) for encrypted communication.\n\nVisit the following resources to learn more:\n\n- [@article@What is HTTP?](https://www.cloudflare.com/en-gb/learning/ddos/glossary/hypertext-transfer-protocol-http/)\n- [@article@Overview of HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)\n- [@article@HTTP/3 From A To Z: Core Concepts](https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/)\n- [@course@Full HTTP Networking Course](https://www.youtube.com/watch?v=2JYT5f2isg4)\n- [@video@HTTP/1 to HTTP/2 to HTTP/3](https://www.youtube.com/watch?v=a-sBfyiXysI)\n- [@video@SSL, TLS, HTTPS Explained](https://www.youtube.com/watch?v=j9QmMEWmcfo)\n- [@article@Every thing you need to know about HTTP](https://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html)\n"
  },
  "migration-mapping": {
    "internet": "SiYUdtYMDImRPmV2_XPkH",
    "internet:how-does-the-internet-work": "yCnn-NfSxIybUQ2iTuUGq",
    "internet:what-is-http": "R12sArWVpbIs_PHxBqVaR",
    "internet:browsers-and-how-they-work": "ZhSuu2VArnzPDp6dPQQSC",
    "internet:dns-and-how-it-works": "aqMaEY8gkKMikiqleV5EP",
    "internet:what-is-domain-name": "hkxw9jPGYphmjhTjw8766",
    "internet:what-is-hosting": "P82WFaTPgQEPNp5IIuZ1Y",
    "learn-a-language": "2f0ZO6GJElfZ2Eis28Hzg",
    "learn-a-language:rust": "CWwh2abwqx4hAxpAGvhIx",
    "learn-a-language:go": "BdXbcz4-ar3XOX0wIKzBp",
    "learn-a-language:java": "ANeSwxJDJyQ-49pO2-CCI",
    "learn-a-language:csharp": "rImbMHLLfJwjf3l25vBkc",
    "learn-a-language:php": "l9Wrq_Ad9-Ju4NIB0m5Ha",
    "learn-a-language:javascript": "8-lO-v6jCYYoklEJXULxN",
    "learn-a-language:python": "J_sVHsD72Yzyqb9KCIvAY",
    "learn-a-language:ruby": "SlH0Rl07yURDko2nDPfFy",
    "version-control-systems": "ezdqQW9wTUw93F6kjOzku",
    "version-control-systems:git": "_I1E__wCIVrhjMk6IMieE",
    "repo-hosting-services": "NvUcSDWBhzJZ31nzT4UlE",
    "repo-hosting-services:github": "ptD8EVqwFUYr4W5A_tABY",
    "repo-hosting-services:bitbucket": "Ry_5Y-BK7HrkIc6X0JG1m",
    "repo-hosting-services:gitlab": "Wcp-VDdFHipwa7hNAp1z_",
    "relational-databases": "r45b461NxLN6wBODJ5CNP",
    "relational-databases:postgresql": "FihTrMO56kj9jT8O_pO2T",
    "relational-databases:mysql": "VPxOdjJtKAqmM5V0LR5OC",
    "relational-databases:sqlite": "kdulE3Z_BdbtRmq6T2KmR",
    "relational-databases:mariadb": "tD3i-8gBpMKCHB-ITyDiU",
    "relational-databases:mssql": "dEsTje8kfHwWjCI3zcgLC",
    "relational-databases:oracle": "h1SAjQltHtztSt8QmRgab",
    "apis": "EwvLPSI6AlZ4TnNIJTZA4",
    "apis:open-api-spec": "9cD5ag1L0GqHx4_zxc5JX",
    "apis:hateoas": "dLY0KafPstajCcSbslC4M",
    "caching": "ELj8af7Mi38kUbaPJfCUR",
    "caching:client-side": "KWTbEVX_WxS8jmSaAX3Fe",
    "caching:server-side": "z1-eP4sV75GBEIdM4NvL9",
    "caching:cdn": "Nq2BO53bHJdFT1rGZPjYx",
    "caching:server-side:memcached": "xPvVwGQw28uMeLYIWn8yn",
    "caching:server-side:redis": "g8GjkJAhvnSxXTZks0V1g",
    "apis:authentication": "PY9G7KQy8bF6eIdr1ydHf",
    "apis:authentication:jwt": "UxS_mzVUjLigEwKrXnEeB",
    "apis:authentication:basic-authentication": "yRiJgjjv2s1uV9vgo3n8m",
    "apis:authentication:token-authentication": "0rGj7FThLJZouSQUhnqGW",
    "apis:authentication:oauth": "vp-muizdICcmU0gN8zmkS",
    "apis:authentication:cookie-based": "ffzsh8_5yRq85trFt9Xhk",
    "apis:authentication:openid": "z3EJBpgGm0_Uj3ymhypbX",
    "apis:authentication:saml": "UCHtaePVxS-0kpqlYxbfC",
    "apis:rest": "lfNFDZZNdrB0lbEaMtU71",
    "apis:json-apis": "sNceS4MpSIjRkWhNDmrFg",
    "apis:soap": "sSNf93azjuyMzQqIHE0Rh",
    "apis:grpc": "J-TOE2lT4At1mSdNoxPS1",
    "apis:graphql": "zp3bq38tMnutT2N0tktOW",
    "web-security-knowledge": "RBrIP5KbVQ2F0ly7kMfTo",
    "web-security-knowledge:md5": "jWwA6yX4Zjx-r_KpDaD3c",
    "web-security-knowledge:sha-family": "JVN38r5jENoteia3YeIQ3",
    "web-security-knowledge:scrypt": "kGTALrvCpxyVCXHRmkI7s",
    "web-security-knowledge:bcrypt": "dlG1bVkDmjI3PEGpkm1xH",
    "testing": "STQQbPa7PE3gbjMdL6P-t",
    "web-security-knowledge:https": "x-WBJjBd8u93ym5gtxGsR",
    "web-security-knowledge:owasp": "AAgciyxuDvS2B_c6FRMvT",
    "web-security-knowledge:cors": "LU6WUbkWKbPM1rb2_gEqa",
    "web-security-knowledge:ssl-tls": "0v3OsaghJEGHeXX0c5kqn",
    "web-security-knowledge:content-security-policy": "HgQBde1zLUFtlwB66PR6_",
    "web-security-knowledge:server-security": "TZ0BWOENPv6pQm8qYB8Ow",
    "ci-cd": "mGfD7HfuP184lFkXZzGjG",
    "testing:integration-testing": "381Kw1IMRv7CJp-Uf--qd",
    "testing:unit-testing": "3OYm6b9f6WOrKi4KTOZYK",
    "testing:functional-testing": "NAGisfq2CgeK3SsuRjnMw",
    "scaling-databases": "95d9itpUZ4s9roZN8kG9x",
    "scaling-databases:cap-theorem": "LAdKDJ4LcMaDWqslMvE8X",
    "scaling-databases:sharding-strategies": "zWstl08R4uzqve4BdYurp",
    "scaling-databases:data-replication": "wrl7HHWXOaxoKVlNZxZ6d",
    "scaling-databases:database-indexes": "y-xkHFE9YzhNIX3EiWspL",
    "more-about-databases": "LJt27onEOeIBomiEMTyKd",
    "more-about-databases:orms": "Z7jp_Juj5PffSxV7UZcBb",
    "more-about-databases:acid": "qSAdfaGUfn8mtmDjHJi3z",
    "more-about-databases:transactions": "rq_y_OBMD9AH_4aoecvAi",
    "more-about-databases:n-plus-one-problem": "bQnOAu863hsHdyNMNyJop",
    "more-about-databases:database-normalization": "Ge2SnKBrQQrU-oGLz6TmT",
    "more-about-databases:failure-modes": "GwApfL4Yx-b5Y8dB9Vy__",
    "more-about-databases:profiling-performance": "SYXJhanu0lFmGj2m2XXhS",
    "architectural-patterns": "tHiUpG9LN35E5RaHddMv5",
    "architectural-patterns:monolithic-apps": "Ke522R-4k6TDeiDRyZbbU",
    "architectural-patterns:microservices": "K55h3aqOGe6-hgVhiFisT",
    "architectural-patterns:soa": "tObmzWpjsJtK4GWhx6pwB",
    "architectural-patterns:serverless": "nkmIv3dNwre4yrULMgTh3",
    "architectural-patterns:service-mesh": "n14b7sfTOwsjKTpFC9EZ2",
    "architectural-patterns:twelve-factor-apps": "8DmabQJXlrT__COZrDVTV",
    "design-and-development-principles": "9Fpoor-Os_9lvrwu5Zjh-",
    "design-and-development-principles:gof-design-patterns": "6XIWO0MoE-ySl4qh_ihXa",
    "design-and-development-principles:domain-driven-design": "BvHi5obg0L1JDZFKBzx9t",
    "design-and-development-principles:test-driven-development": "I-PUAE2AzbEaUkW9vMaUM",
    "design-and-development-principles:cqrs": "u8IRw5PuXGUcmxA0YYXgx",
    "design-and-development-principles:event-sourcing": "wqE-mkxvehOzOv8UyE39p",
    "message-brokers": "nJ5FpFgGCRaALcWmAKBKT",
    "message-brokers:rabbitmq": "GPFRMcY1DEtRgnaZwJ3vW",
    "message-brokers:kafka": "VoYSis1F1ZfTxMlQlXQKB",
    "containerization": "SGVwJme-jT_pbOTvems0v",
    "containerization:lxc": "31ZlpfIPr9-5vYZqvjUeL",
    "search-engines:elasticsearch": "NulaE1isWqn-feYHg4YQT",
    "search-engines:solr": "iN_1EuIwCx_7lRBw1Io4U",
    "web-servers": "fekyMpEnaGqjh1Cu4Nyc4",
    "web-servers:nginx": "z5AdThp9ByulmM9uekgm-",
    "web-servers:apache": "jjjonHTHHo-NiAf6p9xPv",
    "web-servers:caddy": "Op-PSPNoyj6Ss9CS09AXh",
    "web-servers:ms-iis": "0NJDgfe6eMa7qPUOI6Eya",
    "nosql-databases": "F8frGuv1dunOdcVJ_IiGs",
    "real-time-data": "5XGvep2qoti31bsyqNzrU",
    "server-sent-events": "RUSdlokJUcEYbCvq5FJBJ",
    "web-sockets": "sVuIdAe08IWJVqAt4z-ag",
    "long-polling": "osvajAJlwGI3XnX0fE-kA",
    "short-polling": "Tt7yr-ChHncJG0Ge1f0Xk",
    "nosql-databases:document-databases": "28U6q_X-NTYf7OSKHjoWH",
    "nosql-databases:timeseries-databases": "XbM4TDImSH-56NsITjyHK",
    "nosql-databases:realtime-databases": "RyJFLLGieJ8Xjt-DlIayM",
    "nosql-databases:column-databases": "gT6-z2vhdIQDzmR2K1g1U",
    "nosql-databases:key-value-databases": "M0iaSSdVPWaCUpyTG50Vf",
    "graph-databases": "BTNJfWemFKEeNeTyENXui",
    "scalability": "SHmbcMRsc3SygEDksJQBD",
    "scalability:mitigation-strategies:graceful-degradation": "G9AI_i3MkUE1BsO3_-PH7",
    "scalability:mitigation-strategies:throttling": "qAu-Y4KI2Z_y-EqiG86cR",
    "scalability:mitigation-strategies:backpressure": "JansCqGDyXecQkD1K7E7e",
    "scalability:mitigation-strategies:loadshifting": "HoQdX7a4SnkFRU4RPQ-D5",
    "scalability:mitigation-strategies:circuit-breaker": "spkiQTPvXY4qrhhVUkoPV",
    "scalability:horizontal-vertical-scaling": "osQlGGy38xMcKLtgZtWaZ",
    "scalability:migration-strategies": "f7iWBkC0X7yyCoP_YubVd",
    "scalability:instrumentation-monitoring-telemetry": "4X-sbqpP0NDhM99bKdqIa",
    "scalability:observability": "Z01E67D6KjrShvQCHjGR7"
  }
}