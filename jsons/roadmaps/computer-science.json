{
  "computer-science": "---\njsonUrl: '/jsons/roadmaps/computer-science.json'\npdfUrl: '/pdfs/roadmaps/computer-science.pdf'\norder: 1\nrenderer: 'editor'\nbriefTitle: 'Computer Science'\nbriefDescription: 'Curriculum with free resources for a self-taught developer.'\ntitle: 'Computer Science'\ndescription: 'Computer Science curriculum with free resources for a self-taught developer.'\nisNew: false\nhasTopics: true\ndimensions:\n  width: 968\n  height: 3550\nschema:\n  headline: 'Computer Science Roadmap'\n  description: 'Computer Science roadmap for the self-taught developers and bootcamp grads. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/computer-science.png'\n  datePublished: '2023-01-05'\n  dateModified: '2023-01-20'\nseo:\n  title: 'Computer Science Roadmap: Curriculum for the self taught developer'\n  description: 'Computer Science study plan with free resources for the self-taught and bootcamp grads wanting to learn Computer Science.'\n  keywords:\n    - 'computer science'\n    - 'computer science roadmap'\n    - 'computer science roadmap 2024'\n    - 'computer science roadmap 2025'\n    - 'guide to computer science'\n    - 'software engineer roadmap'\n    - 'software engineer roadmap 2024'\n    - 'software engineer roadmap 2025'\n    - 'self-taught computer science roadmap'\n    - 'computer science skills'\n    - 'computer science skills test'\n    - 'cs roadmap'\n    - 'computer science curriculum'\n    - 'cs curriculum'\n    - 'compscience roadmap'\n    - 'comp science roadmap'\n    - 'skills for computer science'\n    - 'what is computer science'\n    - 'computer science quiz'\n    - 'computer science interview questions'\nrelatedRoadmaps:\n  - 'linux'\n  - 'php'\n  - 'blockchain'\n  - 'aws'\n  - 'devops'\n  - 'software-design-architecture'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'skill-roadmap'\n---\n",
  "content": {
    "2-3-search-trees@3jiV9R82qxpqIGfpEq_wK": "# 2-3 Search Trees\n\nIn practice: 2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).\n\nYou would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.\n\nVisit the following resources to learn more:\n\n- [@video@23-Tree Intuition and Definition](https://www.youtube.com/watch?v=C3SsdUqasD4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=2)\n- [@video@Binary View of 23-Tree](https://www.youtube.com/watch?v=iYvBtGKsqSg&index=3&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n- [@video@2-3 Trees (student recitation)](https://www.youtube.com/watch?v=TOb1tuEZ2X4&index=5&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)",
    "a-algorithm@Yrk2PLUa-_FAPlhCkMl3e": "# A\\* Algorithm\n\nA\\* is a graph traversal algorithm that is used to find the shortest path between two nodes in a graph. It is a modified version of Dijkstra's algorithm that uses heuristics to find the shortest path. It is used in pathfinding and graph traversal.\n\nVisit the following resources to learn more:\n\n- [@article@A\\* Search Algorithm - Wikipedia](https://en.wikipedia.org/wiki/A*_search_algorithm)\n- [@video@A\\* Pathfinding (E01: algorithm explanation)](https://www.youtube.com/watch?v=-L-WgKMFuhE)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "acid-model@W5B-v-BFcCRmuN0L1m6PI": "# ACID\n\nACID are the four properties of any database system that help in making sure that we are able to perform the transactions in a reliable manner. It's an acronym which refers to the presence of four properties: atomicity, consistency, isolation and durability\n\nVisit the following resources to learn more:\n\n- [@article@What is ACID Compliant Database?](https://retool.com/blog/whats-an-acid-compliant-database/)\n- [@article@What is ACID Compliance?: Atomicity, Consistency, Isolation](https://fauna.com/blog/what-is-acid-compliance-atomicity-consistency-isolation)\n- [@video@ACID Explained: Atomic, Consistent, Isolated & Durable](https://www.youtube.com/watch?v=yaQ5YMWkxq4)\n",
    "activity-diagrams@ptfRNiU0mC0Q5SLA_FWZu": "# Activity Diagrams\n\nActivity diagrams are used to model the flow of control in a system. They are used in conjunction with use case diagrams to model the behavior of the system for each use case. They are also used to model the behavior of a single class.\n\nVisit the following resources to learn more:\n\n- [@article@UML Activity Diagram Tutorial](https://www.lucidchart.com/pages/uml-activity-diagram)\n- [@article@What is Activity Diagram?](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-activity-diagram/)\n",
    "adjacency-list@rTnKJcPniUtqvfOyC88N0": "# Graph Representation\n\nA graph can either be represented as an adjacency matrix or an adjacency list.\n\nThe adjacency matrix is a 2D array of size `V x V` where `V` is the number of vertices in a graph. Let the 2D array be `adj[][]`, a slot `adj[i][j] = 1` indicates that there is an edge from vertex `i` to vertex `j`.\n\nAdjacency list is an array of vectors. Size of the array is equal to the number of vertices. Let the array be `array[]`. An entry `array[i]` represents the list of vertices adjacent to the ith vertex. This representation can also be used to represent a weighted graph. The weights of edges can be represented as lists of pairs.\n\nVisit the following resources to learn more:\n\n- [@article@Adjacency Matrix - Graph Representation](https://www.programiz.com/dsa/graph-adjacency-matrix)\n- [@article@Adjacency List - Graph Representation](https://www.programiz.com/dsa/graph-adjacency-list)\n",
    "adjacency-matrix@HZ1kk0TQ13FLC9t13BZl5": "# Adjacency Matrix\n\nAn adjacency matrix is a square matrix used to represent a finite graph. It is used to represent the connections between vertices in a graph. The matrix is filled with 0s and 1s, where a 1 represents a connection between two vertices and a 0 represents no connection.\n\nVisit the following resources to learn more:\n\n- [@article@Adjacency Matrix](https://en.wikipedia.org/wiki/Adjacency_matrix)",
    "architectural-patterns@BGhJNtszbYJtKyhqr2jax": "# Architectural Patterns\n\nArchitectural patterns are a high-level design pattern that focuses on the overall structure of the system. They are similar to design patterns, but they are more concerned with the structure of the system. They are used to solve problems that are common to many software systems.\n\nVisit the following resources to learn more:\n\n- [@article@10 Common Software Architectural Patterns in a nutshell](https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013)\n- [@article@Architectural Pattern - Wikipedia](https://en.wikipedia.org/wiki/Architectural_pattern)\n",
    "architectural-styles@X1wv7xV69IEzepg8bF8oZ": "# Architectural Styles\n\nArchitectural patterns are the fundamental organization of a system, defining how the system is composed and how its components interact. Architectural patterns are identified by their name, like client-server, peer-to-peer, and layered.\n\nVisit the following resources to learn more:\n\n- [@article@List of Software Architecture Styles and Patterns](https://en.wikipedia.org/wiki/List_of_software_architecture_styles_and_patterns)\n",
    "array@TwW6SO2IXqkxJXVjLzdwU": "# Array\n\nArrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index.\n\nVisit the following resources to learn more:\n\n- [@article@What is Array in Data Structure? Types & Syntax](https://www.simplilearn.com/tutorials/data-structure-tutorial/arrays-in-data-structure)\n- [@video@Array Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=QJNwK2uJyGs)\n- [@video@Jagged Arrays](https://www.youtube.com/watch?v=1jtrQqYpt7g)\n- [@video@Dynamic and Static Arrays](https://www.youtube.com/watch?v=PEnFFiQe1pM&list=PLDV1Zeh2NRsB6SWUrDFW2RmDotAfPbeHu&index=6)\n- [@video@Dynamic Array Code](https://www.youtube.com/watch?v=tvw4v7FEF1w&list=PLDV1Zeh2NRsB6SWUrDFW2RmDotAfPbeHu&index=5)\n- [@video@UC Berkeley CS61B - Linear and Multi-Dim Arrays (Start watching from 15m 32s)](https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE)\n- [@course@Array Data Structure - Coursera](https://www.coursera.org/lecture/data-structures/arrays-OsBSF)\n",
    "ascii@hmwsNp60alS43kJg4A_Og": "# ASCII\n\nASCII is a character encoding standard for electronic communication. It was developed from telegraph code and uses 7 bits to represent 128 different characters. The first 32 characters are non-printable control characters used to control devices like printers and typewriters. The remaining 96 characters are printable and include the letters of the English alphabet, numbers, punctuation, and various symbols.\n\nVisit the following resources to learn more:\n\n- [@article@Must Know about Character Encodings](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/)\n- [@article@Character Encoding](https://cs.lmu.edu/~ray/notes/charenc/)\n",
    "asymptotic-notation@UpBrpmrUwYUB9eesNxCq5": "# Asymptotic Notation\n\nThe efficiency of an algorithm depends on the amount of time, storage and other resources required to execute the algorithm. The efficiency is measured with the help of asymptotic notations.\n\nAn algorithm may not have the same performance for different types of inputs. With the increase in the input size, the performance will change.\n\nThe study of change in performance of the algorithm with the change in the order of the input size is defined as asymptotic analysis.\n\nVisit the following resources to learn more:\n\n- [@article@Asymptotic Analysis: Big-O Notation and More](https://www.programiz.com/dsa/asymptotic-notations)\n- [@video@Big O Notation — Calculating Time Complexity](https://www.youtube.com/watch?v=Z0bH0cMY0E8)\n- [@video@Big O Notation in 5 Minutes](https://www.youtube.com/watch?v=__vX2sjlpXU)\n- [@video@Asymptotic Notation - CS50](https://www.youtube.com/watch?v=iOq5kSKqeR4)\n- [@video@CS 61B Lecture 19: Asymptotic Analysis](https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98)\n- [@article@Big-O Cheat Sheet](https://www.bigocheatsheet.com/)\n- [@article@Big O Notation | Brilliant Math & Science Wiki](https://brilliant.org/wiki/big-o-notation/)\n",
    "avl-trees@OUistS7H7hQQxVV-lOg39": "# AVL Trees\n\nAVL trees are a type of self-balancing binary search tree. They are named after their inventors, Adelson-Velskii and Landis. AVL trees are the most popular self-balancing binary search tree.\n\nIn practice: From what I can tell, these aren't used much in practice, but I could see where they would be: The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it attractive for data structures that may be built once and loaded without reconstruction, such as language dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)\n\nVisit the following resources to learn more:\n\n- [@article@AVL Tree - Programiz](https://www.programiz.com/dsa/avl-tree)\n- [@video@MIT AVL Trees / AVL Sort](https://www.youtube.com/watch?v=FNeL18KsWPc&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=6)\n- [@course@AVL Trees](https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees)\n- [@course@AVL Tree Implementation](https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation)\n- [@course@Split And Merge](https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge)\n",
    "b-tree@s0Pi6CemUUsmZSEu2j2gH": "# B-Trees\n\nFun fact: it's a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).\n\nIn Practice: B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary block in a particular file. The basic problem is turning the file block i address into a disk block (or perhaps to a cylinder-head-sector) address\n\nVisit the following resources to learn more:\n\n- [@article@B-Tree - Wikipedia](https://en.wikipedia.org/wiki/B-tree)\n- [@article@B-Tree Datastructure](http://btechsmartclass.com/data_structures/b-trees.html)\n- [@video@Introduction to B-Trees](https://www.youtube.com/watch?v=I22wEC1tTGo&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=6)\n- [@video@B-Tree Definition and Insertion](https://www.youtube.com/watch?v=s3bCdZGrgpA&index=7&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n- [@video@B-Tree Deletion](https://www.youtube.com/watch?v=svfnVhJOfMc&index=8&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n- [@video@B-Trees (playlist) in 26 minutes](https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz)\n",
    "balanced-search-trees@7DF3UhefOSqqTuccH8c8X": "# Balanced Search Trees\n\nBalanced search trees are a type of data structure that allow for fast insertion, deletion, and lookup of data. They are a type of self-balancing binary search tree, which means that they are a binary tree that maintains the binary search tree property while also keeping the tree balanced. This means that the tree is always approximately balanced, which allows for fast insertion, deletion, and lookup of data.\n\nVisit the following resources to learn more:\n\n- [@article@Self-balancing Binary Search Tree - Wikipedia](https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree)\n- [@video@Balanced Search Trees Operations and Applications 11 min](https://www.youtube.com/watch?v=IbNZ-x1I2IM)\n- [@video@Balanced binary search tree rotations](https://www.youtube.com/watch?v=q4fnJZr8ztY)\n",
    "balanced-tree@ZaWGLvZyu4sIPn-zwVISN": "# Balanced Tree\n\nA balanced binary tree, also referred to as a height-balanced binary tree, is defined as a binary tree in which the height of the left and right subtree of any node differ by not more than 1.\n\nVisit the following resources to learn more:\n\n- [@article@Balanced Binary Tree](https://www.programiz.com/dsa/balanced-binary-tree)\n",
    "base@q3nRhTYS5wg9tYnQe2sCF": "# BASE Model\n\nThe rise in popularity of NoSQL databases provided a flexible and fluidity with ease to manipulate data and as a result, a new database model was designed, reflecting these properties. The acronym BASE is slightly more confusing than ACID but however, the words behind it suggest ways in which the BASE model is different and acronym BASE stands for:-\n\n- **B**asically **A**vailable\n- **S**oft state\n- **E**ventual consistency\n\nVisit the following resources to learn more:\n\n- [@article@ACID vs. BASE Database Model](https://phoenixnap.com/kb/acid-vs-base)\n- [@article@What Is BASE in Database Engineering?](https://www.lifewire.com/abandoning-acid-in-favor-of-base-1019674)",
    "basic-math-skills@cdNi0EYrQ5nsgNxFVnXL8": "# Basic Math Skills\n\nMath is a fundamental skill for computer science.\n\nVisit the following resources to learn more:\n\n- [@video@Lec 1 | MIT 6.042J Mathematics for Computer Science, Fall 2010](https://www.youtube.com/watch?v=L3LMbpZIKhQ\\&list=PLB7540DEDD482705B)\n- [@video@Integer Arithmetic, Karatsuba Multiplication](https://www.youtube.com/watch?v=eCaXlAaN2uE\\&index=11\\&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n- [@video@The Chinese Remainder Theorem (used in cryptography)](https://www.youtube.com/watch?v=ru7mWZJlRQg)\n- [@article@Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory](http://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html)\n- [@video@Discrete Mathematics by Shai Simonson (19 videos)](https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t)\n- [@article@Discrete Mathematics By IIT Ropar NPTEL](https://nptel.ac.in/courses/106/106/106106183/)\n- [@video@MIT 6.042J - Probability Introduction](https://www.youtube.com/watch?v=SmFwFdESMHI\\&index=18\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Conditional Probability](https://www.youtube.com/watch?v=E6FbvM-FGZ8\\&index=19\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Independence](https://www.youtube.com/watch?v=l1BCv3qqW4A\\&index=20\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Random Variables](https://www.youtube.com/watch?v=MOfhhFaQdjw\\&list=PLB7540DEDD482705B\\&index=21)\n- [@video@MIT 6.042J - Expectation I](https://www.youtube.com/watch?v=gGlMSe7uEkA\\&index=22\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Expectation II](https://www.youtube.com/watch?v=oI9fMUqgfxY\\&index=23\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Large Deviations](https://www.youtube.com/watch?v=q4mwO2qS2z4\\&index=24\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Random Walks](https://www.youtube.com/watch?v=56iFMY8QW2k\\&list=PLB7540DEDD482705B\\&index=25)\n- [@feed@Explore top posts about Math](https://app.daily.dev/tags/math?ref=roadmapsh)\n",
    "bellman-fords-algorithm@eY4nK2lPYsrR-a_8y2sao": "# Bellman Ford's Algorithm\n\nBellman ford's algorithm is a graph algorithm that finds the shortest path from a source vertex to all other vertices in a graph. It is a dynamic programming algorithm that uses a bottom-up approach to find the shortest path. It is similar to Dijkstra's algorithm but it can handle negative weights. It is also similar to Floyd-Warshall's algorithm but it can handle negative weights and it is faster than Floyd-Warshall's algorithm.\n\nVisit the following resources to learn more:\n\n- [@video@Bellman-Ford - MIT](https://www.youtube.com/watch?v=f9cVS_URPc0\\&ab_channel=MITOpenCourseWare)\n- [@video@Bellman-Ford in 4 Minutes](https://www.youtube.com/watch?v=9PHkk0UavIM)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "big-endian@U8AgY6I-62mN5Ohg9MsG6": "# Big Endian\n\nBig endian is the most common type of endianness. In this type, the most significant byte is stored at the lowest memory address. This means that the most significant byte is stored first and the least significant byte is stored last.\n\nVisit the following resources to learn more:\n\n- [@video@Lecture 22. Big Endian and Little Endian](https://www.youtube.com/watch?v=T1C9Kj_78ek)\n",
    "big-o@c-NrTtJuNihbHzyPEOKTW": "# Big O Notation\n\nThe Big O notation can be used to describe how the running time of an algorithm scales with the growth of the input size, ignoring implementation details such as programming language and computer speed. Specifically, it denotes the upper bound of the growth rate of a function that relates the running time of an algorithm to its input size. It can be used to compare algorithms and determine which one is better.\n\nVisit the following resources to learn more:\n\n- [@article@Big-O Notation: A Simple Explanation with Examples](https://medium.com/better-programming/big-o-notation-a-simple-explanation-with-examples-a56347d1daca)\n- [@article@CS 61B Lecture 19: Asymptotic Analysis](https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98)\n- [@article@Big O Notation | Brilliant Math & Science Wiki](https://brilliant.org/wiki/big-o-notation/)\n- [@video@Big O Notation — Calculating Time Complexity](https://www.youtube.com/watch?v=Z0bH0cMY0E8)\n- [@video@Big O Notations](https://www.youtube.com/watch?v=V6mKVRU1evU)\n- [@video@Big Oh Notation (and Omega and Theta)](https://www.youtube.com/watch?v=ei-A_wy5Yxw&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN&index=3)\n",
    "big-omega@X33735aeAVSlJ6yv9GS-h": "# Big Omega Notation\n\nThe Big Omega notation is similar to the Big O notation. The only difference is that it denotes the lower bound on the growth rate of a function.\n\nVisit the following resources to learn more:\n\n- [@video@Big Oh Notation (and Omega and Theta)](https://www.youtube.com/watch?v=ei-A_wy5Yxw&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN&index=3)\n- [@video@Asymptotic Notation - CS50](https://www.youtube.com/watch?v=iOq5kSKqeR4)\n- [@article@Big O Notation | Brilliant Math & Science Wiki](https://brilliant.org/wiki/big-o-notation/)\n",
    "big-theta@ThLpVZQIJ4diY5m0dik8m": "# Big Theta Notation\n\nIf a function has the same Big O and Big Omega, they also become the function's Big Theta. Big Theta is used to describe the exact growth rate of a function. It is denoted by the symbol Θ.\n\nVisit the following resources to learn more:\n\n- [@video@Big Oh Notation (and Omega and Theta)](https://www.youtube.com/watch?v=ei-A_wy5Yxw&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN&index=3)\n- [@video@Asymptotic Notation - CS50](https://www.youtube.com/watch?v=iOq5kSKqeR4)\n- [@article@Big O Notation | Brilliant Math & Science Wiki](https://brilliant.org/wiki/big-o-notation/)\n",
    "binary-search-tree@et7l85gnxjvzD2tDyHT_T": "# Binary Search Tree\n\nA binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node's left subtree and less than the ones in its right subtree.\n\nVisit the following resources to learn more:\n\n- [@video@Tree | Illustrated Data Structures](https://www.youtube.com/watch?v=S2W3SXGPVyU)\n- [@course@Binary Search Trees - Coursera](https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction)\n- [@video@Binary Search Trees - MIT](https://www.youtube.com/watch?v=76dhtgZt38A)\n- [@video@Binary Search Tree Implementation in C++](https://www.youtube.com/watch?v=COZK7NATh4k\\&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\\&index=29)\n- [@video@BST implementation - memory allocation in stack and heap](https://www.youtube.com/watch?v=hWokyBoo0aI\\&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\\&index=30)\n- [@video@Find Min and Max Element in Binary Search Tree](https://www.youtube.com/watch?v=Ut90klNN264\\&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\\&index=31)\n- [@video@Check if Given Tree is Binary Search Tree or Not](https://www.youtube.com/watch?v=yEwSGhSsT0U\\&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\\&index=36)\n- [@video@Delete an Element from Binary Search Tree](https://www.youtube.com/watch?v=gcULXE7ViZw\\&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\\&index=37)\n- [@video@Inorder Successor in a binary search tree](https://www.youtube.com/watch?v=5cPbNCrdotA\\&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\\&index=38)\n- [@feed@Explore top posts about General Programming](https://app.daily.dev/tags/general-programming?ref=roadmapsh)\n",
    "binary-search@8kTg4O9MrTHRUrp6U-ctA": "# Binary Search\n\nBinary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. If they are not equal, the half in which the target cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to the target value, and repeating this until the target value is found. If the search ends with the remaining half being empty, the target is not in the array.\n\nVisit the following resources to learn more:\n\n- [@article@Binary Search - Khan Academy](https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search)\n- [@article@Binary Search](https://www.topcoder.com/thrive/articles/Binary%20Search)\n- [@video@Binary Search in 4 Minutes](https://www.youtube.com/watch?v=fDKIpRe8GW4\\&feature=youtu.be)\n- [@video@Binary Search - CS50](https://www.youtube.com/watch?v=D5SrAga1pno)\n- [@feed@Explore top posts about Binary Search](https://app.daily.dev/tags/binary-search?ref=roadmapsh)\n",
    "binary-tree@G9dnegZ6zNvxrCZ3O_b_z": "# Binary Tree\n\nA binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child.\n\nVisit the following resources to learn more:\n\n- [@video@Binary Trees - Part 1](https://www.youtube.com/watch?v=76dhtgZt38A\\&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY\\&index=9)\n- [@video@Binary Trees - Part 2](https://www.youtube.com/watch?v=U1JYwHcFfso\\&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY\\&index=10)\n- [@feed@Explore top posts about Binary Tree](https://app.daily.dev/tags/binary-tree?ref=roadmapsh)\n",
    "bitwise-operators@hTPLcuOW7eEE5oYhNfmOG": "# Bitwise Operators\n\nBitwise operators are used to perform operations on individual bits of a number. They are used in cryptography, image processing, and other applications.\n\nVisit the following resources to learn more:\n\n- [@video@Bit Manipulation](https://www.youtube.com/watch?v=7jkIUgLC29I)\n- [@video@Binary: Plusses & Minuses (Why We Use Twos Complement) - Computerphile](https://www.youtube.com/watch?v=lKTsv6iVxV4)\n- [@video@Algorithms: Bit Manipulation](https://www.youtube.com/watch?v=NLKQEOgBAnw)\n",
    "boyer-moore@p6qub32jcaGloHXUDUrlG": "# Boyer Moore Algorithm\n\nBoyer Moore algorithm is a string searching algorithm that is used to find the index of a substring in a string. It is a very efficient algorithm that is used in many applications. It is used in text editors, compilers, and many other applications.\n\nVisit the following resources to learn more:\n\n- [@article@Boyer-Moore String-search Algorithm](https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm)\n- [@course@Boyer Moore Algorithm](https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore)\n",
    "breadth-first-search@Ke_ch4fnuKIiGAXUM_LPP": "# Breadth First Search\n\nBreadth first search is a graph traversal algorithm that starts at the root node and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.\n\nVisit the following resources to learn more:\n\n- [@video@BFS and DFS in a Binary Tree](https://www.youtube.com/watch?v=uWL6FJhq5fM)\n- [@article@Breadth-First Search (BFS) and Depth-First Search (DFS) for Binary Trees in Java](https://www.digitalocean.com/community/tutorials/breadth-first-search-depth-first-search-bfs-dfs)\n- [@video@Breadth-first search in 4 minutes](https://www.youtube.com/watch?v=HZ5YTanv5QE)\n",
    "breadth-first-search@vcV6TEM_PqXxtThdfMKGw": "# Breadth First Search\n\nBreadth first search for a graph is a way to traverse the graph. It starts at the root node and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.\n\nVisit the following resources to learn more:\n\n- [@video@Graph Algorithms II - DFS, BFS, Kruskals Algorithm, Union Find Data Structure - Lecture 7](https://www.youtube.com/watch?v=ufj5_bppBsA&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=7)\n- [@video@Breadth-first search in 4 minutes](https://www.youtube.com/watch?v=HZ5YTanv5QE)\n",
    "brute-force-search@g3b0kt1fCAjjYyS2WelWi": "# Brute Force Search\n\nBrute force search is a simple algorithm that checks for a pattern in a string by comparing each character of the string with the first character of the pattern. If the first character matches, it then compares the next character of the string with the next character of the pattern and so on. If all the characters of the pattern match, then the pattern is found. If the first character does not match, then the algorithm compares the second character of the string with the first character of the pattern and so on.\n\nVisit the following resources to learn more:\n\n- [@article@A Beginner Guide to Brute Force Algorithm for Substring Search](https://nulpointerexception.com/2019/02/10/a-beginner-guide-to-brute-force-algorithm-for-substring-search/)\n- [@article@Brute Force Algorithm in Cybersecurity and String Search](https://www.baeldung.com/cs/brute-force-cybersecurity-string-search)\n- [@course@Brute-Force Substring Search](https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search)\n",
    "bubble-sort@4wGBYFZpcdTt97WTbSazx": "# Bubble Sort\n\nBubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n\nVisit the following resources to learn more:\n\n- [@article@Bubble Sort Algorithm](https://www.programiz.com/dsa/bubble-sort)\n- [@video@Bubble Sort](https://www.youtube.com/watch?v=P00xJgWzz2c&index=1&list=PL89B61F78B552C1AB)\n- [@video@Bubble sort in 2 minutes](https://youtu.be/xli_FI7CuzA)\n",
    "c@1kQJs-3Aw8Bi7d_Xh67zS": "# C++\n\nC++ is a powerful general-purpose programming language. It can be used to develop operating systems, browsers, games, and so on. C++ supports different ways of programming like procedural, object-oriented, functional, and so on. This makes C++ powerful as well as flexible.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated C++ Roadmap](https://roadmap.sh/cpp)\n- [@article@Learn C++](https://learncpp.com/)\n- [@article@Cpp Reference](https://en.cppreference.com/)\n- [@article@CPlusPlus](https://cplusplus.com/)\n- [@article@C++ TutorialsPoint](https://www.tutorialspoint.com/cplusplus/index.htm)\n- [@feed@Explore top posts about C++ Programming](https://app.daily.dev/tags/c++?ref=roadmapsh)\n",
    "c@jHKCLfLml8oZyj4829gx0": "# C\\#\n\nC# (pronounced \"C sharp\") is a general purpose programming language made by Microsoft. It is used to perform different tasks and can be used to create web apps, games, mobile apps, etc.\n\nVisit the following resources to learn more:\n\n- [@article@C# Learning Path](https://docs.microsoft.com/en-us/learn/paths/csharp-first-steps/?WT.mc_id=dotnet-35129-website)\n- [@article@Introduction to C#](https://docs.microsoft.com/en-us/shows/CSharp-101/?WT.mc_id=Educationalcsharp-c9-scottha)\n- [@video@C# tutorials](https://www.youtube.com/watch?v=gfkTfcpWqAY\\&list=PLTjRvDozrdlz3_FPXwb6lX_HoGXa09Yef)\n- [@feed@Explore top posts about C# Programming](https://app.daily.dev/tags/csharp?ref=roadmapsh)\n",
    "c@n4IsklfYJXFIyF1rGWuEa": "# C\n\nC is a general-purpose computer programming language. It was created in the 1970s by Dennis Ritchie, and remains very widely used and influential. By design, C's features cleanly reflect the capabilities of the targeted CPUs.\n\nVisit the following resources to learn more:\n\n- [@article@Learn C - Tutorials Point](https://www.tutorialspoint.com/cprogramming/index.htm)\n- [@video@C Programming Tutorial for Beginners](https://www.youtube.com/watch?v=KJgsSFOSQv0)\n- [@video@Learn C Programming with Dr. Chuck](https://www.youtube.com/watch?v=j-_s8f5K30I)\n- [@video@C Programming Full Course (Bro Code)](https://youtu.be/87SH2Cn0s9A)\n- [@feed@Explore top posts about C Programming](https://app.daily.dev/tags/c?ref=roadmapsh)\n",
    "caching@4u5w9QCptLWuY9O7_UU8V": "# Caching\n\nCaching is a way of storing data in a temporary storage to make future requests faster. It is one of the most important tools in the computer science toolbox.\n\nVisit the following resources to learn more:\n\n- [@article@System Design - Caching](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo#caching)\n- [@video@What is Caching | System Design Basics](https://www.youtube.com/watch?v=joifNgoXXFk)\n",
    "cap-theorem@GZI8EsEqiMJX3fSbO_E-7": "# CAP Theorem\n\nThe CAP theorem states that it is impossible for a distributed data store to simultaneously provide more than two out of Consistency, Availability and Partition Tolerance.\n\nVisit the following resources to learn more:\n\n- [@article@CAP Theorem](https://en.wikipedia.org/wiki/CAP_theorem)\n- [@video@What is CAP Theorem?](https://www.youtube.com/watch?v=_RbsFXWRZ10)\n",
    "cap-theorem@uqfeiQ9K--QkGNwks4kjk": "# CAP Theorem\n\nCAP is an acronym for Consistency, Availability, and Partition Tolerance. According to the CAP theorem, any distributed system can only guarantee two of the three properties at any time. You can't guarantee all three properties at once.\n\nVisit the following resources to learn more:\n\n- [@article@What is CAP Theorem?](https://www.bmc.com/blogs/cap-theorem/)\n- [@article@CAP Theorem - Wikipedia](https://en.wikipedia.org/wiki/CAP_theorem)\n- [@article@An Illustrated Proof of the CAP Theorem](https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/)\n- [@article@CAP Theorem and its applications in NoSQL Databases](https://www.ibm.com/uk-en/cloud/learn/cap-theorem)\n- [@video@What is CAP Theorem?](https://www.youtube.com/watch?v=_RbsFXWRZ10)\n",
    "cdn@r8V9bZpc98SrLvXc070bZ": "# Content Delivery Network (CDN)\n\nA CDN is a network of servers that are distributed geographically. The servers are connected to each other and to the internet. The servers are used to deliver content to users. The content is delivered to the user from the server that is closest to the user. This is done to reduce latency and improve the performance of the content delivery.\n\nVisit the following resources to learn more:\n\n- [@article@What is a CDN?](https://www.cloudflare.com/learning/cdn/what-is-a-cdn/)\n- [@article@Content Delivery Network (CDN) - System Design](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo#content-delivery-network-cdn)\n- [@video@Content Delivery Networks](https://www.youtube.com/watch?v=6DXEPcXKQNY)\n",
    "character-encodings@DtG9EJonWi4_2oQ4fWOKY": "# Character Encodings\n\nCharacter encodings are a way of representing characters as numbers. They are used to store and transmit text. The most common character encoding is ASCII, which is a 7-bit encoding. This means that each character is represented by a number between 0 and 127. The ASCII character set contains 128 characters, including letters, numbers, punctuation, and control characters. The ASCII character set is a subset of the Unicode character set, which is a 16-bit encoding. Unicode is a superset of ASCII, so ASCII characters can be represented by Unicode. Unicode is the most common character encoding used on the web.\n\nVisit the following resources to learn more:\n\n- [@article@Must Know about Character Encodings](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/)\n- [@article@Character Encoding](https://cs.lmu.edu/~ray/notes/charenc/)\n",
    "class-diagrams@FZ8znJSz8PvQlnEyRLXmQ": "# Class Diagrams\n\nClass Diagrams are used to model the static structure of a system. They are used to show the classes, their attributes, operations (or methods), and the relationships between objects.\n\nVisit the following resources to learn more:\n\n- [@article@Class Diagrams](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/)\n- [@video@UML Class Diagram Tutorial](https://www.youtube.com/watch?v=UI6lqHOVHic)\n",
    "cloud-design-patterns@YMO9oD_sbzyDZPNU2xZwe": "# Cloud Design Patterns\n\nThese design patterns are useful for building reliable, scalable, secure applications in the cloud.\n\nThe link below has cloud design patterns where each pattern describes the problem that the pattern addresses, considerations for applying the pattern, and an example based on Microsoft Azure. Most patterns include code samples or snippets that show how to implement the pattern on Azure. However, most patterns are relevant to any distributed system, whether hosted on Azure or other cloud platforms.\n\nVisit the following resources to learn more:\n\n- [@article@Cloud Design Patterns](https://learn.microsoft.com/en-us/azure/architecture/patterns/)\n- [@feed@Explore top posts about Cloud](https://app.daily.dev/tags/cloud?ref=roadmapsh)\n",
    "clustering@wAsZ-M5N9ERufQnBaXbAE": "# Clustering\n\nAt a high level, a computer cluster is a group of two or more computers, or nodes, that run in parallel to achieve a common goal. This allows workloads consisting of a high number of individual, parallelizable tasks to be distributed among the nodes in the cluster. As a result, these tasks can leverage the combined memory and processing power of each computer to increase overall performance.\n\nVisit the following resources to learn more:\n\n- [@article@System Design: Clustering](https://dev.to/karanpratapsingh/system-design-clustering-3726)\n",
    "co-np@pLBfkzi0qfgVRqi_4AmMI": "# Co-NP\n\nCo-NP stands for the complement of NP Class. It means if the answer to a problem in Co-NP is No, then there is proof that can be checked in polynomial time.\n\nVisit the following resources to learn more:\n\n- [@article@Trying to understand P vs NP vs NP Complete vs NP Hard](https://softwareengineering.stackexchange.com/questions/308178/trying-to-understand-p-vs-np-vs-np-complete-vs-np-hard)\n- [@video@Complexity: P, NP, NP-completeness, Reductions](https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22)\n- [@video@Complexity: Approximation Algorithms](https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24)\n- [@video@Complexity: Fixed-Parameter Algorithms](https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n- [@video@Lecture 23: Computational Complexity](https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=24)\n- [@video@Greedy Algs. II & Intro to NP Completeness](https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939)\n",
    "combinatorics@lWnAY0DgrUOmT6yqnxeBN": "# Combinatorics\n\nCombinatorics is the study of counting. It is a branch of mathematics that is used to solve problems in a variety of fields, including computer science, statistics, and physics. In computer science, combinatorics is used to solve problems related to counting the number of possible outcomes of a given problem. For example, if you are given a set of 10 objects, how many different ways can you arrange them? Or, if you are given a set of 10 objects, how many different ways can you choose 3 objects from that set? These are examples of combinatorial problems.\n\nVisit the following resources to learn more:\n\n- [@article@Probability and Combinatorics](https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic)\n- [@video@Math Skills: How to find Factorial, Permutation and Combination](https://www.youtube.com/watch?v=8RRo6Ti9d0U)\n- [@video@Make School: Probability](https://www.youtube.com/watch?v=sZkAAk9Wwa4)\n- [@video@Make School: More Probability and Markov Chains](https://www.youtube.com/watch?v=dNaJg-mLobQ)\n",
    "common-algorithms@7a6-AnBI-3tAU1dkOvPkx": "# Common Algorithms\n\nHere are some common algorithms that you should know. You can find more information about them in the Algorithms section of the Computer Science course.\n\n- Sorting\n- Recursion\n- Searching\n- Cache Algorithms\n- Tree Algorithms\n- Graph Algorithms\n- Greedy Algorithms\n- Backtracking\n- Substring Search\n- Suffix Arrays\n- Dynamic Programming\n\nVisit the following resources to learn more:\n\n- [@article@Top Algorithms and Data Structures](https://medium.com/data-science/top-algorithms-and-data-structures-you-really-need-to-know-ab9a2a91c7b5)\n",
    "common-uml-diagrams@DMuMsEowpevTCALtziwTB": "# UML\n\nUML is a standard way of visualizing a software system. It is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.\n\nVisit the following resources to learn more:\n\n- [@article@Unified Modeling Language (UML) Description](https://www.uml-diagrams.org/)\n- [@video@UML Diagrams Full Course (Unified Modeling Language)](https://www.youtube.com/watch?v=WnMQ8HlmeXc)\n",
    "complete-binary-tree@Jx1WWCjm8jkfAGtHv15n1": "# Complete Binary Tree\n\nA complete binary tree is a special type of binary tree where all the levels of the tree are filled completely except the lowest level nodes which are filled from as left as possible.\n\nVisit the following resources to learn more:\n\n- [@article@Complete Binary Tree - Programiz](https://www.programiz.com/dsa/complete-binary-tree)\n- [@article@Complete Binary Trees](https://www.wscubetech.com/resources/dsa/complete-binary-tree)",
    "complexity-classes@YLCmZvoLkhOk9wlgYW2Ms": "# Complexity Classes\n\nIn computer science, there exist some problems whose solutions are not yet found, the problems are divided into classes known as Complexity Classes. In complexity theory, a Complexity Class is a set of problems with related complexity. These classes help scientists to groups problems based on how much time and space they require to solve problems and verify the solutions. It is the branch of the theory of computation that deals with the resources required to solve a problem.\n\nVisit the following resources to learn more:\n\n- [@article@Trying to understand P vs NP vs NP Complete vs NP Hard](https://softwareengineering.stackexchange.com/questions/308178/trying-to-understand-p-vs-np-vs-np-complete-vs-np-hard)\n- [@video@Complexity: P, NP, NP-completeness, Reductions](https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22)\n- [@video@Complexity: Approximation Algorithms](https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24)\n- [@video@Complexity: Fixed-Parameter Algorithms](https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n- [@video@Lecture 23: Computational Complexity](https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=24)\n- [@video@Greedy Algs. II & Intro to NP Completeness](https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939)\n",
    "concurrency-in-multiple-cores@xUo5Ox_HTgGyeQMDIkVyK": "# Concurrency in Multiple Cores\n\nConcurrency or Parallelism is simultaneous execution of processes on a multiple cores per CPU or multiple CPUs (on a single motherboard). Concurrency is when Parallelism is achieved on a single core/CPU by using scheduling algorithms that divides the CPU's time (time-slice).\n\nVisit the following resources to learn more:\n\n- [@article@Difference between Multi-core and concurrent Programming?](https://stackoverflow.com/questions/5372861/what-is-the-difference-between-multicore-and-concurrent-programming)\n- [@article@Concurrency in Multicore systems](https://cs.stackexchange.com/questions/140793/concurrency-in-multiple-core)\n- [@article@Mastering Concurrency](https://www.harrisonclarke.com/blog/mastering-concurrency-a-guide-for-software-engineers)",
    "constant@3F_QBv_sU39ehOxpurF88": "# Constant\n\nConstant time algorithms are the simplest and most efficient algorithms. They are algorithms that always take the same amount of time to run, regardless of the size of the input. This is the best case scenario for an algorithm, and is the goal of all algorithms.\n\nVisit the following resources to learn more:\n\n- [@video@Big O Notation — Calculating Time Complexity](https://www.youtube.com/watch?v=Z0bH0cMY0E8)\n- [@video@Big O Notations](https://www.youtube.com/watch?v=V6mKVRU1evU)\n",
    "cpu-cache@DjTQjMbika4_yTzrBpcmB": "# CPU Cache\n\nA CPU cache is a hardware cache used by the central processing unit of a computer to reduce the average cost to access data from the main memory. A cache is a smaller, faster memory, located closer to a processor core, which stores copies of the data from frequently used main memory locations.\n\nVisit the following resources to learn more:\n\n- [@article@What is CPU Cache](https://www.howtogeek.com/854138/what-is-cpu-cache/)\n- [@video@MIT 6.004 L15: The Memory Hierarchy](https://www.youtube.com/watch?v=vjYF_fAZI5E\\&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-\\&index=24)\n- [@video@MIT 6.004 L16: Cache Issues](https://www.youtube.com/watch?v=ajgC3-pyGlk\\&index=25\\&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-)\n- [@feed@Explore top posts about Computing](https://app.daily.dev/tags/computing?ref=roadmapsh)\n",
    "cpu-interrupts@cpQvB0qMDL3-NWret7oeA": "# CPU Interrupts\n\nCPU Interrupts are a way for the CPU to communicate with the rest of the computer. They are a way for the CPU to tell the rest of the computer that it needs to do something. For example, if the CPU is running a program and it needs to read from the keyboard, it will send an interrupt to the keyboard to tell it to send the data to the CPU. The CPU will then wait for the keyboard to send the data and then continue running the program.\n\nVisit the following resources to learn more:\n\n- [@article@System Interrupts 100% CPU](https://www.wikihow.com/System-Interrupts-100-Cpu)\n- [@video@Interrupts](https://youtu.be/iKlAWIKEyuw)\n- [@feed@Explore top posts about Computing](https://app.daily.dev/tags/computing?ref=roadmapsh)\n",
    "data-structures@NM7q5REW1sJgMhxJhPpLT": "# Data Structures\n\nAs the name indicates itself, a **Data Structure** is a way of organizing the data in the **memory** so that it can be used efficiently. Some common data structures are array, linked list, stack, hashtable, queue, tree, heap, and graph.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated DSA Roadmap](https://roadmap.sh/datastructures-and-algorithms)\n- [@course@Data Structures and Algorithms By Google](https://techdevguide.withgoogle.com/paths/data-structures-and-algorithms/)\n- [@video@Data Structures Illustrated](https://www.youtube.com/watch?v=9rhT3P1MDHk\\&list=PLkZYeFmDuaN2-KUIv-mvbjfKszIGJ4FaY)\n- [@video@Data Structures playlist](https://youtube.com/playlist?list=PLDV1Zeh2NRsB6SWUrDFW2RmDotAfPbeHu&si=_EEf7x58G6lUcMGG)\n- [@feed@Explore top posts about Data Structures](https://app.daily.dev/tags/data-structures?ref=roadmapsh)\n",
    "database-federation@3r21avMlo0xFB9i7PHccX": "# Database Federation\n\nFederation (or functional partitioning) splits up databases by function. The federation architecture makes several distinct physical databases appear as one logical database to end-users.\n\nVisit the following resources to learn more:\n\n- [@article@Database Federation](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo#database-federation)\n- [@feed@Explore top posts about Database](https://app.daily.dev/tags/database?ref=roadmapsh)\n",
    "databases@zvlTQ0A-My4QDrslp_lru": "# Databases\n\nA database is a collection of useful data of one or more related organizations structured in a way to make data an asset to the organization. A database management system is a software designed to assist in maintaining and extracting large collections of data in a timely fashion.\n\nVisit the following resources to learn more:\n\n- [@article@What is a Database?](https://www.oracle.com/database/what-is-database/)\n- [@article@What are Databases?](https://www.prisma.io/dataguide/intro/what-are-databases)\n- [@video@DBMS by Stanford](https://www.youtube.com/watch?v=D-k-h0GuFmE\\&list=PL9ysvtVnryGpnIj9rcIqNDxakUn6v72Hm)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "dcl@4bUmfuP2qgcli8I2Vm9zh": "# DCL (Data Control Language)\n\nDCL includes commands such as GRANT and REVOKE which mainly deal with the rights, permissions, and other controls of the database system.\n\nVisit the following resources to learn more:\n\n- [@article@DCL](https://en.wikipedia.org/wiki/Data_Control_Language)",
    "ddl@ii1vF74u3yrFNlw_21b3B": "# DDL (Data Definition Language)\n\nDDL or Data Definition Language actually consists of the SQL commands that can be used to define the database schema. It simply deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database. DDL is a set of SQL commands used to create, modify, and delete database structures but not data. These commands are normally not used by a general user, who should be accessing the database via an application.\n\nVisit the following resources to learn more:\n\n- [@article@DDL](https://en.wikipedia.org/wiki/Data_definition_language)",
    "dependency-injection@J7DKRklMtJ94Y-18Jo50r": "# Dependency Injection\n\nDependency injection is a software design pattern that allows us to decouple the dependencies of a class from the class itself. This allows us to write more flexible and testable code.\n\nVisit the following resources to learn more:\n\n- [@article@Dependency Injection - StackOverflow](https://stackoverflow.com/questions/130794/what-is-dependency-injection)\n- [@video@What is Dependency Injection?](https://www.youtube.com/watch?v=0yc2UANSDiw)\n- [@feed@Explore top posts about Dependency Injection](https://app.daily.dev/tags/dependency-injection?ref=roadmapsh)\n",
    "depth-first-search@chzP5_t2gMi6MstxEzCi5": "# Depth First Search\n\nDepth first search is a graph traversal algorithm that starts at a root node and explores as far as possible along each branch before backtracking.\n\nVisit the following resources to learn more:\n\n- [@article@Breadth-First Search (BFS) and Depth-First Search (DFS) for Binary Trees in Java](https://www.digitalocean.com/community/tutorials/breadth-first-search-depth-first-search-bfs-dfs)\n- [@video@BFS and DFS in a Binary Tree](https://www.youtube.com/watch?v=uWL6FJhq5fM)\n- [@video@Depth First Search in 4 Minutes](https://www.youtube.com/watch?v=Urx87-NMm6c)\n",
    "depth-first-search@Yf5gOIe7oiL19MjEVcpdw": "# Depth First Search\n\nDepth first search is a graph traversal algorithm that starts at a root node and explores as far as possible along each branch before backtracking.\n\nVisit the following resources to learn more:\n\n- [@wiki@Depth-first Search](https://en.wikipedia.org/wiki/Depth-first_search)",
    "design-patterns@-De1hU2ONGwhQmUpsyrCO": "# Design Patterns\n\nDesign patterns are solutions to common problems in software design. They are formalized best practices that the programmer can use to solve common problems when designing an application or system.\n\nVisit the following resources to learn more:\n\n- [@article@Design Patterns](https://en.wikipedia.org/wiki/Software_design_pattern)\n- [@opensource@Design Patterns for Humans](https://github.com/kamranahmedse/design-patterns-for-humans)\n- [@article@Refactoring Guru - Design Patterns](https://refactoring.guru/design-patterns/)\n- [@feed@Explore top posts about Design Patterns](https://app.daily.dev/tags/design-patterns?ref=roadmapsh)\n",
    "dijkstras-algorithm@l3X9UrEYTWs5kBXI1NNCf": "# Dijkstra's Algorithm\n\nDijkstra's algorithm is a greedy algorithm that finds the shortest path between two nodes in a graph. It is a very common algorithm used in computer science and is used in many applications such as GPS navigation, network routing, and finding the shortest path in a maze.\n\nVisit the following resources to learn more:\n\n- [@video@Dijkstras Algorithm in 3 Minutes](https://www.youtube.com/watch?v=_lHSawdgXpI)\n- [@video@Dijkstras Algorithm - MIT](https://www.youtube.com/watch?v=NSHizBK9JD8\\&t=1731s\\&ab_channel=MITOpenCourseWare)\n- [@video@Speeding Up Dijkstras Algorithm - MIT](https://www.youtube.com/watch?v=CHvQ3q_gJ7E\\&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\\&index=18)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "dijkstras-algorithm@oJstm-8c-4seWbIWcNgDv": "# Dijkstra's Algorithm\n\nDijkstra's algorithm is a graph traversal algorithm that finds the shortest path between two nodes in a graph. It is a weighted graph algorithm, meaning that each edge in the graph has a weight associated with it. The algorithm works by finding the shortest path from the starting node to all other nodes in the graph. It does this by keeping track of the distance from the starting node to each node, and then choosing the node with the shortest distance from the starting node to visit next. It then updates the distance of each node from the starting node, and repeats the process until all nodes have been visited.\n\nVisit the following resources to learn more:\n\n- [@video@Dijkstras Algorithm - MIT](https://www.youtube.com/watch?v=NSHizBK9JD8\\&t=1731s\\&ab_channel=MITOpenCourseWare)\n- [@video@Dijkstras Algorithm in 3 Minutes](https://www.youtube.com/watch?v=_lHSawdgXpI)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "directed-graph@6Jy8SXHuYA08h9iLjKFWR": "# Directed Graph\n\nA directed graph is graph, i.e., a set of objects (called vertices or nodes) that are connected together, where all the edges are directed from one vertex to another. A directed graph is sometimes called a digraph or a directed network. In contrast, a graph where the edges are bidirectional is called an undirected graph.\n\nVisit the following resources to learn more:\n\n- [@article@Directed Graph](https://en.wikipedia.org/wiki/Directed_graph)\n",
    "dml@tcQSH-eAvJUZuePTDjAIb": "# DML (Data Manipulation Language)\n\nThe SQL commands that manipulate data in the database belong to DML, or Data Manipulation Language, and this includes most of the SQL statements. DCL is the component of the SQL statement that controls access to data and to the database. Basically, DCL statements are grouped with DML statements.\n\nVisit the following resources to learn more:\n\n- [@article@DML: Data Manipulation Language](https://satoricyber.com/glossary/dml-data-manipulation-language)\n- [@article@Difference Between DDL and DML](https://appmaster.io/blog/difference-between-ddl-and-dml)\n",
    "dns@fYjoXB4rnkM5gg46sqVz5": "# DNS\n\nThe Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources.\n\nVisit the following resources to learn more:\n\n- [@article@What is DNS?](https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/)\n- [@article@How DNS works (comic)](https://howdns.works/)\n- [@video@DNS and How does it Work?](https://www.youtube.com/watch?v=Wj0od2ag5sk)\n- [@video@DNS Records](https://www.youtube.com/watch?v=7lxgpKh_fRY)\n- [@video@Complete DNS mini-series](https://www.youtube.com/watch?v=zEmUuNFBgN8\\&list=PLTk5ZYSbd9MhMmOiPhfRJNW7bhxHo4q-K)\n- [@feed@Explore top posts about DNS](https://app.daily.dev/tags/dns?ref=roadmapsh)\n",
    "dql@05lkb3B86Won7Rkf-8DeD": "# DQL (Data Query Language)\n\nDQL statements are used for performing queries on the data within schema objects. The purpose of the DQL Command is to get some schema relation based on the query passed to it. We can define DQL as follows it is a component of SQL statement that allows getting data from the database and imposing order upon it. It includes the SELECT statement. This command allows getting the data out of the database to perform operations with it. When a SELECT is fired against a table or tables the result is compiled into a further temporary table, which is displayed or perhaps received by the program i.e. a front-end.\n\nVisit the following resources to learn more:\n\n- [@article@Data Query Language](https://en.wikipedia.org/wiki/Data_query_language)",
    "endianess@vjMqqFsTxSjaiYxmliwLi": "# Endianness\n\nEndianness is the order in which bytes are stored in memory. The two most common types of endianness are big endian and little endian. Big endian stores the most significant byte first, while little endian stores the least significant byte first.\n\nVisit the following resources to learn more:\n\n- [@article@Endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness)\n- [@article@Big-Endian vs Little-Endian Explained with Examples](https://www.freecodecamp.org/news/what-is-endianness-big-endian-vs-little-endian/)\n- [@video@Big Endian vs Little Endian.mp4](https://www.youtube.com/watch?v=JrNF0KRAlyo)\n- [@video@Endianness Explained With an Egg - Computerphile](https://www.youtube.com/watch?v=NcaiHcBvDR4)\n",
    "entity-relationship-model@XnxxEmr2TyW2kOpB4gtR5": "# Entity Relationship Model\n\nEntity relationship model is a high-level data model that describes the logical structure of a database. It is a graphical representation of entities and their relationships to each other, typically used in modeling the organization of data within databases or information systems.\n\nVisit the following resources to learn more:\n\n- [@video@Entity Relationship Diagram (ERD) Tutorial - Part 1](https://www.youtube.com/watch?v=QpdhBUYk7Kk)\n- [@video@Entity Relationship Diagram (ERD) Tutorial - Part 2](https://www.youtube.com/watch?v=-CuY5ADwn24)\n",
    "exponential@5mMLr6tWbiSZuox1lx0_B": "# Exponential\n\nExponential algorithms are those that grow at a rate of 2^n. This means that for each additional input, the algorithm will take twice as long to run. The following function is an example of an exponential algorithm:\n\n```python\ndef exponential(n):\n    if n == 0:\n        return 1\n    return exponential(n - 1) + exponential(n - 1)\n```\n\nAs you can see, the algorithm's runtime grows exponentially. For each additional input, the algorithm will take twice as long to run.\n\nVisit the following resources to learn more:\n\n- [@video@Big O Notation — Calculating Time Complexity](https://www.youtube.com/watch?v=Z0bH0cMY0E8)\n- [@video@Big O Notations](https://www.youtube.com/watch?v=V6mKVRU1evU)\n",
    "factorial@m0umGQNdvg95UiNpQZsQN": "# Factorial\n\nFactorial complexity algorithms have a runtime of `O(n!)`. This is the worst case scenario for an algorithm. Factorial complexity algorithms are very inefficient and should be avoided.\n\n```python\ndef generate_permutations(s):\n    # Base case: If the string length is 1, return a list containing the string\n    if len(s) == 1:\n        return [s]\n\n    # Initialize the result list\n    permutations = []\n\n    # Recursively generate all permutations\n    for i in range(len(s)):\n        # Current character\n        current_char = s[i]\n        # Remaining characters\n        remaining_chars = s[:i] + s[i + 1 :]\n        # Generate all permutations of the remaining characters\n        for perm in generate_permutations(remaining_chars):\n            # Add the current character to the front of each generated permutation\n            permutations.append(current_char + perm)\n\n    return permutations\n```\n\nVisit the following resources to learn more:\n\n- [@article@Big O Cheat Sheet - Time Complexity Chart](https://www.freecodecamp.org/news/big-o-cheat-sheet-time-complexity-chart/)\n- [@video@Factorial Explained](https://www.youtube.com/watch?v=pxh__ugRKz8)\n",
    "finding-hamiltonian-paths@aBjBHpq_OajgQjxdCobXD": "# Finding Hamiltonian Paths\n\nHamiltonian paths are paths that visit every node in a graph exactly once. They are named after the famous mathematician Hamilton. Hamiltonian paths are a special case of Hamiltonian cycles, which are cycles that visit every node in a graph exactly once.\n\nVisit the following resources to learn more:\n\n- [@article@Hamiltonian Cycles](https://en.wikipedia.org/wiki/Hamiltonian_cycle)\n- [@article@Hamiltonian Path](https://www.hackerearth.com/practice/algorithms/graphs/hamiltonian-path/tutorial/)\n- [@article@Hamiltonian Paths and Cycles](https://medium.com/stamatics-iit-kanpur/hamiltonian-paths-and-cycles-4f233bfbc53a)\n- [@article@Hamiltonian Paths - Lecture 7](https://people.csail.mit.edu/virgi/6.s078/lecture17.pdf)\n",
    "floating-point-math@-bawIWfrYuAxy8cP-AGFS": "# Floating Point Numbers\n\nFloating point numbers are numbers that have a decimal point in them. They are used to represent real numbers. For example, 3.14 is a floating point number. 3 is not a floating point number because it does not have a decimal point in it.\n\nVisit the following resources to learn more:\n\n- [@video@Representation of Floating Point Numbers - 1](https://www.youtube.com/watch?v=ji3SfClm8TU)\n- [@video@Why 0.1 + 0.2 != 0.3? | Floating Point Math](https://www.youtube.com/watch?v=RIiq4tTt6rI)\n",
    "ford-fulkerson-algorithm@Hqw2eGtgfbVggqXBnIOdI": "# Ford Fulkerson Algorithm\n\nFord Fulkerson Algorithm is a greedy algorithm that is used to find the maximum flow in a flow network. It is also known as the Edmonds-Karp Algorithm.\n\nVisit the following resources to learn more:\n\n- [@article@Ford-Fulkerson Algorithm](https://www.programiz.com/dsa/ford-fulkerson-algorithm)\n- [@video@Ford-Fulkerson in 5 minutes](https://www.youtube.com/watch?v=Tl90tNtKvxs)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "full-binary-tree@Q8ZJNeTbc22Q08Mra-McY": "# Full Binary Tree\n\nA full Binary tree is a special type of binary tree in which every parent node/internal node has either two or no children. It is also known as a proper binary tree.\n\nVisit the following resources to learn more:\n\n- [@article@Full Binary Tree](https://www.programiz.com/dsa/full-binary-tree)\n",
    "go@mWW88VnkqWgDz02qw5zU-": "# Go\n\nGo is an open source programming language supported by Google. Go can be used to write cloud services, CLI tools, used for API development, and much more.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Go Roadmap](https://roadmap.sh/golang)\n- [@official@A Tour of Go – Go Basics](https://go.dev/tour/welcome/1)\n- [@official@Go Reference Documentation](https://go.dev/doc/)\n- [@article@Go by Example - annotated example programs](https://gobyexample.com/)\n- [@article@Making a RESTful JSON API in Go](https://thenewstack.io/make-a-restful-json-api-go/)\n- [@article@Go, the Programming Language of the Cloud](https://thenewstack.io/go-the-programming-language-of-the-cloud/)\n- [@feed@Explore top posts about Golang](https://app.daily.dev/tags/golang?ref=roadmapsh)\n",
    "gof-design-patterns@iPN9mSyFwYZER5HSkj6oL": "# GoF Design Patterns\n\nGang of Four (GoF) design patterns are a set of 23 design patterns that were first described in the book \"Design Patterns: Elements of Reusable Object-Oriented Software\" by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. The book is commonly referred to as the \"Gang of Four book\".\n\nVisit the following resources to learn more:\n\n- [@opensource@Design Patterns for Humans](https://github.com/kamranahmedse/design-patterns-for-humans)\n",
    "graph@vQm046o6ozcvLoqg9L6eL": "# Graph\n\nGraphs in data structures are non-linear data structures made up of a finite number of nodes or vertices and the edges that connect them. Graphs in data structures are used to address real-world problems in which it represents the problem area as a network like telephone networks, circuit networks, and social networks.\n\nVisit the following resources to learn more:\n\n- [@article@Graph Data Structure](https://www.simplilearn.com/tutorials/data-structure-tutorial/graphs-in-data-structure)\n- [@video@Graph Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=0sQE8zKhad0)\n- [@video@CSE373 2020 - Lecture 10 - Graph Data Structures](https://www.youtube.com/watch?v=Sjk0xqWWPCc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=10)\n- [@video@CSE373 2020 - Lecture 11 - Graph Traversal](https://www.youtube.com/watch?v=ZTwjXj81NVY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=11)\n- [@video@CSE373 2020 - Lecture 12 - Depth First Search](https://www.youtube.com/watch?v=KyordYB3BOs&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=12)\n- [@video@CSE373 2020 - Lecture 13 - Minimum Spanning Trees](https://www.youtube.com/watch?v=oolm2VnJUKw&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=13)\n- [@video@CSE373 2020 - Lecture 14 - Minimum Spanning Trees (cont)](https://www.youtube.com/watch?v=RktgPx0MarY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=14)\n- [@video@CSE373 2020 - Lecture 15 - Graph Algorithms (cont 2)](https://www.youtube.com/watch?v=MUe5DXRhyAo&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=15)\n- [@video@6.006 Single-Source Shortest Paths Problem](https://www.youtube.com/watch?v=Aa2sqUhIn-E&index=15&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb)\n",
    "graphql@DeE_dZecLmKCjePovTfFS": "# GraphQL\n\nGraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated GraphQL Roadmap](https://roadmap.sh/graphql)\n- [@official@GraphQL](https://graphql.org/)\n- [@official@GraphQL Documentation](https://graphql.org/learn/)\n- [@article@Apollo GraphQL Tutorials](https://www.apollographql.com/tutorials/)\n- [@feed@Explore top posts about GraphQL](https://app.daily.dev/tags/graphql?ref=roadmapsh)\n",
    "grpc@M4vdwAbjLPrLjWUsG_P1I": "# gRPC\n\ngRPC is a platform agnostic serialization protocol that is used to communicate between services. Designed by Google in 2015, it is a modern alternative to REST APIs. It is a binary protocol that uses HTTP/2 as a transport layer. It is a high performance, open source, general-purpose RPC framework that puts mobile and HTTP/2 first.\n\nIt's main use case is for communication between two different languages within the same application. You can use Python to communicate with Go, or Java to communicate with C#.\n\ngRPC uses the protocol buffer language to define the structure of the data that is\n\nVisit the following resources to learn more:\n\n- [@official@gRPC Website](https://grpc.io/)\n- [@official@gRPC Introduction](https://grpc.io/docs/what-is-grpc/introduction/)\n- [@official@gRPC Core Concepts](https://grpc.io/docs/what-is-grpc/core-concepts/)\n- [@video@Stephane Maarek - gRPC Introduction](https://youtu.be/XRXTsQwyZSU)\n- [@feed@Explore top posts about gRPC](https://app.daily.dev/tags/grpc?ref=roadmapsh)\n",
    "hash-table@G2dN2FO0SN_I-5AhO_EUk": "# Hash Table\n\nHash Table, Map, HashMap, Dictionary or Associative are all the names of the same data structure. It is one of the most commonly used data structures.\n\nVisit the following resources to learn more:\n\n- [@article@Hash Tables - Princeton University](https://algs4.cs.princeton.edu/34hash/)\n- [@video@Hash Table | Illustrated Data Structures](https://www.youtube.com/watch?v=jalSiaIi8j4)\n- [@video@Hash Table in 4 Minutes](https://youtu.be/knV86FlSXJ8)\n- [@video@Hashing with Chaining](https://www.youtube.com/watch?v=0M_kIqhwbFo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=9)\n- [@video@(Advanced) Randomization: Universal & Perfect Hashing](https://www.youtube.com/watch?v=z0lJ2k0sl1g&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=11)\n- [@video@(Advanced) Perfect hashing](https://www.youtube.com/watch?v=N0COwN14gt0&list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&index=4)\n",
    "hashing--encryption--encoding@7r7o8pYhFHVAJIv0wNT6X": "# Hashing/Encryption/Encoding\n\nHashing is a one-way function that takes an input and produces a fixed-length output. The output is called a hash. The hash is a unique representation of the input. The hash is deterministic, meaning that the same input will always produce the same hash. The hash is irreversible, meaning that it is impossible to go from the hash back to the original input. The hash is not collision-resistant, meaning that it is possible to find two different inputs that produce the same hash.\n\nEncryption is a two-way function that takes an input and produces an output. The output is called ciphertext. The ciphertext is a unique representation of the input. The ciphertext is deterministic, meaning that the same input will always produce the same ciphertext. The ciphertext is reversible, meaning that it is possible to go from the ciphertext back to the original input. The ciphertext is collision-resistant, meaning that it is impossible to find two different inputs that produce the same ciphertext.\n\nEncoding is a two-way function that takes an input and produces an output. The output is called encoded text. The encoded text is a unique representation of the input. The encoded text is deterministic, meaning that the same input will always produce the same encoded text. The encoded text is reversible, meaning that it is possible to go from the encoded text back to the original input. The encoded text is collision-resistant, meaning that it is impossible to find two different inputs that produce the same encoded text.\n\nVisit the following resources to learn more:\n\n- [@video@Encoding, Encryption and Hashing -- Whats the Difference?](https://www.youtube.com/watch?v=-bAnBzvMLig)\n- [@feed@Explore top posts about Encryption](https://app.daily.dev/tags/encryption?ref=roadmapsh)\n",
    "hashing-algorithms@EX_e4B6G07zTb4JjJ7482": "# Hashing Algorithms\n\nHashing algorithms are used to generate a unique value for a given input. This value is called a hash. Hashing algorithms are used to verify the integrity of data, to store passwords, and to generate unique identifiers for data.\n\nVisit the following resources to learn more:\n\n- [@article@Hashing Algorithm Overview:](https://www.okta.com/identity-101/hashing-algorithms/)\n- [@video@Hashing Algorithms and Security - Computerphile](https://www.youtube.com/watch?v=b4b8ktEV4Bg)\n- [@video@Top Hashing Algorithms In Cryptography | MD5 and SHA 256 Algorithms Expalined | Simplilearn](https://www.youtube.com/watch?v=Plp4F3ZfC7A)\n- [@video@SHA: Secure Hashing Algorithm - Computerphile](https://www.youtube.com/watch?v=DMtFhACPnTY)\n- [@feed@Explore top posts about Algorithms](https://app.daily.dev/tags/algorithms?ref=roadmapsh)\n",
    "heap-sort@CovrRsBY-sYW_xSegcN6N": "# Heap Sort\n\nHeap sort is a comparison based sorting algorithm. It is similar to selection sort where we first find the maximum element and place the maximum element at the end. We repeat the same process for remaining element.\n\nVisit the following resources to learn more:\n\n- [@article@Heap Sort Algorithm](https://www.programiz.com/dsa/heap-sort)\n- [@video@Heap Sort in 4 Minutes](https://www.youtube.com/watch?v=2DmK_H7IdTo)\n- [@video@Heap Sort Algorithm - MIT](https://www.youtube.com/watch?v=odNJmw5TOEE&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3291s)\n- [@course@Heap Sort Algorithm](https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO)\n- [@video@Lecture 4 - Heaps and Heap Sort](https://www.youtube.com/watch?v=B7hVxCmfPtM&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=5)\n",
    "heap@pw3ZCC3HKU7D5SQwte4vE": "# Heap\n\nHeap is a tree-based data structure that follows the properties of a complete binary tree and is either a Min Heap or a Max Heap.\n\nVisit the following resources to learn more:\n\n- [@article@Heap Data Structure](https://www.programiz.com/dsa/heap-data-structure)\n- [@article@CS 61B Lecture 24: Priority Queues](https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE)\n- [@video@Heap | Illustrated Data Structures](https://www.youtube.com/watch?v=F_r0sJ1RqWk)\n- [@video@Heaps and Heap Sort](https://www.youtube.com/watch?v=B7hVxCmfPtM&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=5)\n- [@course@Priority Queue - Introduction](https://www.coursera.org/lecture/data-structures/introduction-2OpTs)\n",
    "horizontal-vs-vertical-scaling@-34WGppX6QC5fkCvfCghp": "# Horizontal vs Vertical Scaling\n\nHorizontal scaling is the process of adding more machines to your system. This is also known as scaling out. Vertical scaling is the process of adding more power to a single machine. This is also known as scaling up.\n\nVisit the following resources to learn more:\n\n- [@article@Scaling Horizontally vs. Scaling Vertically](https://www.digitalocean.com/resources/article/horizontal-scaling-vs-vertical-scaling)\n- [@video@System Design Basics: Horizontal vs. Vertical Scaling](https://www.youtube.com/watch?v=xpDnVSmNFX0)\n- [@video@Vertical vs. Horizontal Scaling for Database Servers](https://www.youtube.com/watch?v=R99R-SNbo9g)\n",
    "how-computers-calculate@GDLKJkKgB-i7n0YcV2NDa": "# How Computers Calculate?\n\nComputers calculate using the binary system, where all data is represented as 0s and 1s. These binary states correspond to the ON/OFF positions of transistors, which are the building blocks of logic gates (AND, OR, NOT). Numbers, characters, and instructions are broken into binary sequences (bits), and grouped into bytes (8 bits). Arithmetic operations like addition are performed through logic gates, which combine binary values. The CPU executes these calculations by following a fetch-decode-execute cycle. Complex calculations, such as handling decimals, use floating-point representation. Programs written in high-level languages are compiled into machine code for the CPU to execute.\n\nVisit the following resources to learn more:\n\n- [@article@How Does A Computer Calculate Numbers?](https://www.sciencing.com/computer-calculate-numbers-4705975/)\n- [@video@How Computers Calculate - ALU](https://youtu.be/1I5ZMmrOfnA)\n",
    "how-computers-work@-emdKpD5uRNuvem5rbFXJ": "# How Computers Work?\n\nComputers are everywhere. They are in our phones, our cars, our homes, and even in our pockets. But how do they actually work? How do they take in information, and how do they output information?\n\nVisit the following resources to learn more:\n\n- [@video@How CPU Executes A Program](https://www.youtube.com/watch?v=XM4lGflQFvA)\n- [@video@How Computers Calculate - ALU](https://youtu.be/1I5ZMmrOfnA)\n- [@video@Registers and RAM](https://youtu.be/fpnE6UAfbtU)\n- [@video@The Central Processing Unit (CPU)](https://youtu.be/FZGugFqdr60)\n- [@video@Instructions and Programs](https://youtu.be/zltgXvg6r3k)\n",
    "how-cpu-executes-programs@1eglba39q426Nh0E0qcdj": "# How CPU Executes Programs?\n\nThe CPU executes programs by repeatedly fetching instructions from memory, decoding them to understand the operation, and then executing those operations. This cycle, called the fetch-decode-execute cycle, continues for each instruction in the program, with the CPU using registers for temporary storage and a program counter to keep track of the next instruction. Modern CPUs use techniques like pipelining and caches to speed up this process, enabling them to execute complex programs efficiently.\n\nVisit the following resources to learn more:\n\n- [@video@How CPU Executes a Program](https://www.youtube.com/watch?v=XM4lGflQFvA)\n- [@feed@Explore top posts about Computing](https://app.daily.dev/tags/computing?ref=roadmapsh)\n",
    "http@2tUwl-br-SRuwADSzmQag": "# HTTP?\n\nHTTP is the `TCP/IP` based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet.\n\nVisit the following resources to learn more:\n\n- [@article@Everything you need to know about HTTP](https://cs.fyi/guide/http-in-depth)\n- [@article@What is HTTP?](https://www.cloudflare.com/en-gb/learning/ddos/glossary/hypertext-transfer-protocol-http/)\n- [@article@An overview of HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)\n- [@article@HTTP/3 From A To Z: Core Concepts](https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/)\n- [@video@HTTP/1 to HTTP/2 to HTTP/3](https://www.youtube.com/watch?v=a-sBfyiXysI)\n- [@video@HTTP Crash Course & Exploration](https://www.youtube.com/watch?v=iYM2zFP3Zn0)\n",
    "huffman-coding@QrcijPiVT3bgqfkF-6ssi": "# Huffman Coding\n\nHuffman coding is a lossless data compression algorithm. The idea is to assign variable-length codes to input characters, lengths of the assigned codes are based on the frequencies of corresponding characters. The most frequent character gets the smallest code and the least frequent character gets the largest code.\n\nVisit the following resources to learn more:\n\n- [@article@Huffman Coding](https://www.programiz.com/dsa/huffman-coding)\n- [@video@Huffman Coding - Greedy Method](https://www.youtube.com/watch?v=co4_ahEDCho)\n",
    "in-order-traversal@KTrgf14Q6rg2f0v4dqq2s": "# In-Order Traversal\n\nIn-order traversal is a tree traversal algorithm that visits the left subtree, the root, and then the right subtree. This is the most common way to traverse a binary search tree. It is also used to create a sorted list of nodes in a binary search tree.\n\nVisit the following resources to learn more:\n\n- [@article@Tree Traversal Techniques](https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/)\n- [@video@Tree | Illustrated Data Structures](https://www.youtube.com/watch?v=S2W3SXGPVyU)\n",
    "indexes@BEbsUA39kZ5itqCwD585f": "# Database Indexes\n\nAn index is a data structure that you build and assign on top of an existing table that basically looks through your table and tries to analyze and summarize so that it can create shortcuts.\n\nVisit the following resources to learn more:\n\n- [@article@Database Indexes Explained](https://www.essentialsql.com/what-is-a-database-index/)\n- [@video@Database Indexing Explained](https://www.youtube.com/watch?v=-qNSXK7s7_w)",
    "insertion-sort@ujDCW6zZE8dV_fpNf-oIl": "# Insertion Sort\n\nInsertion sort is a simple sorting algorithm that builds the final sorted array one item at a time by comparisons. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.\n\nVisit the following resources to learn more:\n\n- [@article@Insertion Sort](https://www.programiz.com/dsa/insertion-sort)\n- [@video@Insertion Sort — MIT](https://www.youtube.com/watch?v=Kg4bqzAqRBM&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=4)\n- [@video@Insertion Sort in 3 Minutes](https://www.youtube.com/watch?v=JU767SDMDvA)\n",
    "instructions-and-programs@AxiGqbteK7ZSXEUt_zckH": "# Instructions and Programs\n\nInstructions are the most basic commands a CPU can understand, directing it to perform specific actions like adding numbers or moving data. A program, on the other hand, is a collection of these instructions, organized in a sequence to accomplish a particular task.  Think of instructions as individual words and a program as a complete sentence or story; the CPU executes these instructions one by one, following the program's logic, to achieve the desired outcome.\n\nVisit the following resources to learn more:\n\n- [@article@Instruction and Programs](https://nerdfighteria.info/v/zltgXvg6r3k/)\n- [@video@Instructions and Programs](https://youtu.be/zltgXvg6r3k)",
    "java@1lQSUFrrIGq19nUnM92-I": "# Java\n\nJava is general-purpose language, primarily used for Internet-based applications.\nIt was created in 1995 by James Gosling at Sun Microsystems and is one of the most popular options for backend developers.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Java Roadmap](https://roadmap.sh/java)\n- [@official@Java](https://www.java.com/)\n- [@video@Java Crash Course](https://www.youtube.com/watch?v=eIrMbAQSU34)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "k-ary--m-ary-tree@UOYeM-hqIKCrB9hGez4Q_": "# N-ary (K-ary, M-ary) Trees\n\nNote: the N or K is the branching factor (max branches)\n\nBinary trees are a 2-ary tree, with branching factor = 2\n\n2-3 trees are 3-ary\n\nVisit the following resources to learn more:\n\n- [@article@K-Ary Tree](https://en.wikipedia.org/wiki/K-ary_tree)\n",
    "k-d-trees@C1eNsPjiQo8INbvL2Lt7L": "# K-D Trees\n\nK-D Trees are a data structure that allow for fast nearest neighbor search in high dimensional spaces. They are a generalization of binary search trees, and are used in a variety of applications, including computer vision and computational geometry.\n\nVisit the following resources to learn more:\n\n- [@video@K-D Tree Algorithm](https://www.youtube.com/watch?v=Y4ZgLlDfKDg)\n- [@video@K-d Trees - Computerphile](https://www.youtube.com/watch?v=BK5x7IUTIyU)\n",
    "knapsack-problem@yHeCRPhfAOWiggZeUHPU9": "# Knapsack Problem\n\nKnapSack Problem is a classic problem in computer science. It is a problem in which we are given a set of items, each with a weight and a value, and we need to determine which items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\n\nVisit the following resources to learn more:\n\n- [@article@How to solve the Knapsack Problem with dynamic programming](https://medium.com/@fabianterh/how-to-solve-the-knapsack-problem-with-dynamic-programming-eb88c706d3cf)\n- [@video@3.1 Knapsack Problem - Greedy Method](https://www.youtube.com/watch?v=oTTzNMHM05I)\n",
    "knuth-morris-pratt@8abFKMfaV9H8F38I0DcMT": "# Knuth Morris Pratt\n\nKnuth morris pratt is a string searching algorithm that uses a precomputed array to find the substring in a string. This array is known as the prefix function. The prefix function is the longest prefix that is also a suffix of a substring. The prefix function is used to skip the characters that are already matched. The algorithm is as follows:\n\n- Compute the prefix function of the substring.\n- Traverse through the string and substring simultaneously.\n- If the characters match, increment the index of both the string and substring.\n- If the characters don't match, increment the index of the string by the value of the prefix function at the index of the substring.\n\nVisit the following resources to learn more:\n\n- [@video@9.1 Knuth-Morris-Pratt KMP String Matching Algorithm](https://www.youtube.com/watch?v=V5-7GzOfADQ)\n- [@course@Knuth-Morris Pratt](https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt)\n",
    "kruskals-algorithm@Wqhg7E-lOz1oNcRXjUej8": "# Kruskal's algorithm\n\nKruskal's algorithm is a greedy algorithm that finds a minimum spanning tree for a connected weighted graph. It is a minimum spanning tree algorithm that takes a graph as input and finds the subset of the edges of that graph which form a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. If the graph is not connected, then it finds a minimum spanning forest (a minimum spanning tree for each connected component).\n\nVisit the following resources to learn more:\n\n- [@video@Kruskals Algorithm in 2 Minutes](https://www.youtube.com/watch?v=71UQH7Pr9kU)\n- [@video@Graph Algorithms II - DFS, BFS, Kruskals Algorithm, Union Find Data Structure - Lecture 7](https://www.youtube.com/watch?v=ufj5_bppBsA\\&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\\&index=8)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "lfu-cache@n11ujPI3of-52l2KW2CDQ": "# LFU Cache\n\nLFU Cache is a data structure that stores key-value pairs. It has a fixed size and when it is full, it removes the least frequently used key-value pair. It is a variation of the LRU Cache and is used in many applications such as caching web pages, caching database queries, and caching images.\n\nVisit the following resources to learn more:\n\n- [@article@Least Frequently Used (LFU) Cache Implementation](https://www.geeksforgeeks.org/least-frequently-used-lfu-cache-implementation/)\n- [@article@1117. Data Structure - LFU Cache](https://jojozhuang.github.io/algorithm/data-structure-lfu-cache/)\n",
    "linear-search@XwyqBK9rgP1MMcJrdIzm5": "# Linear Search\n\nLinear search is a very simple algorithm that is used to search for a value in an array. It sequentially checks each element of the array until a match is found or until all the elements have been searched.\n\nVisit the following resources to learn more:\n\n- [@article@Linear Search](https://www.programiz.com/dsa/linear-search)",
    "linear@jymhjv8GiFALQpox6aZeu": "# Linear\n\nLinear algorithms are algorithms that have a runtime that is directly proportional to the size of the input. This means that the runtime of the algorithm will increase linearly with the size of the input. For example, if the input size is 10, the runtime will be 10 times the runtime of the algorithm when the input size is 1. If the input size is 100, the runtime will be 100 times the runtime of the algorithm when the input size is 1.\n\nVisit the following resources to learn more:\n\n- [@article@Linear Search Algorithm](https://www.geeksforgeeks.org/linear-search/)\n- [@video@Big O Notation — Calculating Time Complexity](https://www.youtube.com/watch?v=Z0bH0cMY0E8)\n- [@video@Big O Notations](https://www.youtube.com/watch?v=V6mKVRU1evU)\n",
    "linked-list@gr8BK6vq4AVwp_aUozZmf": "# Linked Lists\n\nArrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index. Linked lists are less rigid in their storage structure and elements are usually not stored in contiguous locations, hence they need to be stored with additional tags giving a reference to the next element. This difference in the data storage scheme decides which data structure would be more suitable for a given situation.\n\nVisit the following resources to learn more:\n\n- [@video@Linked List Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=odW9FU8jPRQ)\n- [@video@Linked Lists in 4 minutes](https://www.youtube.com/watch?v=F8AbOfQwl1c)\n- [@course@Singly Linked Lists](https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK)\n- [@video@CS 61B Lecture 7: Linked Lists I](https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0)\n- [@video@CS 61B Lecture 7: Linked Lists II](https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w)\n- [@course@Core: Linked Lists vs Arrays](https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9)\n- [@course@In the Real World: Linked Lists vs Arrays](https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd)\n- [@video@Why you should avoid Linked Lists?](https://www.youtube.com/watch?v=YQs6IC-vgmo)\n- [@course@Doubly Linked Lists](https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD)\n",
    "little-endian@rD_5n5bjiNMVC0cPhEVyG": "# Little Endian\n\nLittle Endian is a way of storing data in memory. It is the opposite of Big Endian. In Little Endian, the least significant byte is stored first. In Big Endian, the most significant byte is stored first.\n\nVisit the following resources to learn more:\n\n- [@video@Big Endian vs Little Endian](https://www.youtube.com/watch?v=JrNF0KRAlyo)\n- [@video@Endianness Explained With an Egg - Computerphile](https://www.youtube.com/watch?v=NcaiHcBvDR4)\n",
    "load-balancing@xDiS0HmrEoPjkQg9x2O3o": "# Load Balancing\n\nLoad balancing is the process of distributing network or application traffic across a cluster of servers. Load balancing is used to improve responsiveness and reliability of applications, maximize throughput, minimize response time, and avoid overload of any single server.\n\nVisit the following resources to learn more:\n\n- [@article@What is Load Balancing? | How load balancers work](https://www.cloudflare.com/learning/performance/what-is-load-balancing/)\n- [@video@Load Balancers 101](https://www.youtube.com/watch?v=galcDRNd5Ow)\n- [@video@What is Load Balancing?](https://www.youtube.com/watch?v=gGLophKzJs8)\n",
    "lock--mutex--semaphore@O6-vG3FuoYet4D0hbiyrv": "# Lock / Mutex / Semaphore\n\nA lock allows only one thread to enter the part that's locked and the lock is not shared with any other processes.\n\nA mutex is the same as a lock but it can be system wide (shared by multiple processes).\n\nA semaphore does the same as a mutex but allows x number of threads to enter, this can be used for example to limit the number of cpu, io or ram intensive tasks running at the same time.\n\nVisit the following resources to learn more:\n\n- [@article@What is the difference between lock, mutex and semaphore?](https://stackoverflow.com/questions/2332765/what-is-the-difference-between-lock-mutex-and-semaphore)\n- [@article@What is a Semaphore](https://stackoverflow.com/questions/34519/what-is-a-semaphore/40238#40238)\n",
    "locking@_sm63rZNKoibVndeNgOpW": "# Locking\n\nLocks are used to prevent data from being modified by multiple processes at the same time. This is important because if two processes are modifying the same data at the same time, the data can become corrupted. Locks are used to prevent this from happening.\n\nVisit the following resources to learn more:\n\n- [@article@Locking in Databases and Isolation Mechanisms](https://medium.com/inspiredbrilliance/what-are-database-locks-1aff9117c290)\n- [@article@Understanding Database Lock Timeouts and Deadlocks](https://www.dbta.com/Columns/DBA-Corner/Understanding-Database-Lock-Timeouts-and-Deadlocks-148659.aspx)\n- [@video@Row-Level Database Locks Explained - (Read vs Exclusive)](https://www.youtube.com/watch?v=nuBi2XbHH18)\n",
    "logarithmic@nnlMNkQn1HU4U9yPbV9kQ": "# Logarithmic\n\nLogarithmic complexity algorithms are the second fastest algorithms. They are faster than linear algorithms, but slower than constant algorithms.\n\nVisit the following resources to learn more:\n\n- [@video@Big O Notation — Calculating Time Complexity](https://www.youtube.com/watch?v=Z0bH0cMY0E8)\n- [@video@Big O Notations](https://www.youtube.com/watch?v=V6mKVRU1evU)\n",
    "long-polling@XeJi6TwpI5Uaszj00Uv_2": "# Long Polling\n\nLong polling is a technique used to implement server push functionality over HTTP. It is a method of opening a request on the server and keeping it open until an event occurs, at which point the server responds. This is in contrast to a regular HTTP request, where the server responds immediately with whatever data is available at the time.\n\nVisit the following resources to learn more:\n\n- [@article@Long Polling](https://javascript.info/long-polling)\n- [@article@What are Long-Polling, Websockets, Server-Sent Events (SSE) and Comet?](https://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet)\n",
    "longest-path-problem@4QVVYjDODMWsjnrE-4UBs": "# Longest Path Problem\n\nLongest path problem is a problem that asks us to find the longest path in a graph.\n\nVisit the following resources to learn more:\n\n- [@video@Shortest/Longest path on a Directed Acyclic Graph (DAG) | Graph Theory](https://www.youtube.com/watch?v=TXkDpqjDMHA)\n- [@video@Longest Simple Path - Intro to Algorithms](https://www.youtube.com/watch?v=lRH0tax5dFA)\n",
    "lru-cache@cEsboPT8nLvo0Zt0_oBq6": "# LRU Cache\n\nLRU cache is a cache that evicts the least recently used item first. It is a very common cache algorithm. It is used in many places, such as in the browser cache, the database cache, and the cache of the operating system.\n\nVisit the following resources to learn more:\n\n- [@video@The Magic of LRU Cache (100 Days of Google Dev)](https://www.youtube.com/watch?v=R5ON3iwx78M)\n- [@video@Implementing LRU - Udacity](https://www.youtube.com/watch?v=bq6N7Ym81iI)\n- [@video@LeetCode | 146 LRU Cache | C++ | Explanation](https://www.youtube.com/watch?v=8-FZRAjR7qU)\n",
    "maze-solving-problem@nODFT-i2YsxUVsgwWkIWn": "# Maze Solving Problem\n\nMaze solving problem is a classic problem in computer science. It is a problem where we have to find a path from a starting point to an end point in a maze. The maze is represented as a grid of cells. Each cell can be either a wall or a path. The path cells are connected to each other. The starting point and the end point are also given. The goal is to find a path from the starting point to the end point. The path can only be made up of path cells. The path cannot go through the wall cells.\n\nVisit the following resources to learn more:\n\n- [@opensource@Maze Solving Algorithms](https://github.com/john-science/mazelib/blob/main/docs/MAZE_SOLVE_ALGOS.md)\n- [@article@Maze Solving Algorithms](https://kidscodecs.com/maze-solving-algorithms/)\n- [@video@Maze Solving - Computerphile](https://www.youtube.com/watch?v=rop0W4QDOUI)\n- [@video@Python Maze Solving Tutorial (Using Recursion)](https://www.youtube.com/watch?v=XP94WC_XnZc)\n",
    "memory-management@jVsZFTzyrYEDyR8LiBQL0": "# Memory Management\n\nMemory management is the process of allocating and deallocating memory. It is a very important part of any programming language.\n\nVisit the following resources to learn more:\n\n- [@video@MIT 6.004 L15: The Memory Hierarchy](https://www.youtube.com/watch?v=vjYF_fAZI5E&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&index=24)\n- [@video@MIT 6.004 L16: Cache Issues](https://www.youtube.com/watch?v=ajgC3-pyGlk&index=25&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-)\n",
    "merge-sort@Bh-whDbcCjl3m6mRm9w02": "# Merge Sort\n\nMerge sort is a divide and conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The `merge()` function is used for merging two halves. The `merge(arr, l, m, r)` is key process that assumes that `arr[l..m]` and `arr[m+1..r]` are sorted and merges the two sorted sub-arrays into one.\n\nVisit the following resources to learn more:\n\n- [@article@Merge Sort Algorithm](https://www.programiz.com/dsa/merge-sort)\n- [@video@Merge Sort in 3 Minutes](https://www.youtube.com/watch?v=4VqmGXwpLqc)\n",
    "mfu-cache@hna0HLu0l4NTNNpyGqlW5": "# MFU Cache\n\nMFU Cache is another cache algorithm. The difference is that instead of deleting the least frequently used entry, the MFU Cache deletes the most frequently used entry.\n\nVisit the following resources to learn more:\n\n- [@article@Comparison of MFU and LRU page replacement algorithms](https://stackoverflow.com/questions/13597246/comparison-of-mfu-and-lru-page-replacement-algorithms)\n- [@article@Why does cache use Most Recently Used (MRU) algorithm as evict policy?](https://stackoverflow.com/questions/5088128/why-does-cache-use-most-recently-used-mru-algorithm-as-evict-policy)\n",
    "networking@zG5t3HqbZnh9CGRqp1Sb-": "# Networking\n\nNetworking is the process of connecting two or more computing devices together for the purpose of sharing data. In a data network, shared data may be as simple as a printer or as complex as a global financial transaction.\n\nIf you have networking experience or want to be a reliability engineer or operations engineer, expect questions from these topics. Otherwise, this is just good to know.\n\nVisit the following resources to learn more:\n\n- [@video@Computer Networking Course - Network Engineering](https://www.youtube.com/watch?v=qiQR5rTSshw)\n- [@article@Khan Academy - Networking](https://www.khanacademy.org/computing/code-org/computers-and-the-internet)\n- [@video@Networking Video Series (21 videos)](https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j)\n- [@feed@Explore top posts about Networking](https://app.daily.dev/tags/networking?ref=roadmapsh)\n",
    "non-tail-recursion@iLEOuQgUgU5Jc38iXDpp5": "# Non-tail recursion\n\nTail recursion is when a function can directly return the result of a recursive call - there are no outstanding operations, and there is no need for the call stack frame to be preserved. So it can be translated to a “goto with arguments”, and the stack usage will be constant.\n\nIn “non-tail recursion”, there are outstanding operations after the recursive call, and the stack frame cannot be nuked.\n\nVisit the following resources to learn more:\n\n- [@article@What is non-tail recursion?](https://www.quora.com/What-is-non-tail-recursion)\n- [@article@Tail vs Non-Tail Recursion](https://www.baeldung.com/cs/tail-vs-non-tail-recursion)\n- [@video@Recursion (Solved Problem 1)](https://www.youtube.com/watch?v=IVLUGb_gDDE)\n- [@video@Types of Recursion (Part 2) | Tail & Non-tail Recursion](https://www.youtube.com/watch?v=HIt_GPuD7wk)\n- [@feed@Explore top posts about Recursion](https://app.daily.dev/tags/recursion?ref=roadmapsh)\n",
    "normalization--denormalization@Rw7QjLC8hLtXSwmU_9kHC": "# Normalization vs Denormalization\n\nDatabase normalization is a process used to organize a database into tables and columns. The idea is that a table should be about a specific topic and that only those columns which support that topic are included. This limits the number of duplicate data contained within your database. This makes the database more flexible by eliminating issues stemming from database modifications.\n\nDenormalization is the opposite of normalization. It is the process of adding redundant data to a database to improve read performance. This is done by adding duplicate data into multiple tables to avoid expensive joins. This is done at the expense of increased storage and decreased write performance.\n\nVisit the following resources to learn more:\n\n- [@video@Normalization vs. Denormalization | Events and Event Streaming](https://www.youtube.com/watch?v=sDU94hraq8g)\n- [@video@Normalization - 1NF, 2NF, 3NF and 4NF](https://www.youtube.com/watch?v=UrYLYV7WSHM)\n",
    "np-complete@Lwkz7qozXRlVNA20zJbSw": "# NP Complete\n\nA problem is NP-complete if it is both NP and NP-hard. NP-complete problems are the hard problems in NP.\n\nVisit the following resources to learn more:\n\n- [@article@Trying to understand P vs NP vs NP Complete vs NP Hard](https://softwareengineering.stackexchange.com/questions/308178/trying-to-understand-p-vs-np-vs-np-complete-vs-np-hard)\n- [@video@Complexity: P, NP, NP-completeness, Reductions](https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22)\n- [@video@P vs. NP and the Computational Complexity Zoo](https://www.youtube.com/watch?v=YX40hbAHx3s)\n- [@video@Greedy Algs. II & Intro to NP Completeness](https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939)\n- [@video@NP Completeness II & Reductions](https://www.youtube.com/watch?v=e0tGC6ZQdQE&index=16&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n- [@video@NP Completeness III](https://www.youtube.com/watch?v=fCX1BGT3wjE&index=17&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n- [@video@NP Completeness IV](https://www.youtube.com/watch?v=NKLDp3Rch3M&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=18)\n",
    "np-hard@mJJ8DGUpBuHEJ7I6UTy1T": "# NP-Hard\n\nAn NP-hard problem is at least as hard as the hardest problem in NP and it is the class of the problems such that every problem in NP reduces to NP-hard.\n\nVisit the following resources to learn more:\n\n- [@article@Trying to understand P vs NP vs NP Complete vs NP Hard](https://softwareengineering.stackexchange.com/questions/308178/trying-to-understand-p-vs-np-vs-np-complete-vs-np-hard)\n- [@video@Complexity: P, NP, NP-completeness, Reductions](https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22)\n- [@video@Complexity: Approximation Algorithms](https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24)\n- [@video@Complexity: Fixed-Parameter Algorithms](https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n- [@video@Lecture 23: Computational Complexity](https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=24)\n- [@video@Greedy Algs. II & Intro to NP Completeness](https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939)\n- [@video@NP Completeness II & Reductions](https://www.youtube.com/watch?v=e0tGC6ZQdQE&index=16&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n- [@video@NP Completeness III](https://www.youtube.com/watch?v=fCX1BGT3wjE&index=17&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n- [@video@NP Completeness IV](https://www.youtube.com/watch?v=NKLDp3Rch3M&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=18)\n",
    "np@ewXUHpOnjm8YrLhce1dAQ": "# NP\n\nThe NP in NP class stands for Non-deterministic Polynomial Time. It is the collection of decision problems that can be solved by a non-deterministic machine in polynomial time.\n\nVisit the following resources to learn more:\n\n- [@article@Trying to understand P vs NP vs NP Complete vs NP Hard](https://softwareengineering.stackexchange.com/questions/308178/trying-to-understand-p-vs-np-vs-np-complete-vs-np-hard)\n- [@video@Complexity: P, NP, NP-completeness, Reductions](https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22)\n- [@video@Complexity: Approximation Algorithms](https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24)\n- [@video@Complexity: Fixed-Parameter Algorithms](https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n- [@video@Lecture 23: Computational Complexity](https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=24)\n- [@video@Greedy Algs. II & Intro to NP Completeness](https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939)\n- [@video@NP Completeness II & Reductions](https://www.youtube.com/watch?v=e0tGC6ZQdQE&index=16&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n- [@video@NP Completeness III](https://www.youtube.com/watch?v=fCX1BGT3wjE&index=17&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm)\n- [@video@NP Completeness IV](https://www.youtube.com/watch?v=NKLDp3Rch3M&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=18)\n",
    "null-object-pattern@PpFQ0zmObZLvmBvqhTEMz": "# Null Object Pattern\n\nNull object pattern is a design pattern that is used to represent a null value with an object. It is a way to avoid null reference exceptions by providing a default object that does nothing. It is a way to provide a default behavior in case data is not available.\n\nVisit the following resources to learn more:\n\n- [@article@Design Patterns - Null Object Pattern](https://www.tutorialspoint.com/design_pattern/null_object_pattern.htm)\n",
    "osi-model@pZ5x_zDYGzW9VxYycyXtN": "# OSI and TCP/IP Models\n\nThe OSI and TCP/IP model is used to help the developer to design their system for interoperability. The OSI model has 7 layers while the TCP/IP model has a more summarized form of the OSI model only consisting 4 layers. This is important if you're trying to design a system to communicate with other systems.\n\nVisit the following resources to learn more:\n\n- [@article@Cloudflare - What is the OSI model](https://www.cloudflare.com/learning/ddos/glossary/open-systems-interconnection-model-osi/)\n- [@video@TCP/IP and the OSI Model Explained!](https://www.youtube.com/watch?v=e5DEVa9eSN0)\n",
    "owasp-top-10@3rPSp135TdSCyvXzEzn4p": "# OWASP\n\nOWASP or Open Web Application Security Project is an online community that produces freely-available articles, methodologies, documentation, tools, and technologies in the field of web application security.\n\nVisit the following resources to learn more:\n\n- [@official@OWASP](https://owasp.org/)\n- [@article@OWASP - Wiki](https://en.wikipedia.org/wiki/OWASP)\n- [@opensource@OWASP Web Application Security Testing Checklist](https://github.com/0xRadi/OWASP-Web-Checklist)\n- [@article@OWASP Top 10 Security Risks](https://sucuri.net/guides/owasp-top-10-security-vulnerabilities-2021/)\n- [@article@OWASP Cheatsheets](https://cheatsheetseries.owasp.org/cheatsheets/AJAX_Security_Cheat_Sheet.html)\n",
    "p--np@0btHNkzWL1w_-pUgU_k2y": "# P = NP\n\nThe P = NP problem is one of the most famous problems in computer science. It asks whether a problem that can be solved in polynomial time on a non-deterministic machine (i.e., the problem is in NP) can also be solved in polynomial time on a deterministic machine (i.e., the problem is in P).\n\nIf you can find a polynomial-time solution to an NP-complete problem, then all problems in NP can be solved in polynomial time. This shows that P = NP.\n\nIf you can prove for any single NP-complete problem that it is only solvable in exponential time, then all NP-complete problems are only solvable in exponential time. This shows that P ≠ NP.\n\nSo far, we don't know whether P = NP or P ≠ NP.\n\nVisit the following resources to learn more:\n\n- [@article@Whats P=NP?, and why is it such a famous question?](https://stackoverflow.com/questions/111307/whats-p-np-and-why-is-it-such-a-famous-question)\n",
    "p@3aM17dPKNi8tRJsW8lesI": "# P\n\nThe P in the P class stands for Polynomial Time. It is the collection of decision problems(problems with a “yes” or “no” answer) that can be solved by a deterministic machine in polynomial time.\n\nVisit the following resources to learn more:\n\n- [@article@Trying to understand P vs NP vs NP Complete vs NP Hard](https://softwareengineering.stackexchange.com/questions/308178/trying-to-understand-p-vs-np-vs-np-complete-vs-np-hard)\n- [@video@Complexity: P, NP, NP-completeness, Reductions](https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22)\n- [@video@Complexity: Approximation Algorithms](https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24)\n- [@video@Complexity: Fixed-Parameter Algorithms](https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n- [@video@Lecture 23: Computational Complexity](https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=24)\n- [@video@Greedy Algs. II & Intro to NP Completeness](https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939)\n",
    "pacelc@g6HeyLptaAYx9QBKuHQyM": "# PACELC Theorem\n\nThe PACELC Theorem is an extension of the CAP Theorem. One of the questions that CAP Theorem wasn’t able to answer was “what happens when there is no Partition, What Logical Combination then a Distributed System have?“. So to answer this, In addition to Consistency, Availability, and Partition Tolerance it also includes Latency as one of the desired properties of a Distributed System. The acronym PACELC stands for Partitioned, Availability, Consistency Else Latency, Consistency.\n\nVisit the following resources to learn more:\n\n- [@article@PACELC Theorem](https://www.scylladb.com/glossary/pacelc-theorem/)\n",
    "pick-a-language@tU4Umtnfu01t9gLlnlK6b": "# Pick a Language\n\nYou need to pick a programming language to learn the Computer Science concepts. My personal recommendation would be to pick C++ or C and the reason for that is:\n\n- They allow you to deal with pointers and memory allocation/deallocation, so you feel the data structures and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that's terrific, but when you're learning how these low-level data structures are built, it's great to feel close to the metal.\n- You will be able to find a lot of resources for the topics listed in this roadmap using C or C++. You can find a lot of resources for Python and Java, but they are not as abundant as C++ and C.\n\nGiven below is the list of resources; pick ones relevant to the language of your choice.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated C++ Roadmap](https://roadmap.sh/cpp)\n- [@article@Learn C++ - Tutorials Point](https://www.tutorialspoint.com/cplusplus/index.htm)\n- [@video@C++ Programming Course - Beginner to Advanced](https://www.youtube.com/watch?v=8jLOx1hD3_o)\n- [@video@C++ Tutorial for Beginners - Full Course](https://www.youtube.com/watch?v=vLnPwxZdW4Y)\n- [@article@Learn C - Tutorials Point](https://www.tutorialspoint.com/cprogramming/index.htm)\n- [@video@C Programming Tutorial for Beginners](https://www.youtube.com/watch?v=KJgsSFOSQv0)\n- [@video@Learn C Programming with Dr. Chuck](https://www.youtube.com/watch?v=j-_s8f5K30I)\n",
    "polynomial@sVFvpsAO1_ZH9aliEj9aF": "# Polynomial\n\nPolynomial algorithms are algorithms that have a runtime that is a polynomial function of the input size. This means that the runtime is a function of the form `n^k` where `k` is a constant. For example, the runtime of the following algorithm is `n^2`:\n\n```python\ndef polynomial_algorithm(n):\n    for i in range(n):\n        for j in range(n):\n            print(i, j)\n```\n\nVisit the following resources to learn more:\n\n- [@video@Big O Notation — Calculating Time Complexity](https://www.youtube.com/watch?v=Z0bH0cMY0E8)\n- [@video@Big O Notations](https://www.youtube.com/watch?v=V6mKVRU1evU)\n",
    "post-order-traversal@4_oGXwjzSY5cX9n7L4iAA": "# Post-Order Traversal\n\nPost-order traversal is a type of tree traversal that visits the left subtree, then the right subtree, and finally the root node. This is the opposite of pre-order traversal, which visits the root node first, then the left subtree, and finally the right subtree.\n\nVisit the following resources to learn more:\n\n- [@article@Postorder Traversal of Binary Tree](https://www.geeksforgeeks.org/postorder-traversal-of-binary-tree/)\n- [@video@Tree | Illustrated Data Structures](https://www.youtube.com/watch?v=S2W3SXGPVyU)\n",
    "pre-order-traversal@psTN5N66xoFHFopgd5faW": "# Pre-Order Traversal\n\nPre-order traversal is a tree traversal algorithm that visits the root node first, then recursively traverses the left subtree, followed by the right subtree.\n\nVisit the following resources to learn more:\n\n- [@video@Tree | Illustrated Data Structures](https://www.youtube.com/watch?v=S2W3SXGPVyU)\n- [@video@Pre-order tree traversal in 3 minutes](https://www.youtube.com/watch?v=1WxLM2hwL-U)\n",
    "prims-algorithm@znpFIKwMJlepKJ8dH3kvC": "# Prim's Algorithm\n\nPrim's algorithm is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph. A minimum spanning tree is a subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight. A minimum spanning tree for a weighted undirected graph is also called a minimum weight spanning tree or minimum cost spanning tree.\n\nVisit the following resources to learn more:\n\n- [@video@Graph Algorithms I - Topological Sorting, Prims Algorithm - Lecture 6](https://www.youtube.com/watch?v=i_AQT_XfvD8\\&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\\&index=7)\n- [@article@Prims Algorithm](https://www.programiz.com/dsa/prim-algorithm)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "probability@HZ3_xyphbjhBPwwQo_rHH": "# Probability\n\nProbability is the study of how likely an event is to occur. It is a measure of how certain we are that an event will happen.\n\nVisit the following resources to learn more:\n\n- [@video@MIT 6.042J - Probability Introduction](https://www.youtube.com/watch?v=SmFwFdESMHI\\&index=18\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Conditional Probability](https://www.youtube.com/watch?v=E6FbvM-FGZ8\\&index=19\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Independence](https://www.youtube.com/watch?v=l1BCv3qqW4A\\&index=20\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Random Variables](https://www.youtube.com/watch?v=MOfhhFaQdjw\\&list=PLB7540DEDD482705B\\&index=21)\n- [@video@MIT 6.042J - Expectation I](https://www.youtube.com/watch?v=gGlMSe7uEkA\\&index=22\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Expectation II](https://www.youtube.com/watch?v=oI9fMUqgfxY\\&index=23\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Large Deviations](https://www.youtube.com/watch?v=q4mwO2qS2z4\\&index=24\\&list=PLB7540DEDD482705B)\n- [@video@MIT 6.042J - Random Walks](https://www.youtube.com/watch?v=56iFMY8QW2k\\&list=PLB7540DEDD482705B\\&index=25)\n- [@feed@Explore top posts about Statistics](https://app.daily.dev/tags/statistics?ref=roadmapsh)\n",
    "process-forking@RbdT5MOE4L-E7PPWKRITX": "# Process Forking\n\nProcess forking is a way to create a new process from an existing process. The new process is a copy of the existing process. The new process is called a child process and the existing process is called a parent process.\n\nVisit the following resources to learn more:\n\n- [@article@Fork System Call in Operating System](https://www.geeksforgeeks.org/fork-system-call-in-operating-system/)\n- [@video@Understanding fork() system call for new process creation](https://www.youtube.com/watch?v=PwxTbksJ2fo)\n- [@video@fork() and exec() System Calls](https://www.youtube.com/watch?v=IFEFVXvjiHY)\n- [@video@The fork() function in C](https://www.youtube.com/watch?v=cex9XrZCU14)\n",
    "processes-and-threads@ETEUA7jaEGyOEX8tAVNWs": "# Processes and Threads\n\nProcesses and threads are the basic building blocks of a computer program. They are the smallest units of execution in a program. A process is an instance of a program that is being executed. A thread is a sequence of instructions within a process that can be executed independently of other code.\n\nVisit the following resources to learn more:\n\n- [@article@Whats the difference between Process and a Thread?](https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread)\n- [@article@Operating Systems and System Programming](https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c)\n- [@video@25 hour Operating Systems Course - freecodecamp](https://youtu.be/yK1uBHPdp30?si=gGPdK7cM4KlP6Qq0)\n",
    "processes-vs-threads@IEX6v_MYpE5Ylk_28K2ZU": "# Processes and Threads\n\nProcesses and threads are the basic building blocks of a computer program. They are the smallest units of execution in a program. A process is an instance of a program that is being executed. A thread is a sequence of instructions within a process that can be executed independently of other code.\n\nVisit the following resources to learn more:\n\n- [@article@Whats the difference between Process and a Thread?](https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread)\n- [@article@Operating Systems and System Programming](https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c)\n",
    "proxy@qLLJ_ehC8tSRfXsorYMQz": "# Proxy\n\nA proxy server is an intermediary piece of hardware/software sitting between the client and the backend server. It receives requests from clients and relays them to the origin servers. Typically, proxies are used to filter requests, log requests, or sometimes transform requests (by adding/removing headers, encrypting/decrypting, or compression).\n\nVisit the following resources to learn more:\n\n- [@roadmap.sh@Proxy Servers](https://roadmap.sh/guides/proxy-servers)\n- [@article@Proxy - System Design](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo#proxy)\n",
    "public-key-cryptography@bDZ34BPm3lX06ERSE10cY": "# Public Key Cryptography\n\nPublic-key cryptography, or asymmetric cryptography, is the field of cryptographic systems that use pairs of related keys. Each key pair consists of a public key and a corresponding private key. Key pairs are generated with cryptographic algorithms based on mathematical problems termed one-way functions.\n\nVisit the following resources to learn more:\n\n- [@article@Public-key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography)\n- [@video@Public Key Cryptography - Computerphile](https://www.youtube.com/watch?v=GSIDS_lvRv4)\n- [@video@Public Key Cryptography: RSA Encryption Algorithm](https://www.youtube.com/watch?v=wXB-V_Keiu8)\n- [@feed@Explore top posts about Cryptography](https://app.daily.dev/tags/cryptography?ref=roadmapsh)\n",
    "python@RlKZzs44biQPgxD0tK1qx": "# Python\n\nPython is a well known programming language which is both a strongly typed and a dynamically typed language. Being an interpreted language, code is executed as soon as it is written and the Python syntax allows for writing code in functional, procedural or object-oriented programmatic ways.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Python Roadmap](https://roadmap.sh/python)\n- [@official@Python](https://www.python.org/)\n- [@official@Getting Started with Python](https://www.python.org/about/gettingstarted/)\n- [@article@Automate the Boring Stuff](https://automatetheboringstuff.com/)\n- [@article@Python principles - Python basics](https://pythonprinciples.com/)\n- [@article@Python Crash Course](https://ehmatthes.github.io/pcc/)\n- [@article@An Introduction to Python for Non-Programmers](https://thenewstack.io/an-introduction-to-python-for-non-programmers/)\n- [@article@Getting Started with Python and InfluxDB](https://thenewstack.io/getting-started-with-python-and-influxdb/)\n- [@feed@Explore top posts about Python](https://app.daily.dev/tags/python?ref=roadmapsh)\n",
    "queue@JI990pDX2jjNe6IH_Y_t0": "# Queue\n\nQueue is a linear collection of items where items are inserted and removed in a particular order. The queue is also called a FIFO Data Structure because it follows the \"First In, First Out\" principle i.e., the item that is inserted in the first is the one that is taken out first.\n\nVisit the following resources to learn more:\n\n- [@article@Circular Buffer - Wikipedia](https://en.wikipedia.org/wiki/Circular_buffer)\n- [@video@Queue Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=mDCi1lXd9hc)\n- [@video@Queue in 3 Minutes](https://www.youtube.com/watch?v=D6gu-_tmEpQ)\n- [@course@Queues - Coursera](https://www.coursera.org/lecture/data-structures/queues-EShpq)\n",
    "queues@LCPEzpyAuHY3ggN3nYrNN": "# Queues\n\nMessaging queues are a common way to decouple systems. They are used to decouple the producer of a message from the consumer of a message. This allows the producer to send a message and not have to wait for the consumer to process it. It also allows the consumer to process the message at their own pace.\n\nVisit the following resources to learn more:\n\n- [@article@Message Queues - System Design](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo#message-queues)\n- [@video@What is a Message Queue?](https://www.youtube.com/watch?v=xErwDaOc-Gs)\n- [@video@What is a Message Queue and Where is it used?](https://www.youtube.com/watch?v=oUJbuFMyBDk)\n",
    "quick-sort@be0Q8GW9ZX1JbPrBvbMji": "# Quick Sort\n\nQuick Sort is a divide and conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways.\n\nVisit the following resources to learn more:\n\n- [@article@Quick Sort Algorithm](https://www.programiz.com/dsa/quick-sort)\n- [@video@Quick Sort in 4 Minutes](https://www.youtube.com/watch?v=Hoixgm4-P4M&feature=youtu.be)\n- [@article@Quick Sort Implementation in C](http://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c)\n- [@opensource@Quick Sort Implementation in Python](https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py)\n",
    "rabin-karp-algorithm@l5--4opvZoc_seVn__5R3": "# Rabin-Karp's algorithm\n\nRabin-Karp algorithm is a string searching algorithm that uses hashing to find any one of a set of pattern strings in a text. For strings of average length `n`, it performs in `O(n+m)` time with `O(m)` space, where `m` is the length of the pattern. It is often used in bioinformatics to search for DNA patterns.\n\nVisit the following resources to learn more:\n\n- [@course@Rabin Karps Algorithm](https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw)\n- [@course@Optimization: Precomputation](https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation)\n- [@course@Optimization: Implementation and Analysis](https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis)\n- [@video@Lecture 9: Table Doubling, Karp-Rabin](https://www.youtube.com/watch?v=BRO7mVIFt08\\&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\\&index=9)\n- [@video@Rolling Hashes, Amortized Analysis](https://www.youtube.com/watch?v=w6nuXg0BISo\\&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\\&index=33)\n- [@feed@Explore top posts about Data Science](https://app.daily.dev/tags/data-science?ref=roadmapsh)\n",
    "red--black-trees@eOL0_SzxBn7_xhNcBDi2D": "# Red/Black Trees\n\nIn computer science, a red–black tree is a kind of self-balancing binary search tree. Each node stores an extra bit representing \"color\", used to ensure that the tree remains balanced during insertions and deletions.\n\nThese are a translation of a 2-3 tree (see below).\n\nIn practice: Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time. Not only does this make them valuable in time-sensitive applications such as real-time applications, but it makes them valuable building blocks in other data structures which provide worst-case guarantees; for example, many data structures used in computational geometry can be based on red–black trees, and the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java, the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor hashcodes, a Red-Black tree is used.\n\nVisit the following resources to learn more:\n\n- [@article@Red-Black Tree - Wikipedia](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree)\n- [@article@An Introduction To Binary Search And Red Black Tree](https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees)\n- [@video@Red-Black Trees (playlist) in 30 minutes](https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin)\n- [@video@Aduni - Algorithms - Lecture 4 (link jumps to starting point)](https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3871)\n- [@video@Aduni - Algorithms - Lecture 5](https://www.youtube.com/watch?v=hm2GHwyKF1o&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=5)\n",
    "registers-and-ram@U3379F4AO1KSmGtVmPr27": "# Registers and RAMs\n\n**_Registers_** are the smallest data-holding elements built into the processor itself. Registers are the memory locations that are directly accessible by the processor. The registers hold the instruction or operands currently accessed by the CPU.\n\nRegisters are the high-speed accessible storage elements. The processor accesses the registers within one CPU clock cycle. The processor can decode the instructions and perform operations on the register contents at more than one operation per CPU clock cycle.\n\n**_Memory_** is a hardware device that stores computer programs, instructions, and data. The memory that is internal to the processor is primary memory (RAM), and the memory that is external to the processor is secondary (**Hard Drive**).\n\nVisit the following resources to learn more:\n\n- [@article@RAM vs. Registers - What's the Difference?](https://thisvsthat.io/ram-vs-registers)\n- [@video@Registers and RAM](https://youtu.be/fpnE6UAfbtU)\n",
    "replication@WUEmEtlszbISSIWDKpvg6": "# Replication\n\nReplication is a process that involves sharing information to ensure consistency between redundant resources such as multiple databases, to improve reliability, fault-tolerance, or accessibility.\n\nVisit the following resources to learn more:\n\n- [@article@Database Replication](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo#database-replication)\n- [@article@Replication (computing)](https://en.wikipedia.org/wiki/Replication_(computing))\n",
    "rest@Kvz3Sn7L8CxP5ZXO1hlcU": "# REST\n\nREST, or REpresentational State Transfer, is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.\n\nVisit the following resources to learn more:\n\n- [@article@What is a REST API?](https://www.redhat.com/en/topics/api/what-is-a-rest-api)\n- [@article@Roy Fieldings dissertation chapter, Representational State Transfer (REST)](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)\n- [@article@Learn REST: A RESTful Tutorial](https://restapitutorial.com/)\n- [@feed@Explore top posts about REST API](https://app.daily.dev/tags/rest-api?ref=roadmapsh)\n",
    "robin-karp@Km5LvcJpyntrW2iA8h5e3": "# Rabin-Karp's algorithm\n\nRabin-Karp algorithm is a string searching algorithm that uses hashing to find any one of a set of pattern strings in a text. For strings of average length `n`, it performs in `O(n+m)` time with `O(m)` space, where `m` is the length of the pattern. It is often used in bioinformatics to search for DNA patterns.\n\nVisit the following resources to learn more:\n\n- [@course@Rabin Karps Algorithm](https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw)\n- [@course@Optimization: Precomputation](https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation)\n- [@course@Optimization: Implementation and Analysis](https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis)\n- [@video@Lecture 9: Table Doubling, Karp-Rabin](https://www.youtube.com/watch?v=BRO7mVIFt08&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=9)\n- [@video@Rolling Hashes, Amortized Analysis](https://www.youtube.com/watch?v=w6nuXg0BISo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=33)\n",
    "rust@1bDjg-KBDKRmE6f1MWY8l": "# Rust\n\nRust is a modern systems programming language focusing on safety, speed, and concurrency. It accomplishes these goals by being memory safe without using garbage collection.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Rust Roadmap](https://roadmap.sh/rust)\n- [@official@The Rust Programming Language - online book](https://doc.rust-lang.org/book/)\n- [@official@Rust by Example - collection of runnable examples](https://doc.rust-lang.org/stable/rust-by-example/index.html)\n- [@article@Rust vs. Go: Why They’re Better Together](https://thenewstack.io/rust-vs-go-why-theyre-better-together/)\n- [@article@Rust by the Numbers: The Rust Programming Language in 2021](https://thenewstack.io/rust-by-the-numbers-the-rust-programming-language-in-2021/)\n- [@feed@Explore top posts about Rust](https://app.daily.dev/tags/rust?ref=roadmapsh)\n",
    "scheduling-algorithms@Ge2nagN86ofa2y-yYR1lv": "# Scheduling Algorithms\n\nCPU Scheduling is the process of selecting a process from the ready queue and allocating the CPU to it. The selection of a process is based on a particular scheduling algorithm. The scheduling algorithm is chosen depending on the type of system and the requirements of the processes.\n\nHere is the list of some of the most commonly used scheduling algorithms:\n\n- **First Come First Serve (FCFS):** The process that arrives first is allocated the CPU first. It is a non-preemptive algorithm.\n- **Shortest Job First (SJF):** The process with the smallest execution time is allocated the CPU first. It is a non-preemptive algorithm.\n- **Shortest Remaining Time First (SRTF):** The process with the smallest remaining execution time is allocated the CPU first. It is a preemptive algorithm.\n- **Round Robin (RR):** The process is allocated the CPU for a fixed time slice. The time slice is usually 10 milliseconds. It is a preemptive algorithm.\n- **Priority Scheduling:** The process with the highest priority is allocated the CPU first. It is a preemptive algorithm.\n- **Multi-level Queue Scheduling:** The processes are divided into different queues based on their priority. The process with the highest priority is allocated the CPU first. It is a preemptive algorithm.\n- **Multi-level Feedback Queue Scheduling:** The processes are divided into different queues based on their priority. The process with the highest priority is allocated the CPU first. If a process is preempted, it is moved to the next queue. It is a preemptive algorithm.\n- **Highest Response Ratio Next(HRRN):** CPU is allotted to the next process which has the highest response ratio and not to the process having less burst time. It is a Non-Preemptive algorithm.\n- **Lottery Scheduling:** The process is allocated the CPU based on a lottery system. It is a preemptive algorithm.\n\nVisit the following resources to learn more:\n\n- [@article@CPU Scheduling in Operating System](https://www.scaler.com/topics/operating-system/cpu-scheduling/)",
    "search-pattern-in-text@L4M5yFRKKR2axKXGcIA7d": "# Search Pattern in Text\n\nSearching pattern in text is a very common task in computer science. It is used in many applications like spell checkers, text editors, and many more.\n\nVisit the following resources to learn more:\n\n- [@article@Pattern Searching](https://www.geeksforgeeks.org/pattern-searching/)\n- [@course@Search Pattern in Text](https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text)\n",
    "security@JnJbJtsqKbVETY2vdLqCO": "# Security\n\nWeb security refers to the protective measures taken by the developers to protect the web applications from threats that could affect the business.\n\nVisit the following resources to learn more:\n\n- [@video@MIT 6.858 Computer Systems Security, Fall 2014](https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)\n- [@article@Why HTTPS Matters](https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https)\n- [@article@Wikipedia - OWASP](https://en.wikipedia.org/wiki/OWASP)\n- [@opensource@OWASP Web Application Security Testing Checklist](https://github.com/0xRadi/OWASP-Web-Checklist)\n- [@article@OWASP Top 10 Security Risks](https://sucuri.net/guides/owasp-top-10-security-vulnerabilities-2021/)\n- [@article@OWASP Cheatsheets](https://cheatsheetseries.owasp.org/cheatsheets/AJAX_Security_Cheat_Sheet.html)\n- [@article@Content Security Policy (CSP)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)\n- [@feed@Explore top posts about Security](https://app.daily.dev/tags/security?ref=roadmapsh)\n",
    "selection-sort@rOsHFXQm5jNz0RyZQ5ZGs": "# Selection Sort\n\nSelection sort is a sorting algorithm that selects the smallest unsorted item in the list and swaps it with index 0, then finds the next smallest and places it into index 1 and so on.\n\nVisit the following resources to learn more:\n\n- [@article@Selection Sort](https://en.wikipedia.org/wiki/Selection_sort)\n- [@video@Selection Sort in 3 Minutes](https://www.youtube.com/watch?v=g-PGLbMth_g)\n- [@course@Selection Sort](https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT)\n",
    "sequence-diagrams@gaUT5K2xS-WQMrIA0Bkb_": "# Sequence Diagrams\n\nSequence diagrams are a way to show how objects or systems interact with each other over time.\n\nVisit the following resources to learn more:\n\n- [@video@How to Make a UML Sequence Diagram](https://www.youtube.com/watch?v=pCK6prSq8aw)\n- [@video@Sequence Diagrams Tutorial](https://www.youtube.com/watch?v=cxG-qWthxt4&list=PLfoY2ARMh0hBthB9VqsQzogSouTjzkMHe&index=2)\n",
    "sharding@3K65efPag2076dy-MeTg4": "# Sharding\n\nDatabase sharding is a method of distributing data across multiple machines. It is a horizontal scaling technique, as opposed to vertical scaling, which is scaling by adding more power to a single machine. Sharding is a common way to scale a database.\n\nVisit the following resources to learn more:\n\n- [@article@Sharding](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo#sharding)\n- [@video@Sharding & Database Partitioning | System Design Basics](https://www.youtube.com/watch?v=RynPj8C0BXA)\n- [@video@Database Sharding - Watch](https://www.youtube.com/watch?v=hdxdhCpgYo8)\n- [@video@Database Sharding in 5 minutes](https://www.youtube.com/watch?v=kSH4bt8ypOQ)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "short-polling@gGmNJ8dK28iqrlQHPz6md": "# Short Polling\n\nIn short polling, the client requests information from the server. The server processes the request. If data is available for the request, server responds to the request with the required information. However, if the server has no data available for the client, server returns an empty response. In both the situation, the connection will be closed after returning the response. Clients keep issuing new requests even after server sends the empty responses. This mechanism increases the network cost on the server.\n\nVisit the following resources to learn more:\n\n- [@article@What are Long-Polling, Websockets, Server-Sent Events (SSE) and Comet?](https://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet)\n",
    "skip-lists@K96ggeWqd5OwoNnkL04pc": "# Skip Lists\n\nSkip lists are a data structure that allows you to perform operations on a sorted list in O(log n) time. Skip lists are a probabilistic data structure, which means that the probability of a certain operation taking a certain amount of time is a certain value. In the case of skip lists, the probability of an operation taking O(log n) time is 1.\n\nVisit the following resources to learn more:\n\n- [@article@Skip Lists](https://en.wikipedia.org/wiki/Skip_list)\n- [@video@Randomization: Skip Lists](https://www.youtube.com/watch?v=2g9OSRKJuzM&index=10&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n",
    "sockets@u-c-UFegRb7xqsmvj9gVb": "# Sockets\n\nA socket is an interface for network communication. It is a way for two programs to communicate with each other over a network. It is a way for a client to send a request to a server and for the server to send a response back to the client.\n\nVisit the following resources to learn more:\n\n- [@video@A Beginners Guide to WebSockets](https://www.youtube.com/watch?v=8ARodQ4Wlf4)\n- [@video@WebSockets in 100 Seconds & Beyond with Socket.io](https://www.youtube.com/watch?v=1BfCnjr_Vjg)\n",
    "solving-n-queen-problem@HlAmTY1udqDT2mTfBU9P-": "# Solving n Queen Problem\n\nN Queen Problem is a famous problem in Computer Science. It is a problem of placing n queens on an n x n chessboard such that no two queens attack each other. The problem is to find all possible solutions to the problem.\n\nVisit the following resources to learn more:\n\n- [@article@N-Queens problem using backtracking in Java/C++](https://www.digitalocean.com/community/tutorials/n-queens-problem-java-c-plus-plus)\n- [@video@6.1 N Queens Problem using Backtracking](https://www.youtube.com/watch?v=xFv_Hl4B83A)\n",
    "spanning-tree@L4xtWOdqGUf4SbJkoOsNM": "# Spanning Tree\n\nA spanning tree is a subset of Graph G, which has all the vertices covered with minimum possible number of edges. Hence, a spanning tree does not have cycles and it cannot be disconnected..\n\nVisit the following resources to learn more:\n\n- [@article@Spanning Tree](https://www.tutorialspoint.com/data_structures_algorithms/spanning_tree.htm)\n- [@video@CSE373 2020 - Lecture 13 - Minimum Spanning Trees](https://www.youtube.com/watch?v=oolm2VnJUKw&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=13)\n- [@video@CSE373 2020 - Lecture 14 - Minimum Spanning Trees (cont)](https://www.youtube.com/watch?v=RktgPx0MarY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=14)\n- [@video@Greedy Algorithms: Minimum Spanning Tree](https://www.youtube.com/watch?v=tKwnms5iRBU&index=16&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp)\n",
    "sql-vs-nosql-databases@nprZscHdC_RdRIcGeGyVk": "# SQL vs NoSQL databases\n\nSQL stands for Structured Query Language. It's used for relational databases. A SQL database is a collection of tables that stores a specific set of structured data. Some examples are PostgreSQL, MySQL, MariaDB etc.\n\nNoSQL stands for Not Only SQL. It's used for non-relational databases. A NoSQL database is a collection of collections that stores a specific set of unstructured data. Some examples are MongoDB, CouchDB, Redis etc.\n\nVisit the following resources to learn more:\n\n- [@video@SQL vs. NoSQL: Whats the difference?](https://www.youtube.com/watch?v=Q5aTUc7c4jg)\n- [@video@Database Design Tips | Choosing the Best Database in a System Design Interview](https://www.youtube.com/watch?v=cODCpXtPHbQ\\&t=22s)\n- [@video@NoSQL vs SQL – Which Type of Database Should You Use?](https://www.youtube.com/watch?v=FzlpwoeSrE0)\n- [@feed@Explore top posts about NoSQL](https://app.daily.dev/tags/nosql?ref=roadmapsh)\n",
    "sse@JckRqZA8C6IqQLPpTCgf4": "# Server Sent Events\n\nServer-Sent Events is a server push technology enabling a client to receive automatic updates from a server via an HTTP connection, and describes how servers can initiate data transmission towards clients once an initial client connection has been established.\n\nVisit the following resources to learn more:\n\n- [@article@What is Server-Sent Events (SSE) and how to implement it?](https://medium.com/yemeksepeti-teknoloji/what-is-server-sent-events-sse-and-how-to-implement-it-904938bffd73)\n- [@article@Using server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events)\n- [@feed@Explore top posts about Cryptography](https://app.daily.dev/tags/cryptography?ref=roadmapsh)\n",
    "stack@hJB5gO9tosRlC4UmdSNzl": "# Stack\n\nStack is a linear collection of items where items are inserted and removed in a particular order. Stack is also called a LIFO Data Structure because it follows the \"Last In First Out\" principle i.e. the item that is inserted in the last is the one that is taken out first.\n\nVisit the following resources to learn more:\n\n- [@video@Stack Data Structure | Illustrated Data Structures](https://www.youtube.com/watch?v=I5lq6sCuABE)\n- [@video@Stack in 3 minutes](https://www.youtube.com/watch?v=KcT3aVgrrpU)\n- [@course@Stack Data Structure](https://www.coursera.org/lecture/data-structures/stacks-UdKzQ)\n",
    "statemachine-diagrams@X0CKM9LaJUrgI5gIdqFvU": "# State Machine Diagrams\n\nState machine diagrams are used to show the different states an object can be in at a given time. The object can be in one and only one state at a given time. State machine diagrams are similar to activity diagrams, but they are more focused on the flow of an object's state rather than the flow of the object itself.\n\nVisit the following resources to learn more:\n\n- [@article@What is State Machine Diagram?](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-state-machine-diagram/)\n- [@article@State Machine Diagram Tutorial](https://www.lucidchart.com/pages/uml-state-machine-diagram)\n- [@article@State Machine Diagram](https://www.sciencedirect.com/topics/computer-science/state-machine-diagram)\n",
    "stored-procedures@FjhZGhzJjYyDn0PShKmpX": "# Stored Procedures\n\nStored Procedures are created to perform one or more DML operations on Database. It is nothing but the group of SQL statements that accepts some input in the form of parameters and performs some task and may or may not returns a value.\n\nVisit the following resources to learn more:\n\n- [@article@SQL Stored Procedures](https://www.programiz.com/sql/stored-procedures)\n",
    "string-search--manipulations@NUWk-7IXmMU-4TT-oS8fF": "# String Search and Manipulations\n\nString search and manipulation is a very important topic in computer science. It is used in many different applications, such as searching or replacing a specific pattern, word or character in a string.\n\nVisit the following resources to learn more:\n\n- [@article@String-searching Algorithm](https://en.wikipedia.org/wiki/String-searching_algorithm)\n",
    "substring-search@E9hf1ux1KKGHvvAShm67w": "# Substring Search\n\nSubstring search is the problem of finding a substring in a string. This is a very common problem in computer science, and there are many algorithms for solving it.\n\nVisit the following resources to learn more:\n\n- [@course@Introduction to Substring Search](https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG)\n- [@article@What is the fastest substring search algorithm?](https://stackoverflow.com/questions/3183582/what-is-the-fastest-substring-search-algorithm)\n- [@article@Substring Search - Exercises](https://algs4.cs.princeton.edu/53substring/)\n",
    "suffix-arrays@Ld1TUNS8713coMNvwhNIJ": "# Suffix Arrays\n\nSuffix arrays are a data structure that allows us to quickly find all the suffixes of a string in lexicographical order. This is useful for many problems, such as finding the longest common substring between two strings, or finding the number of distinct substrings of a string.\n\nVisit the following resources to learn more:\n\n- [@article@Suffix Arrays - Princeton University](https://algs4.cs.princeton.edu/63suffix/)\n- [@video@Suffix Array Introduction](https://www.youtube.com/watch?v=zqKlL3ZpTqs)\n- [@video@Advanced Data Structures: Suffix Arrays](https://www.youtube.com/watch?v=IzMxbboPcqQ)\n- [@video@Suffix Arrays: building](https://www.youtube.com/watch?v=ZWlbhBjjwyA)\n- [@course@Suffix Arrays - Coursera](https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays)\n",
    "system-design@w-fvEiSJysywR3AOAB0ve": "# System Design\n\nSystem design is the process of defining the architecture, modules, interfaces, and data for a system to satisfy specified requirements. It is a very broad topic, and there are many ways to approach it.\n\nVisit the following resources to learn more:\n\n- [@opensource@System Design Primer](https://github.com/donnemartin/system-design-primer)\n- [@article@System Design: The Complete Course](https://dev.to/karanpratapsingh/system-design-the-complete-course-10fo)\n- [@video@System Design 101](https://www.youtube.com/watch?v=Y-Gl4HEyeUQ)\n- [@video@Scaling the Unscalable](https://www.youtube.com/watch?v=a2rcgzludDU)\n- [@video@System Design interview: Scale to 1 million users](https://www.youtube.com/watch?v=YkGHxOg9d3M)\n- [@feed@Explore top posts about Career](https://app.daily.dev/tags/career?ref=roadmapsh)\n",
    "tail-recursion@0_qNhprnXU3i8koW3XTdD": "# Tail Recursion\n\nTail recursion is a special kind of recursion where the recursive call is the very last thing in the function. It's a function that does not do anything at all after recursing.\n\nVisit the following resources to learn more:\n\n- [@article@What is tail recursion? Why is it so bad?](https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad)\n- [@course@Tail Recursion](https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1)\n- [@feed@Explore top posts about Recursion](https://app.daily.dev/tags/recursion?ref=roadmapsh)\n",
    "tcpip-model@Fed5y1D95WPpqoVg7kmob": "# OSI and TCP/IP Models\n\nThe OSI and TCP/IP model is used to help the developer to design their system for interoperability. The OSI model has 7 layers while the TCP/IP model has a more summarized form of the OSI model only consisting 4 layers. This is important if you're trying to design a system to communicate with other systems.\n\nVisit the following resources to learn more:\n\n- [@article@Cloudflare - What is the OSI model](https://www.cloudflare.com/learning/ddos/glossary/open-systems-interconnection-model-osi/)\n- [@video@TCP/IP and the OSI Model Explained!](https://www.youtube.com/watch?v=e5DEVa9eSN0)\n",
    "the-knights-tour-problem@NcKW_3vJWL_rVlDBB_Qjs": "# Knight's Tour Problem\n\nKnight's Tour Problem is a problem where we have to find a path for a knight to visit all the cells of a chessboard without visiting any cell twice.\n\nVisit the following resources to learn more:\n\n- [@article@Knights Tour](https://bradfieldcs.com/algos/graphs/knights-tour/)\n- [@article@Knights Tour Problem](https://www.codesdope.com/course/algorithms-knights-tour-problem/)\n- [@article@Backtracking: The Knight’s Tour Problem](https://www.codingninjas.com/codestudio/library/backtracking-the-knights-tour-problem)\n",
    "tls--https@3pu2bGhoCLFIs6kNanwtz": "# TLS / HTTPS\n\nTLS (Transport Layer Security) is a cryptographic protocol that provides privacy and data integrity between two communicating applications. It is widely used to secure HTTP, although it can be used with any protocol. TLS is often used in combination with HTTPS, which is HTTP over TLS.\n\nVisit the following resources to learn more:\n\n- [@article@What is TLS & How Does it Work? - Internet Society](https://www.internetsociety.org/deploy360/tls/basics/)\n- [@article@What is TLS (Transport Layer Security)? - Cloudflare](https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/)\n- [@video@SSL and HTTPS](https://www.youtube.com/watch?v=S2iBR2ZlZf0)\n- [@video@SSL/TLS - Cristina Formaini](https://www.youtube.com/watch?v=Rp3iZUvXWlM)\n",
    "transactions@KhvYJtSCUBOpEZXjHpQde": "# Transactions\n\nIn short, a database transaction is a sequence of multiple operations performed on a database, and all served as a single logical unit of work — taking place wholly or not at all. In other words, there's never a case where only half of the operations are performed and the results saved.\n\nVisit the following resources to learn more:\n\n- [@article@What are Transactions?](https://fauna.com/blog/database-transaction)\n- [@article@Database Transaction](https://en.wikipedia.org/wiki/Database_transaction)",
    "travelling-salesman-problem@ZG-hWjVoS3p9XfrtBL0sD": "# Travelling Salesman Problem\n\nThe Travelling Salesman Problem (TSP) is a classic problem in computer science. It is a problem that is NP-complete, which means that it is a problem that is hard to solve. It is also a problem that is used to test the efficiency of algorithms.\n\nVisit the following resources to learn more:\n\n- [@article@Traveling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)\n- [@video@What is the Traveling Salesman Problem?](https://www.youtube.com/watch?v=1pmBjIZ20pE)\n- [@video@4.7 Traveling Salesperson Problem - Dynamic Programming](https://www.youtube.com/watch?v=XaXsJJh-Q5Y)\n- [@video@Traveling Salesman Problem | Dynamic Programming | Graph Theory](https://www.youtube.com/watch?v=cY4HiiFHO1o)\n",
    "tree@_eWqiWUmOj0zUo_Ix3j1O": "# Tree\n\nA tree is non-linear and a hierarchical data structure consisting of a collection of nodes such that each node of the tree stores a value and a list of references to other nodes (the “children”).\n\nVisit the following resources to learn more:\n\n- [@article@Tree Data Structure](https://www.programiz.com/dsa/trees)\n- [@video@Tree | Illustrated Data Structures](https://www.youtube.com/watch?v=S2W3SXGPVyU)\n",
    "trees@IaPd_zuLbiOCwoSHQLoIG": "# 2-3-4 Search Trees\n\nIn practice: For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce 2-4 trees just before red–black trees, even though 2-4 trees are not often used in practice.\n\nVisit the following resources to learn more:\n\n- [@article@CS 61B Lecture 26: Balanced Search Trees](https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q)\n- [@video@Bottom Up 234-Trees](https://www.youtube.com/watch?v=DQdMYevEyE4&index=4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6)\n- [@video@Top Down 234-Trees](https://www.youtube.com/watch?v=2679VQ26Fp4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=5)\n",
    "tries@4qUVacMEz3XFiL_dMre6P": "# Tries\n\nTries are a data structure that can be used to store strings. The idea is to store the characters of the string in a tree-like structure, where each node of the tree represents a single character. We can use this structure to store strings in a way that allows us to quickly search for strings with a common prefix.\n\nVisit the following resources to learn more:\n\n- [@article@Tries - DataStructure Notes](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries)\n- [@article@The Trie: A Neglected Data Structure](https://www.toptal.com/java/the-trie-a-neglected-data-structure)\n- [@article@TopCoder - Using Tries](https://www.topcoder.com/thrive/articles/Using%20Tries)\n- [@video@Stanford Lecture (real world use case)](https://www.youtube.com/watch?v=TJ8SkcUSdbU)\n- [@video@MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through)](https://www.youtube.com/watch?v=NinWEPPrkDQ&index=16&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf)\n- [@course@0. Tries - Coursera](https://www.coursera.org/learn/algorithms-part2/home/week/4)\n- [@course@1. R Way Tries](https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries)\n- [@course@2. Ternary Search Tries](https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries)\n- [@course@3. Character Based Operations](https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations)\n",
    "type-object-pattern@_2Jddpz_cdwyeIgrg5qt_": "# Type Object Pattern\n\nType object pattern is a creational design pattern that allows us to create a new object of a type without exposing the object creation logic to the client. It is used when we need to create a new object of a type, but we don't know which type we need to create until runtime. It is like a factory pattern, but instead of returning a new object of a type, it returns a new object of a type that is already created.\n\nVisit the following resources to learn more:\n\n- [@article@Type Object Pattern](https://gameprogrammingpatterns.com/type-object.html)\n",
    "unbalanced-tree@w4sxmZR1BjX6wlrZmuOlf": "# Unbalanced Tree\n\nAn unbalanced binary tree is one that is not balanced.\n\nVisit the following resources to learn more:\n\n- [@article@Balanced vs Unbalanced Binary Tree](https://stackoverflow.com/questions/59206128/balanced-vs-unbalanced-binary-tree-clarification-needed)\n- [@article@Unbalanced Binary Tree](https://eng.libretexts.org/Bookshelves/Computer_Science/Databases_and_Data_Structures/Open_Data_Structures_-_An_Introduction_(Morin)/06%3A_Binary_Trees/6.02%3A_BinarySearchTree_-_An_Unbalanced_Binary_Search_Treee)\n",
    "undirected-graph@QGx8it2N_85PiPVjpTGK_": "# Undirected Graph\n\nAn undirected graph is graph, i.e., a set of objects (called vertices or nodes) that are connected together, where all the edges are bidirectional. An undirected graph is sometimes called an undirected network. In contrast, a graph where the edges point in a direction is called a directed graph.\n\nVisit the following resources to learn more:\n\n- [@article@Undirected Graph](https://mathinsight.org/definition/undirected_graph)\n",
    "unicode@04hpfxI2x958tQI-0clsp": "# Unicode\n\nUnicode is a standard for encoding characters. It is a superset of ASCII, which means that ASCII is a subset of Unicode. Unicode is a 16-bit encoding, which means that it can encode 2^16 = 65536 characters. This is a lot more than ASCII, which can only encode 128 characters.\n\nVisit the following resources to learn more:\n\n- [@article@How Unicode Works: What Every Developer Needs to Know About Strings and 🦄](https://deliciousbrains.com/how-unicode-works/)\n- [@video@Characters, Symbols and the Unicode Miracle - Computerphile](https://www.youtube.com/watch?v=MijmeoH9LT4)\n",
    "usecase-diagrams@dVvYbrcaxHLpvtX6HbS7g": "# Usecase Diagrams\n\nUsecase diagrams are a type of diagram that are used to model the interactions between the **actors** and the **usecases** of the system.\n\nAn actor is a person or a system that interacts with the system. Actors are represented by a rectangle with the name of the actor written inside it.\n\nA usecase is a task that the system performs. Usecases are represented by an ellipse with the name of the usecase written inside it.\n\nA usecase diagram is a diagram that shows the actors and the usecases of the system. The diagram is represented by a rectangle that contains the name of the system inside it. The actors are represented by rectangles and the usecases are represented by ellipses.\n\nVisit the following resources to learn more:\n\n- [@article@UML Use Case Diagram Tutorial](https://www.lucidchart.com/pages/uml-use-case-diagram)\n- [@article@What is Use Case Diagram?](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-use-case-diagram/)\n- [@video@UML Use Case Diagram Tutorial](https://www.youtube.com/watch?v=zid-MVo7M-E)\n",
    "views@lOj_ReWI1kQ3WajJZYOWU": "# Views\n\nViews in SQL are kind of virtual tables. A view also has rows and columns as they are in a real table in the database. We can create a view by selecting fields from one or more tables present in the database. A View can either have all the rows of a table or specific rows based on certain condition.\n\nVisit the following resources to learn more:\n\n- [@article@Database Views](https://www.ibm.com/docs/en/eamfoc/7.6.0?topic=structure-views)\n- [@article@SQL Views - Wikipedia](https://en.wikipedia.org/wiki/View_(SQL))\n",
    "web-sockets@bVjI14VismTHNCyA0mEBP": "# Web Sockets\n\nWeb sockets are a bidirectional communication protocol between a client and a server. They are used for real-time applications like chat, multiplayer games, and live data updates. Web sockets are also used to establish a connection between a server and a client. This connection is then used to send data in both directions.\n\nVisit the following resources to learn more:\n\n- [@article@WebSockets](https://en.wikipedia.org/wiki/WebSocket)\n- [@article@Web Sockets API](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API)"
  },
  "migration-mapping": {
    "pick-a-language": "tU4Umtnfu01t9gLlnlK6b",
    "pick-a-language:python": "RlKZzs44biQPgxD0tK1qx",
    "pick-a-language:go": "mWW88VnkqWgDz02qw5zU-",
    "pick-a-language:c-sharp": "jHKCLfLml8oZyj4829gx0",
    "pick-a-language:rust": "1bDjg-KBDKRmE6f1MWY8l",
    "pick-a-language:c-plus-plus": "1kQJs-3Aw8Bi7d_Xh67zS",
    "pick-a-language:c": "n4IsklfYJXFIyF1rGWuEa",
    "pick-a-language:java": "1lQSUFrrIGq19nUnM92-I",
    "data-structures": "NM7q5REW1sJgMhxJhPpLT",
    "data-structures:array": "TwW6SO2IXqkxJXVjLzdwU",
    "data-structures:linked-list": "gr8BK6vq4AVwp_aUozZmf",
    "data-structures:stack": "hJB5gO9tosRlC4UmdSNzl",
    "data-structures:queue": "JI990pDX2jjNe6IH_Y_t0",
    "data-structures:hash-table": "G2dN2FO0SN_I-5AhO_EUk",
    "data-structures:tree": "_eWqiWUmOj0zUo_Ix3j1O",
    "data-structures:tree:binary-tree": "G9dnegZ6zNvxrCZ3O_b_z",
    "data-structures:tree:binary-search-tree": "et7l85gnxjvzD2tDyHT_T",
    "data-structures:tree:full-binary-tree": "Q8ZJNeTbc22Q08Mra-McY",
    "data-structures:tree:complete-binary-tree": "Jx1WWCjm8jkfAGtHv15n1",
    "data-structures:tree:balanced-tree": "ZaWGLvZyu4sIPn-zwVISN",
    "data-structures:tree:unbalanced-tree": "w4sxmZR1BjX6wlrZmuOlf",
    "data-structures:graph": "vQm046o6ozcvLoqg9L6eL",
    "data-structures:graph:directed-graph": "6Jy8SXHuYA08h9iLjKFWR",
    "data-structures:graph:undirected-graph": "QGx8it2N_85PiPVjpTGK_",
    "data-structures:graph:spanning-tree": "L4xtWOdqGUf4SbJkoOsNM",
    "data-structures:graph:graph-representation": "rTnKJcPniUtqvfOyC88N0",
    "data-structures:heap": "pw3ZCC3HKU7D5SQwte4vE",
    "asymptotic-notation": "UpBrpmrUwYUB9eesNxCq5",
    "asymptotic-notation:big-o-notation": "c-NrTtJuNihbHzyPEOKTW",
    "asymptotic-notation:big-theta-notation": "ThLpVZQIJ4diY5m0dik8m",
    "asymptotic-notation:big-omega-notation": "X33735aeAVSlJ6yv9GS-h",
    "asymptotic-notation:common-runtimes:constant": "3F_QBv_sU39ehOxpurF88",
    "asymptotic-notation:common-runtimes:logarithmic": "nnlMNkQn1HU4U9yPbV9kQ",
    "asymptotic-notation:common-runtimes:linear": "jymhjv8GiFALQpox6aZeu",
    "asymptotic-notation:common-runtimes:polynomial": "sVFvpsAO1_ZH9aliEj9aF",
    "asymptotic-notation:common-runtimes:exponential": "5mMLr6tWbiSZuox1lx0_B",
    "asymptotic-notation:common-runtimes:factorial": "m0umGQNdvg95UiNpQZsQN",
    "common-algorithms": "7a6-AnBI-3tAU1dkOvPkx",
    "common-algorithms:sorting-algorithms:bubble-sort": "4wGBYFZpcdTt97WTbSazx",
    "common-algorithms:sorting-algorithms:selection-sort": "rOsHFXQm5jNz0RyZQ5ZGs",
    "common-algorithms:sorting-algorithms:insertion-sort": "ujDCW6zZE8dV_fpNf-oIl",
    "common-algorithms:sorting-algorithms:heap-sort": "CovrRsBY-sYW_xSegcN6N",
    "common-algorithms:sorting-algorithms:quick-sort": "be0Q8GW9ZX1JbPrBvbMji",
    "common-algorithms:sorting-algorithms:merge-sort": "Bh-whDbcCjl3m6mRm9w02",
    "common-algorithms:tree-algorithms:pre-order-traversal": "psTN5N66xoFHFopgd5faW",
    "common-algorithms:tree-algorithms:in-order-traversal": "KTrgf14Q6rg2f0v4dqq2s",
    "common-algorithms:tree-algorithms:post-order-traversal": "4_oGXwjzSY5cX9n7L4iAA",
    "common-algorithms:tree-algorithms:breadth-first-search": "Ke_ch4fnuKIiGAXUM_LPP",
    "common-algorithms:tree-algorithms:depth-first-search": "chzP5_t2gMi6MstxEzCi5",
    "common-algorithms:graph-algorithms:breadth-first-search": "vcV6TEM_PqXxtThdfMKGw",
    "common-algorithms:graph-algorithms:depth-first-search": "Yf5gOIe7oiL19MjEVcpdw",
    "common-algorithms:graph-algorithms:bellman-fords-algorithm": "eY4nK2lPYsrR-a_8y2sao",
    "common-algorithms:graph-algorithms:dijkstras-algorithm": "oJstm-8c-4seWbIWcNgDv",
    "common-algorithms:graph-algorithms:a-star-algorithm": "Yrk2PLUa-_FAPlhCkMl3e",
    "common-algorithms:greedy-algorithms:dijkstras-algorithm": "l3X9UrEYTWs5kBXI1NNCf",
    "common-algorithms:greedy-algorithms:huffman-coding": "QrcijPiVT3bgqfkF-6ssi",
    "common-algorithms:greedy-algorithms:kruskas-algorithm": "Wqhg7E-lOz1oNcRXjUej8",
    "common-algorithms:greedy-algorithms:ford-fulkerson-algorithm": "Hqw2eGtgfbVggqXBnIOdI",
    "common-algorithms:greedy-algorithms:prims-algorithm": "znpFIKwMJlepKJ8dH3kvC",
    "common-algorithms:back-tracking-algorithms:finding-hamiltonian-paths": "aBjBHpq_OajgQjxdCobXD",
    "common-algorithms:back-tracking-algorithms:solving-n-queen-problem": "HlAmTY1udqDT2mTfBU9P-",
    "common-algorithms:back-tracking-algorithms:maze-solving-problem": "nODFT-i2YsxUVsgwWkIWn",
    "common-algorithms:back-tracking-algorithms:knights-tour-problem": "NcKW_3vJWL_rVlDBB_Qjs",
    "common-algorithms:robin-karp-algorithm": "l5--4opvZoc_seVn__5R3",
    "common-algorithms:recursion:tail-recursion": "0_qNhprnXU3i8koW3XTdD",
    "common-algorithms:recursion:non-tail-recursion": "iLEOuQgUgU5Jc38iXDpp5",
    "common-algorithms:search-algorithms:binary-search": "8kTg4O9MrTHRUrp6U-ctA",
    "common-algorithms:search-algorithms:linear-search": "XwyqBK9rgP1MMcJrdIzm5",
    "common-algorithms:cache-algorithms:lru-cache": "cEsboPT8nLvo0Zt0_oBq6",
    "common-algorithms:cache-algorithms:lfu-cache": "n11ujPI3of-52l2KW2CDQ",
    "common-algorithms:cache-algorithms:mfu-cache": "hna0HLu0l4NTNNpyGqlW5",
    "string-search-and-manipulations": "NUWk-7IXmMU-4TT-oS8fF",
    "string-search-and-manipulations:search-pattern-in-text": "L4M5yFRKKR2axKXGcIA7d",
    "string-search-and-manipulations:suffix-arrays": "Ld1TUNS8713coMNvwhNIJ",
    "string-search-and-manipulations:substring-search:brute-force-search": "g3b0kt1fCAjjYyS2WelWi",
    "string-search-and-manipulations:substring-search": "E9hf1ux1KKGHvvAShm67w",
    "string-search-and-manipulations:substring-search:knuth-morris-pratt": "8abFKMfaV9H8F38I0DcMT",
    "string-search-and-manipulations:substring-search:boyer-moore": "p6qub32jcaGloHXUDUrlG",
    "string-search-and-manipulations:substring-search:rabin-karp": "Km5LvcJpyntrW2iA8h5e3",
    "floating-point-numbers": "-bawIWfrYuAxy8cP-AGFS",
    "endianess": "vjMqqFsTxSjaiYxmliwLi",
    "endianess:big-endian": "U8AgY6I-62mN5Ohg9MsG6",
    "endianess:little-endian": "rD_5n5bjiNMVC0cPhEVyG",
    "character-encodings": "DtG9EJonWi4_2oQ4fWOKY",
    "character-encodings:unicode": "04hpfxI2x958tQI-0clsp",
    "character-encodings:ascii": "hmwsNp60alS43kJg4A_Og",
    "common-uml-diagrams": "DMuMsEowpevTCALtziwTB",
    "common-uml-diagrams:class-diagrams": "FZ8znJSz8PvQlnEyRLXmQ",
    "common-uml-diagrams:usecase-diagrams": "dVvYbrcaxHLpvtX6HbS7g",
    "common-uml-diagrams:activity-diagrams": "ptfRNiU0mC0Q5SLA_FWZu",
    "common-uml-diagrams:statemachine-diagrams": "X0CKM9LaJUrgI5gIdqFvU",
    "common-uml-diagrams:sequence-diagrams": "gaUT5K2xS-WQMrIA0Bkb_",
    "design-patterns": "-De1hU2ONGwhQmUpsyrCO",
    "design-patterns:gof-design-patterns": "iPN9mSyFwYZER5HSkj6oL",
    "design-patterns:architectural-patterns": "BGhJNtszbYJtKyhqr2jax",
    "design-patterns:dependency-injection": "J7DKRklMtJ94Y-18Jo50r",
    "design-patterns:null-object-pattern": "PpFQ0zmObZLvmBvqhTEMz",
    "design-patterns:type-object-pattern": "_2Jddpz_cdwyeIgrg5qt_",
    "basic-math-skills": "cdNi0EYrQ5nsgNxFVnXL8",
    "basic-math-skills:probability": "HZ3_xyphbjhBPwwQo_rHH",
    "basic-math-skills:combinatorics": "lWnAY0DgrUOmT6yqnxeBN",
    "complexity-classes": "YLCmZvoLkhOk9wlgYW2Ms",
    "complexity-classes:p": "3aM17dPKNi8tRJsW8lesI",
    "complexity-classes:np": "ewXUHpOnjm8YrLhce1dAQ",
    "complexity-classes:np-hard": "mJJ8DGUpBuHEJ7I6UTy1T",
    "complexity-classes:p-equals-np": "0btHNkzWL1w_-pUgU_k2y",
    "complexity-classes:np-complete": "Lwkz7qozXRlVNA20zJbSw",
    "complexity-classes:np-complete:travelling-salesman-problem": "ZG-hWjVoS3p9XfrtBL0sD",
    "complexity-classes:np-complete:knapsack-problem": "yHeCRPhfAOWiggZeUHPU9",
    "complexity-classes:np-complete:longest-path-problem": "4QVVYjDODMWsjnrE-4UBs",
    "tries": "4qUVacMEz3XFiL_dMre6P",
    "balanced-search-trees": "7DF3UhefOSqqTuccH8c8X",
    "balanced-search-trees:avl-trees": "OUistS7H7hQQxVV-lOg39",
    "balanced-search-trees:red-black-trees": "eOL0_SzxBn7_xhNcBDi2D",
    "balanced-search-trees:the-2-3-search-trees": "3jiV9R82qxpqIGfpEq_wK",
    "balanced-search-trees:the-2-3-4-trees": "IaPd_zuLbiOCwoSHQLoIG",
    "balanced-search-trees:n-ary-trees": "UOYeM-hqIKCrB9hGez4Q_",
    "balanced-search-trees:b-tree": "s0Pi6CemUUsmZSEu2j2gH",
    "system-design": "w-fvEiSJysywR3AOAB0ve",
    "system-design:horizontal-vs-vertical-scaling": "-34WGppX6QC5fkCvfCghp",
    "system-design:load-balancing": "xDiS0HmrEoPjkQg9x2O3o",
    "system-design:clustering": "wAsZ-M5N9ERufQnBaXbAE",
    "system-design:caching": "4u5w9QCptLWuY9O7_UU8V",
    "system-design:cdn": "r8V9bZpc98SrLvXc070bZ",
    "system-design:proxy": "qLLJ_ehC8tSRfXsorYMQz",
    "system-design:cap-theorem": "GZI8EsEqiMJX3fSbO_E-7",
    "system-design:queues": "LCPEzpyAuHY3ggN3nYrNN",
    "system-design:architectural-styles": "X1wv7xV69IEzepg8bF8oZ",
    "system-design:rest": "Kvz3Sn7L8CxP5ZXO1hlcU",
    "system-design:graphql": "DeE_dZecLmKCjePovTfFS",
    "system-design:grpc": "M4vdwAbjLPrLjWUsG_P1I",
    "system-design:cloud-design-patterns": "YMO9oD_sbzyDZPNU2xZwe",
    "system-design:long-polling": "XeJi6TwpI5Uaszj00Uv_2",
    "system-design:short-polling": "gGmNJ8dK28iqrlQHPz6md",
    "system-design:web-sockets": "bVjI14VismTHNCyA0mEBP",
    "system-design:sse": "JckRqZA8C6IqQLPpTCgf4",
    "databases": "zvlTQ0A-My4QDrslp_lru",
    "databases:sql-vs-nosql-databases": "nprZscHdC_RdRIcGeGyVk",
    "databases:normalization-denormalization": "Rw7QjLC8hLtXSwmU_9kHC",
    "databases:entity-relationship-model": "XnxxEmr2TyW2kOpB4gtR5",
    "databases:ddl": "ii1vF74u3yrFNlw_21b3B",
    "databases:dml": "tcQSH-eAvJUZuePTDjAIb",
    "databases:dql": "05lkb3B86Won7Rkf-8DeD",
    "databases:dcl": "4bUmfuP2qgcli8I2Vm9zh",
    "databases:locking": "_sm63rZNKoibVndeNgOpW",
    "databases:acid-model": "W5B-v-BFcCRmuN0L1m6PI",
    "databases:base-model": "q3nRhTYS5wg9tYnQe2sCF",
    "databases:cap-theorem": "uqfeiQ9K--QkGNwks4kjk",
    "databases:pacelc-theorem": "g6HeyLptaAYx9QBKuHQyM",
    "databases:indexes": "BEbsUA39kZ5itqCwD585f",
    "databases:views": "lOj_ReWI1kQ3WajJZYOWU",
    "databases:transactions": "KhvYJtSCUBOpEZXjHpQde",
    "databases:stored-procedures": "FjhZGhzJjYyDn0PShKmpX",
    "databases:database-federation": "3r21avMlo0xFB9i7PHccX",
    "databases:replication": "WUEmEtlszbISSIWDKpvg6",
    "databases:sharding": "3K65efPag2076dy-MeTg4",
    "networking": "zG5t3HqbZnh9CGRqp1Sb-",
    "networking:osi-model": "pZ5x_zDYGzW9VxYycyXtN",
    "networking:tcp-ip-model": "Fed5y1D95WPpqoVg7kmob",
    "networking:dns": "fYjoXB4rnkM5gg46sqVz5",
    "networking:http": "2tUwl-br-SRuwADSzmQag",
    "networking:tls-https": "3pu2bGhoCLFIs6kNanwtz",
    "networking:sockets": "u-c-UFegRb7xqsmvj9gVb",
    "security": "JnJbJtsqKbVETY2vdLqCO",
    "security:public-key-cryptography": "bDZ34BPm3lX06ERSE10cY",
    "security:hashing-encryption-encoding": "7r7o8pYhFHVAJIv0wNT6X",
    "security:hashing-algorithms": "EX_e4B6G07zTb4JjJ7482",
    "security:owasp-top-10": "3rPSp135TdSCyvXzEzn4p",
    "how-computers-work": "-emdKpD5uRNuvem5rbFXJ",
    "how-computers-work:how-cpu-executes-programs": "1eglba39q426Nh0E0qcdj",
    "how-computers-work:how-computers-calculate": "GDLKJkKgB-i7n0YcV2NDa",
    "how-computers-work:registers-and-ram": "U3379F4AO1KSmGtVmPr27",
    "how-computers-work:instructions-and-programs": "AxiGqbteK7ZSXEUt_zckH",
    "how-computers-work:cpu-cache": "DjTQjMbika4_yTzrBpcmB",
    "processes-and-threads": "ETEUA7jaEGyOEX8tAVNWs",
    "processes-and-threads:process-forking": "RbdT5MOE4L-E7PPWKRITX",
    "processes-and-threads:memory-management": "jVsZFTzyrYEDyR8LiBQL0",
    "processes-and-threads:lock-mutex-semaphore": "O6-vG3FuoYet4D0hbiyrv",
    "processes-and-threads:concurrency-in-multiple-cores": "xUo5Ox_HTgGyeQMDIkVyK",
    "processes-and-threads:scheduling-algorithms": "Ge2nagN86ofa2y-yYR1lv",
    "processes-and-threads:cpu-interrupts": "cpQvB0qMDL3-NWret7oeA",
    "processes-and-threads:processes-vs-threads": "IEX6v_MYpE5Ylk_28K2ZU",
    "kd-trees": "C1eNsPjiQo8INbvL2Lt7L",
    "skip-lists": "K96ggeWqd5OwoNnkL04pc"
  }
}