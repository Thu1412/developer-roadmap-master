{
  "content": {
    "@lJwcc6JoUIQoiQ6FkV2KW": "# Strict Equality Operator (===)\n\nIn JavaScript, the strict equality operator `===` compares both the value and the type of two operands. This means that it will only return true if both the value and the type are identical.\n\n```sh\n\"5\" === \"5\"   // true\n```\n\nIn this case, both the value and the type are the same, so the result is true.\n\n```sh\n\"5\" === 5   // false\n```\n\nHere, although the values might appear similar, the types are different (string and number), so the result is false. The strict equality operator does not perform type coercion; both the value and the type must be identical.\n\nLearn more from the following resources:\n\n- [@article@Strict equality - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)\n",
    "@RonBj1htt6jnBt3W7zoTA": "# Value Comparison Operators\n\nIn javascript, the `==` operator does the type conversion of the operands before comparison, whereas the `===` operator compares the values and the data types of the operands. The `Object.is()` method determines whether two values are the same value: `Object.is(value1, value2)`.\n\n`Object.is()` is not equivalent to the `==` operator. The `==` operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as `\"\" == false` being `true`), but `Object.is()` doesn't coerce either value.\n\n`Object.is()` is also not equivalent to the `===` operator. The only difference between `Object.is()` and `===` is in their treatment of signed zeros and `NaN` values. The `===` operator (and the `==` operator) treats the number values `-0` and `+0` as equal but treats `NaN` as not equal to each other.\n\nVisit the following resources to learn more:\n\n- [@article@Equality comparisons and sameness - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is)\n",
    "all-about-variables@kvActjpU4FUJdrmuFoFEe": "# Javascript Variables\n\nMost of the time, a JavaScript application needs to work with information. To store and represent this information in the JavaScript codebase, we use variables. A variable is a container for a value.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Variables](https://javascript.info/variables)\n- [@article@Storing the information you need — Variables](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "apply@-BtF34cEzI6J8sZCDRlRE": "# apply\n\nThe apply() method of Function instances calls this function with a given this value, and arguments provided as an array (or an array-like object).\n\nVisit the following resources to learn more:\n\n- [@article@apply() - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n",
    "arguments-object@QLC7bW-qHskLH2HOA-Sko": "# Arguments object\n\nThe arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function, available within all non-arrow functions. You can refer to a function's arguments inside that function by using its arguments object. It has entries for each argument the function was called with, with the first entry's index at 0. But, in modern code, rest parameters should be preferred.\n\nVisit the following resources to learn more:\n\n- [@article@The arguments object - MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)\n",
    "arithmetic-operators@0PK1NwlgkNe2Vf-We4uLH": "# Arithmetic operators\n\nThe Arithmetic operators perform addition, subtraction, multiplication, division, exponentiation, and remainder operations.\n\nArithmetic operators in JavaScript are as follows:\n\n- `+` (Addition)\n- `-` (Subtraction)\n- `*` (Multiplication)\n- `**` (Exponentiation)\n- `/` (Division)\n- `%` (Modulus i.e. Remainder)\n- `++` (Increment)\n- `--` (Decrement)\n\nVisit the following resources to learn more:\n\n- [@article@Arithmetic Operators - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators)\n- [@article@Arithmetic Operators - JavaScript.info](https://javascript.info/operators#maths)\n",
    "arrays@NZedBxG9B9TRVOf2QE2yL": "# Arrays\n\nArrays are objects that store a collection of items and can be assigned to a variable. They have their methods that can perform operations on the array.\n\nVisit the following resources to learn more:\n\n- [@article@Working with Arrays in JavaScript](https://javascript.info/array)\n- [@article@JavaScript Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n- [@video@JavaScript Arrays](https://www.youtube.com/watch?v=oigfaZ5ApsM)\n",
    "arrow-functions@fr0NChxMXLpJizyMhXcXS": "# Arrow Functions\n\nArrow Function is a new way of creating functions with the '=>' operator with a shorter syntax.\n\n## Example\n\n```js\nconst sayHello = () => {\n    console.log(`Hello from Arrow Function !`);\n}\n```\n\nVisit the following resources to learn more:\n\n- [@article@MDN - Arrow Function Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n",
    "assignment-operators@IvBtUzIGnkgGXrJjqmjf4": "# Assignment Operators\n\nAn assignment operator assigns a value to its left operand based on the value of its right operand. The simple assignment operator is equal (`=`), which assigns the value of its right operand to its left operand. That is, `x = f()` is an assignment expression that assigns the value of `f()` to `x`.\n\nVisit the following resources to learn more:\n\n- [@article@Assignment Operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#assignment_operators)\n- [@article@Basic Operators](https://javascript.info/operators#assignment)\n",
    "asyncawait@Dn872mgexmxoLtbkIgIgz": "# Async/Await\n\n`async/await` is a special syntax to work with promises in a more comfortable fashion.\nWe use `async` keyword to declare a async function that return a Promise, and the `await` keyword makes a function wait for a Promise.\n\nVisit the following resources to learn more:\n\n- [@article@Async/await](https://javascript.info/async-await)\n- [@article@async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n- [@article@JavaScript Promises - Chaining](https://www.codeguage.com/courses/advanced-js/promises-chaining)\n",
    "asynchronous-javascript@sFOqx6_7poVIVuXhJVY0E": "# Asynchronous JavaScript\n\nAsynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished. Once that task has finished, your program is presented with the result.\n\nMany functions provided by browsers, especially the most interesting ones, can potentially take a long time, and therefore, are asynchronous. For example:\n\n- Making HTTP requests using `fetch()`\n- Accessing a user's camera or microphone using `getUserMedia()`\n- Asking a user to select files using `showOpenFilePicker()`\n\nSo even though you may not have to implement your own asynchronous functions very often, you are very likely to need to use them correctly.\n\nVisit the following resources to learn more:\n\n- [@article@Asynchronous JavaScript - MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing)\n- [@video@What The Hack is Event Loop and Asynchronous JavaScript - JSConf](https://youtu.be/8aGhZQkoFbQ)\n- [@video@Asynchronous JavaScript - JavaScript Visualized](https://youtu.be/eiC58R16hb8)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "bigint-operators@udoz0DZi7f-vm30dSnYKu": "# BigInt Operators\n\nMost operators that can be used with the `Number` data type will also work with `BigInt` values (e.g. arithmetic, comparison, etc.). However, the unsigned right shift `>>>` operator is an exception and is not supported. Similarly, some operators may have slight differences in behaviour (for example, division with `BigInt` will round towards zero).\n\nVisit the following resources to learn more:\n\n- [@article@BigInt Operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bigint_operators)\n",
    "bigint@6lUF0neW1piiP1RsaVxEX": "# bigint\n\nBigInt is a built-in JavaScript object that allows you to work with integers of arbitrary size.\n\nUnlike the Number type, which can accurately represent integers only within the range of ±2^53 , BigInt can handle integers far beyond this limit. This makes it particularly useful for applications requiring high precision with very large numbers, such as cryptography or scientific computations.\n\nVisit the following resources to learn more:\n\n- [@article@BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt)\n- [@video@The Whys and Hows Of BigInt](https://youtu.be/6I650PQfhMg?si=XyVGrmp4KWLRcHVj)\n",
    "bind@dbercnxXVTJXMpYSDNGb2": "# bind()\n\nThe `bind()` method in JavaScript allows you to create a new function with a specific context and optionally preset arguments. Unlike `call()` or `apply()`, `bind()` does not immediately invoke the function. Instead, it returns a new function that can be called later, either as a regular function or with additional arguments. This is particularly useful when you want to ensure that a function retains a specific context, regardless of how or when it's invoked.\n\nVisit the following resources to learn more:\n\n- [@article@bind()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n- [@article@Function binding](https://javascript.info/bind)\n",
    "bitwise-operators@ghjNJW67Wj5L5QK46xwL-": "# Bitwise operators\n\nBitwise operators treat arguments as 32-bits (zeros & ones) and work on the level of their binary representation.\nEx. Decimal number `9` has a binary representation of `1001`. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.\n\nBitwise operators in JavaScript are as follows:\n\n- `&` (AND)\n- `|` (OR)\n- `^` (XOR)\n- `~` (NOT)\n- `<<` (Left SHIFT)\n- `>>` (Right SHIFT)\n- `>>>` (Zero-Fill Right SHIFT)\n\nVisit the following resources to learn more:\n\n- [@article@Bitwise Operators - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators)\n- [@article@Bitwise Operators - JavaScript.info](https://javascript.info/operators#bitwise-operators)\n",
    "block@uqEzHYx13Y2EpvTTRzykn": "# Block Scope\n\nThis scope restricts the variable that is declared inside a specific block, from access by the outside of the block. The let & const keyword facilitates the variables to be block scoped. In order to access the variables of that specific block, we need to create an object for it. Variables declared with the var keyword, do not have block scope.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Scope](https://www.w3schools.com/js/js_scope.asp)",
    "boolean@b1HvkoWA2t4kt8mS6FySm": "# boolean\n\nIn JavaScript, a `boolean` is a simple data type that can hold one of two values: `true` or `false`. These values are used to represent logical states and are essential in controlling the flow of a program.\n\nBooleans are commonly used in conditional statements (`if`, `else`, `while`, etc.) to determine whether a block of code should execute.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\n- [@video@Booleans in JavaScript](https://www.youtube.com/watch?v=B4ZCFdrBmbE)\n",
    "break--continue@4oHFzn7R7xLxfuLpsJjr-": "# Break continue\n\n`break` statement, without a label reference, can only be used to jump out of a loop or a switch block.\n\n`continue` statement, with or without a label reference, can only be used to skip one loop iteration.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs - continue statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue)\n- [@article@JavaScript MDN Docs - break statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break)\n",
    "built-in-functions@s8wUJivWmetysJ8bt9FBC": "# Built in functions\n\nJavaScript offers a variety of built-in functions that simplify common tasks, available globally or within specific objects without requiring explicit definition. Functions like parseInt(), setTimeout(), and Math.random() can be used directly, while objects like Array, String, and Date include built-in methods for efficient data manipulation. Understanding these functions enhances development by leveraging JavaScript’s core features without reinventing the wheel.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Built-in Functions](https://www.tutorialspoint.com/javascript/javascript_builtin_functions.htm)\n- [@article@Built-in Methods in Javascript](https://dev.to/elpepebenitez/built-in-methods-in-javascript-4bll)\n- [@article@Built-in Functions:](https://www.tutorialride.com/javascript/javascript-built-in-functions.htm)\n",
    "built-in-objects@D95ndkkwmT5X_HqboEn6E": "# Built-in objects\n\nBuilt-in objects, or \"global objects\", are those built into the language specification itself. There are numerous built-in objects with the JavaScript language, all of which are accessible at the global scope. Some examples are:\n\n- `Number`\n- `Math`\n- `Date`\n- `String`\n- `Error`\n- `Function`\n- `Boolean`\n\nVisit the following resources to learn more:\n\n- [@article@Standard built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\n- [@article@JavaScript Built-in Objects](https://www.tutorialride.com/javascript/javascript-built-in-objects.htm)\n",
    "call@gsyY3Oa3Jf0W5K_lyqBYO": "# call()\n\nThe `call()` method allows you to invoke a function with a given `this` value, and arguments provided individually.\n\nVisit the following resources to learn more:\n\n- [@article@Call Method - MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n",
    "callback-hell@PJSdqvh5OBwPCNpn3q_S5": "# Callback Hell\n\nThe callback hell is when we try to write asynchronous JavaScript in a way where execution happens visually from top to bottom, creating a code that has a pyramid shape with many **})** at the end.\n\nVisit the following resources to learn more:\n\n- [@article@Callbacks in Callbacks - Pyramid of Doom](https://javascript.info/callbacks#pyramid-of-doom)\n",
    "callbacks@D8oGY7pdviRByaz6c9sU6": "# Callbacks\n\nA callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.\n\nVisit the following resources to learn more:\n\n- [@article@Callbacks in JavaScript](https://javascript.info/callbacks)\n- [@article@Callback Functions](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function)\n",
    "classes@F_Lrj0F7UXriqJ0mhwxCy": "# Classes\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but have some syntax and semantics that are not shared with ES5 class-like semantics.\n\nVisit the following resources to learn more:\n\n- [@article@Classes in JavaScript](https://javascript.info/classes)\n- [@article@JavaScript Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "closures@itS6B12I8I1KNCPvc0KCQ": "# Closures\n\nFunction closures are one of the most powerful, yet most misunderstood, concepts of JavaScript that are actually really simple to understand. A closure refers to a function along with its lexical environment. It is essentially what allows us to return a function `A`, from another function `B`, that remembers the local variables defined in `B`, even after `B` exits. The idea of closures is employed in nearly every other JavaScript program, hence, it's paramount for a JavaScript developer to know it really well.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Closures - The Simplest Explanation](https://www.codeguage.com/courses/js/functions-closures)\n- [@article@JavaScript Closures Explained in 3 Minutes](https://medium.com/learning-new-stuff/javascript-closures-explained-in-3-minutes-5aae8dce2014)\n",
    "comma-operators@6_8EwyZY2jBkZr7xnfRY3": "# Comma operators\n\nThe comma operator (`,`) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression's final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a `for` loop.\n\nVisit the following resources to learn more:\n\n- [@article@Comma operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator)\n",
    "commonjs@4EXeGkOpfAViB9Uo4zL6O": "# CommonJS\n\nCommonJS modules are the original way to package JavaScript code for Node.js. Node.js also supports the ESModules standard used by browsers and other JavaScript run-times, but CJS is still widely used in backend Node.js applications. Sometimes these modules will be written with a .cjs extension.\n\nVisit the following resources to learn more:\n\n- [@article@How the CJS Module System Works](https://blog.risingstack.com/node-js-at-scale-module-system-commonjs-require/)\n- [@video@How to Import and Export Modules in CJS](https://www.youtube.com/watch?v=XTND4rjATXA)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "comparison-operators@-v4_V4UuoZSgUk2sqOCim": "# Comparison Operators\n\nComparison operators are the operators that compare values and return true or false. The operators include: `>`, `<`, `>=`, `<=`, `==`, `===`, `!=` and `!==`\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#comparison_operators)\n",
    "conditional-operators@640mk-m5mB90Mme-7jcXV": "# Conditional operators\n\nConditional operator also known as Ternary operator is the only JS operator that takes three operands.\n\nThe operator can have one of two values based on a condition.\n\nSyntax:\n\n`condition ? val_for_true : val_for_false`\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#conditional_operator)\n",
    "conditional-statements@ttCsd2_H2SuRivCjGv1OX": "# Conditional statements\n\nWhen you write code, you often want to perform different actions for different decisions. You can use conditional statements in your code to do this. In JavaScript, we have three conditional statements: `if`, `if...else`, and `switch`.\n\nVisit the following resources to learn more:\n\n- [@article@Making decisions in your code — conditionals](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals)\n- [@article@Conditional branching: if, ?](https://javascript.info/ifelse)\n",
    "const@q85z6x1Lc-yLWepwtIT2_": "# [const] keyword\n\nConstants are block-scoped, much like variables declared using the `let` keyword. The value of a constant can't be changed through reassignment (i.e. by using the assignment operator), and it can't be re-declared (i.e. through a variable declaration). However, if a constant is an object or array its properties or items can be updated or removed.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Constants - CodeGuage](https://www.codeguage.com/courses/js/constants)\n- [@article@const keyword - MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\n- [@article@JavaScript Variables](https://javascript.info/variables)\n",
    "control-flow@3tckJ2Sci7z-sNx9jx9eF": "# Control Flow\n\nIn JavaScript, the `Control flow` is a way of how your computer runs code from top to bottom. It starts from the first line and ends at the last line unless it hits any statement that changes the control flow of the program such as loops, conditionals, etc.\n\nWe can control the flow of the program through any of these control structures:\n\n- Sequential (default mode)\n- Conditional Statements\n- Exception Handling\n- Loops and Iterations\n\nVisit the following resources to learn more:\n\n- [@article@Control Flow - MDN](https://developer.mozilla.org/en-US/docs/Glossary/Control_flow)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "data-structures@ADarwihuI2nBq1C3U7-Zr": "# Data Structures\n\nA Data structure is a format to organize, manage and store data in a way that allows efficient access and modification. JavaScript has primitive (built-in) and non-primitive (not built-in) data structures. Primitive data structures come by default with the programming language and you can implement them out of the box (like arrays and objects). Non-primitive data structures don't come by default and you have to code them up if you want to use them.\n\nVisit the following resources to learn more:\n\n- [@video@Introduction to the Stack Data Structure](https://youtu.be/4F-BnR2XwqU)\n- [@video@Introduction to the Queue Data Structure](https://youtu.be/GRA_3Ppl2ZI)\n- [@video@Intro to Recursion: Anatomy of a Recursive Solution](https://youtu.be/yBWlPte6FhA)\n- [@video@Binary Tree Algorithms for Technical Interviews - Full Course](https://youtu.be/fAAZixBzIAI)\n- [@video@Graph Algorithms for Technical Interviews - Full Course](https://youtu.be/tWVWeAqZ0WU)\n- [@video@Dynamic Programming - Learn to Solve Algorithmic Problems & Coding Challenges](https://youtu.be/oBt53YbR9Kk)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "data-types@-jbPPuEXacBR0d0CWPHgd": "# Datatypes\n\nData type refers to the type of data that a JavaScript variable can hold. There are seven primitive data types in JavaScript (Number, BigInt, String, Boolean, Null, Undefined and Symbol). Objects are non-primitives.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Data Types - CodeGuage](https://www.codeguage.com/courses/js/data-types)\n- [@article@JavaScript data types and data structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)\n- [@article@JavaScript Data Types](https://javascript.info/types)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "debugging-issues@dhEtcgv7G9fNV-AUNJdWk": "# Debugging issues\n\nWhen you're just starting out with JavaScript development, you might use a lot of `console.log()` statement in your code to log and check values of variables while debugging. The results of these would show up in the **Console** panel, along with a reference to the line and file of code which originated it.\n\nHowever, for quicker, more complex and easier to handler debugging (which also doesn't litter your codebase with `console.log()`s), breakpoints and the sources panel is your friend.\n\nVisit the following resources to learn more:\n\n- [@article@Debugging JavaScript in the sources panel](https://developer.chrome.com/docs/devtools/javascript/)\n",
    "debugging-memory-leaks@BA_ArmZMnVMaL_zl3W3Pt": "# Debugging Memory Leaks\n\nIn JavaScript, memory leaks commonly occur within heap allocated memory, where short lived objects are attached to long lived ones and the Garbage Collector cannot safely de-allocate that memory as it is still referenced from the root set (the global object).\n\nVisit the following resources to learn more:\n\n- [@article@Catching memory leaks with Chrome DevTools](https://medium.com/coding-blocks/catching-memory-leaks-with-chrome-devtools-57b03acb6bb9)\n- [@article@Effective Javascript Debugging](https://medium.com/swlh/effective-javascript-debugging-memory-leaks-75059b2436f6)\n- [@article@Debugging JavaScript memory leaks](https://www.debugbear.com/blog/debugging-javascript-memory-leaks)\n- [@article@Debugging Memory Leaks In Production JavaScript Applications](https://www.jackhoy.com/web-applications/2020/10/21/debugging-memory-leaks-in-nodejs.html)\n- [@video@JavaScript Memory Leaks Visualized and How To Fix Them](https://youtu.be/IkoGmbNJolo)\n",
    "debugging-performance@ECxISKUAU7js_JsfSHzud": "# Debugging performance\n\nEnter the dev tools and check out the Lighthouse tab. This is essentially a series of tests which analyses the currently open website on a bunch of metrics related to performance, page speed, accessibility, etc. Feel free to run the tests by clicking the **Analyze Page Load** button (you might want to do this in an incognito tab to avoid errors arising from extensions you're using). Once you have the results, take your time and read through them (and do click through to the reference pages mentioned alongside each test result to know more about it!)\n\nVisit the following resources to learn more:\n\n- [@article@Analyze runtime performance](https://developer.chrome.com/docs/devtools/performance)\n",
    "default-params@8X8mRl-puL0Lp43dO5mha": "# Default Parameters\n\nDefault function parameters allow named parameters to be initialized with default values if no value or `undefined` is passed.\n\nVisit the following resources to learn more:\n\n- [@article@Default Parameters - MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)\n",
    "dom-apis@bhuGtcyqPFKu-900aESYz": "# DOM APIs\n\nWith HTML DOM, JavaScript can access and change all the elements of an HTML document such as its attributes, CSS styles, remove elements, add and create new elements on the page. Web API means application programming interface for the web. All browsers have a set of built-in Web APIs to support complex operations, and to help accessing data. Like Geo-location API, Web Storage, Web History and others.\n\nVisit the following resources to learn more:\n\n- [@article@DOM- MDN Docs](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)\n",
    "dowhile@57lO_3uxJaWsFXS-0J1AK": "# do...while statement\n\nThe `do...while` statement creates a loop that executes a specified statement until the test condition evaluates to `false`. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n\nVisit the following resources to learn more:\n\n- [@article@do...while - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\n",
    "equality-comparisons@23Xa6q5VvRVlzc6Dx8vST": "# Equality Comparisons\n\nComparison operators are used in logical statements to determine equality or difference between variables or values. Comparison operators can be used in conditional statements to compare values and take action depending on the result.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Equality Operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "error-objects@-z-4VTaC3tOThqChgyoMs": "# Utilizing error objects\n\nWhen a runtime error occurs, a new `Error` object is created and thrown. With this `Error` object, we can determine the type of the Error and handle it according to its type.\n\n## Types of Errors\n\nBesides error constructors, Javascript also has other core Error constructors. Like\n\n- AggregateError - A collection of errors thrown simultaneously.\n- EvalError - An error occurred during the evaluation of a JavaScript expression.\n- InternalError - An internal JavaScript error, often indicating a bug in the engine.\n- RangeError - A value is outside the allowed range for a given operation.\n- ReferenceError - A variable or object is referenced before it's declared or doesn't exist.\n- SyntaxError - The code contains incorrect syntax, preventing it from being parsed.\n\n## Example\n\n```js\ntry {\n  willGiveErrorSometime();\n} catch (error) {\n  if (error instanceof RangeError) {\n    rangeErrorHandler(error);\n  } else if (error instanceof ReferenceError) {\n    referenceErrorHandle(error);\n  } else {\n    errorHandler(error);\n  }\n}\n```\n\nVisit the following resources to learn more:\n\n- [@article@Error Object - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)\n- [@article@Control flow & Error handling - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)\n- [@article@AggregateError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError)\n- [@article@EvalError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError)\n- [@article@InternalError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError)\n- [@article@RangeError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n- [@article@ReferenceError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)\n- [@article@SyntaxError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n",
    "esm@jLNmYeo20Mbu4WRvVgvwU": "# ESModules\n\nESModules is a standard that was introduced with ES6 (2015). The idea was to standardize how JS modules work and implement these features in browsers. This standard is widely used with frontend frameworks such as react and can also be used in the backend with Node.js. Sometimes these modules will be written with a .mjs extension.\n\nVisit the following resources to learn more:\n\n- [@article@Full ESM module overview from MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n- [@article@Full ESM module overview from js.info](https://javascript.info/modules)\n- [@article@Node.js documentation for ESModules](https://nodejs.org/api/esm.html)\n- [@video@JavaScript ES6 Modules Simplified](https://www.youtube.com/watch?v=cRHQNNcYf6s)\n",
    "event-loop@_bs5NNHVdHLWGBmpYwHMi": "# Event Loop\n\nThe Event Loop is one of the most important aspects to understand about Node.js. Why is this so important? Because it explains how Node.js can be asynchronous and have non-blocking I/O, it explains the \"killer feature\" of Node.js, which made it this successful.\n\nVisit the following resources to learn more:\n\n- [@article@The Node.Js Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop)\n- [@article@JavaScript Visualized: Event Loop](https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif)\n- [@video@What the heck is the event loop anyway?](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n- [@video@In the loop: JS conf 2018](https://www.youtube.com/watch?v=cCOL7MC4Pl0)\n",
    "exceptional-handling@34TKGxV9YziOWMh9rT_KE": "# Exception Handling\n\nIn JavaScript, all exceptions are simply objects. While the majority of exceptions are implementations of the global Error class, any old object can be thrown. With this in mind, there are two ways to throw an exception: directly via an Error object, and through a custom object. (excerpt from Rollbar)\n\nVisit the following resources to learn more:\n\n- [@article@Throwing Exceptions in JavaScript](https://rollbar.com/guides/javascript/how-to-throw-exceptions-in-javascript)\n- [@video@try, catch, finally, throw (video)](https://youtu.be/cFTFtuEQ-10)\n",
    "explicit-binding@p2NhSwPYMtRiPRHjPaqmX": "# Explicit binding\n\nExplicit binding is when you use the `call` or `apply` methods to explicitly set the value of `this` in a function. Explicit Binding can be applied using `call()`, `apply()`, and `bind()`.\n\nVisit the following resources to learn more:\n\n- [@article@Explicit Binding](https://medium.com/swlh/javascript-this-ac28f8e0f65d)\n- [@article@Explicit Binding rule for this keyword](https://medium.com/@msinha2801/explicit-binding-rule-for-this-keyword-in-js-712405b0a11)\n",
    "explicit-type-casting@1xhjrRN-Rfekei2JwwU7Y": "# Explicit Type Casting\n\nType casting means transferring data from one data type to another by explicitly specifying the type to convert the given data to. Explicit type casting is normally done to make data compatible with other variables. Examples of typecasting methods are `parseInt()`, `parseFloat()`, `toString()`.\n\nVisit the following resources to learn more:\n\n- [@article@Type Conversion](https://www.c-sharpcorner.com/article/type-conversions-in-javascript/)\n- [@video@Data Type Conversion](https://youtu.be/VQLYiFqetZM)\n- [@article@Type conversion](https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion)\n- [@article@What is typecasting in JavaScript](https://www.tutorialspoint.com/explain-typecasting-in-javascript)\n",
    "expressions--operators@_6vZa43gWjxO2OcD1iCCQ": "# Expressions and Operators\n\nAt a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate. The expression `x = 7` is an example of the first type. This expression uses the `=` operator to assign the value seven to the variable x. The expression itself evaluates to 7. The expression `3 + 4` is an example of the second type. This expression uses the `+` operator to add `3` and `4` together and produces a value, `7`. However, if it's not eventually part of a bigger construct (for example, a variable declaration like `const z = 3 + 4`), its result will be immediately discarded `—` this is usually a programmer mistake because the evaluation doesn't produce any effects. As the examples above also illustrate, all complex expressions are joined by operators, such as `=` and `+`.\n\nVisit the following resources to learn more:\n\n- [@article@Expressions and operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "fetch@kL5rfWxXe4J44ENru1uJS": "# Fetch\n\nThe `fetch()` method in JavaScript is used to request to the server and load the information on the webpages. The request can be of any APIs that return the data of the format JSON or XML. This method returns a promise.\n\nVisit the following resources to learn more:\n\n- [@article@Fetch MDN Docs](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n- [@article@Network request - Fetch](https://javascript.info/fetch)\n- [@article@Abort a fetch request manually in JavaScript](https://www.amitmerchant.com/abort-fetch-request-manually-in-javascript/)\n",
    "for@2M211rcaPSWbZ-sPoSEVR": "# The for loop\n\nThe `for` loop is a standard control-flow construct in many programming languages, including JavaScript. It's commonly used to iterate over given sequences or iterate a known number of times and execute a piece of code for each iteration.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript for Loop - CodeGuage](https://www.codeguage.com/courses/js/loops-for-loop)\n- [@article@The for Loop - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)\n",
    "forin-loop@cq3vvFZoNnAAZJ6oEBUwb": "# for...in statement\n\nThe for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.\n\nVisit the following resources to learn more:\n\n- [@article@for...in statement - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)\n- [@article@The for..in loop with examples](https://javascript.info/object#forin)\n",
    "forof-loop@FBz6h_AmTJBXoBN-a38a5": "# for...of statement\n\nThe for...of statement executes a loop that operates on a sequence of values sourced from an iterable object. Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), and the arguments object, generators produced by generator functions, and user-defined iterables.\n\nVisit the following resources to learn more:\n\n- [@article@for...of statement - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n",
    "function-borrowing@EAN6DCiCfSq04R4vKgZ0q": "# Function Borrowing\n\nFunction borrowing allows us to use the methods of one object on a different object without having to make a copy of that method and maintain it in two separate places. It is accomplished through the use of `.call()`, `.apply()`, or `.bind()`, all of which exist to explicitly set this on the method we are borrowing.\n\nVisit the following resources to learn more:\n\n- [@article@Function borrowing](https://medium.com/@ensallee/function-borrowing-in-javascript-4bd671e9d7b4)\n- [@article@When would I use function borrowing](https://stackoverflow.com/questions/69892281/when-would-i-use-function-borrowing)\n",
    "function-parameters@R1D4fsZliHv7wIo8Tj-kp": "# Function Parameters\n\nThe parameter is the name given to the variable declared inside the definition of a function. There are two special kinds of syntax: default and rest parameters.\n\nVisit the following resources to learn more:\n\n- [@article@Function Parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters)\n- [@article@Unlimited function parameters using Rest](https://www.amitmerchant.com/unlimited-function-parameters-with-using-rest-in-java-script/)\n",
    "function@YMT7O6lrMSMtNo0EnmsnQ": "# Function Scope\n\nWhen a variable is declared inside a function, it is only accessible within that function and cannot be used outside that function.\n\nVisit the following resources to learn more:\n\n- [@article@Function Scope & Block Scope in JS](https://medium.com/nerd-for-tech/function-scope-block-scope-in-js-d29c8e7cd216)\n",
    "functions@k8bJH9qydZm8I9rhH7rXw": "# Functions\n\nFunctions exist so we can reuse code. They are blocks of code that execute whenever they are invoked. Each function is typically written to perform a particular task, like an addition function used to find the sum of two or more numbers. When numbers need to be added anywhere within your code, the addition function can be invoked as many times as necessary.\n\nVisit the following resources to learn more:\n\n- [@article@Functions - MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)\n- [@article@JavaScript Functions in Detail - CodeGuage](https://www.codeguage.com/courses/js/functions-basics)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "garbage-collection@KKyX8N4lTgN0w-Khm6Ztq": "# Garbage Collection\n\nMemory management in JavaScript is performed automatically and invisibly to us. We create primitives, objects, functions… All that takes memory. The main concept of memory management in JavaScript is reachability.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Garbage Collection](https://javascript.info/garbage-collection)\n- [@article@Memory Management in JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management)\n",
    "global@oC4o6GLEES_nUgCJu9Q6I": "# Global Scope\n\nVariables declared Globally (outside any function) have Global Scope. Global variables can be accessed from anywhere in a JavaScript program. Variables declared with `var`, `let` and `const` are quite similar when declared outside a block.\n\n## Note\n\nIf you assign a value to a variable  that has not been declared i.e `potato = true`\nit will automatically become a _GLOBAL_ variable.\n\nVisit the following resources to learn more:\n\n",
    "history-of-javascript@l-GKzcsBNA0r6Jax8hwnP": "# History of JavaScript\n\nJavaScript was initially created by Brendan Eich of NetScape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming; initially, it was named Mocha by the creator, which was later renamed LiveScript. In 1996, about a year later after the release, NetScape decided to rename it to JavaScript with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript.\n\nVisit the following resources to learn more:\n\n- [@roadmap.sh@Brief History of JavaScript](https://roadmap.sh/guides/history-of-javascript)\n- [@article@The Weird History of JavaScript](https://dev.to/codediodeio/the-weird-history-of-javascript-2bnb)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "hoisting@Lb5jLF91WO5V5CWpifciW": "# Hoisting\n\nJavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables, or classes to the top of their scope, prior to execution of the code.\n\nVisit the following resources to learn more:\n\n- [@article@What is Hoisting - MDN Docs](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)\n- [@article@Understanding Hoisting](https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript)\n- [@video@Learn JavaScript Hoisting In 5 Minutes](https://www.youtube.com/watch?v=EvfRXyKa_GI)\n",
    "how-to-run-javascript@uXsWIUUxtc4H_iRx3uZv0": "# How to Run Javascript\n\nJavaScript can be run in the browser by including the external script file using the `script` tag, writing it within the HTML page using the `script` tag again, running it in the browser console or you can also use [REPL](https://www.digitalocean.com/community/tutorials/how-to-use-the-node-js-repl).\n\nVisit the following resources to learn more:\n\n- [@article@How To Add JavaScript to HTML](https://www.digitalocean.com/community/tutorials/how-to-add-javascript-to-html)\n- [@article@How To Write Your First JavaScript Program](https://www.digitalocean.com/community/tutorials/how-to-write-your-first-javascript-program)\n- [@article@How To Use the JavaScript Developer Console](https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-developer-console)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "ifelse@ndbDXAx6bL4lZmpXv16Y_": "# If else\n\nThe `if` statement executes a statement if a specified condition is `truthy`. If the condition is `falsy`, another statement in the optional `else` clause will be executed.\n\n## Example\n\n```js\nif (condition) {\n  statement1;\n} else {\n  statement2;\n}\n```\n\nVisit the following resources to learn more:\n\n- [@article@if...else - MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n- [@article@Conditional branching: if, ? - javascript.info](https://javascript.info/ifelse)\n",
    "iifes@YZlCoPvZuX5MmpLOTj5d4": "# IIFE\n\nImmediately-Invoked Function Expression is a function that is executed immediately after it is created.\n\n## Example\n\n```js\n// An Async IIFE\n( async() => {\n    \n    const x = 1;\n    const y = 9;\n\n    console.log(`Hello, The Answer is ${x+y}`);\n\n})();\n```\n\nVisit the following resources to learn more:\n\n- [@article@IIFE — MDN Docs](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)\n- [@article@JavaScript in Plain English - IIFE](https://javascript.plainenglish.io/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174)\n",
    "implicit-type-casting@pP42K_eH4RCdUdUS8BJlP": "# Implicit Type Casting\n\nImplicit type conversion happens when the compiler or runtime automatically converts data types. JavaScript is loosely typed language and most of the time operators automatically convert a value to the right type.\n\nVisit the following resources to learn more:\n\n- [@article@TutorialsPoint - JavaScript Tutorials](https://www.tutorialspoint.com/explain-typecasting-in-javascript)\n- [@article@What you need to know about JavaScript Implicit Coercion](https://dev.to/promisetochi/what-you-need-to-know-about-javascripts-implicit-coercion-e23)\n",
    "in-a-function@azsXq6Y5iCvQDgTWZpWQ3": "# this in a function\n\nThe keyword `this` when used in a function refers to the global object.\n\n_Note: in a browser window the global object is the `window` object._\n\nVisit the following resources to learn more:\n\n",
    "in-a-method@3E5MuxPvEJU-dwgTrbQAR": "# this in a method\n\nMethods are properties of an object which are functions. The value of this inside a method is equal to the calling object. In simple words, this value is the object “before dot”, the one used to call the method.\n\nVisit the following resources to learn more:\n\n- [@article@`this` in methods](https://javascript.info/object-methods#this-in-methods)\n",
    "in-arrow-functions@P0190rTm2wLQmCzWOKour": "# this in arrow functions\n\nThe keyword `this` when used in an arrow function refers to the parent object.\n\nVisit the following resources to learn more:\n\n- [@article@this keyword and arrow function](https://stackoverflow.com/questions/66518020/javascript-this-keyword-and-arrow-function)\n",
    "in-event-handlers@JVbEBtVrTTFnTF3_yUIAC": "# this in event handlers\n\nThe keyword `this` when used in an event handler refers to the element that received the event.\n\nVisit the following resources to learn more:\n\n",
    "indexed-collections@lBOGoHZrmnIRatvryDwTm": "# Indexed collections\n\nIndexed Collections are collections that have numeric indices i.e. the collections of data that are ordered by an index value. In JavaScript, an array is an indexed collection. An array is an ordered set of values that has a numeric index.\n\nVisit the following resources to learn more:\n\n- [@article@What is Indexed collections?](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections)\n- [@article@Indexed collections in JavaScript](https://www.tutorialspoint.com/indexed-collections-in-javascript)\n- [@video@Javascript Arrays](https://youtu.be/XYq9QpgAx8g)\n",
    "introduction-to-javascript@6khAD6mzZ9S96JJuC5_j6": "# JavaScript\n\nJavaScript, often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. It lets us add interactivity to pages e.g. you might have seen sliders, alerts, click interactions, popups, etc on different websites -- all of that is built using JavaScript. Apart from being used in the browser, it is also used in other non-browser environments as well such as Node.js for writing server-side code in JavaScript, Electron for writing desktop applications, React Native for mobile applications, and so on.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)\n- [@article@The Modern JavaScript Tutorial](https://javascript.info/)\n- [@article@Exploring JS: JavaScript books for programmers](https://exploringjs.com/)\n- [@article@Eloquent JavaScript textbook](https://eloquentjavascript.net/)\n- [@opensource@You Don't Know JS Yet (book series)](https://github.com/getify/You-Dont-Know-JS)\n- [@video@JavaScript Crash Course for Beginners](https://youtu.be/hdI2bqOjy3c?t=2)\n- [@video@Build a Netflix Landing Page Clone with HTML, CSS & JS](https://youtu.be/P7t13SGytRk?t=22)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "islooselyequal@PLallt_T33W6bUEn0Hc3W": "# isLooselyEqual\n\n[isLooselyEqual](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) checks whether its two operands are equal, returning a `Boolean` result. It attempts to convert and compare operands that are of different types.\n\nVisit the following resources to learn more:\n\n- [@article@Loosely Equality (==) Operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality)\n- [@article@Comparison - javascript.info](https://javascript.info/comparison)\n",
    "isstrictlyequal@pcILon_Jjm2_XS10iUJ0E": "# isStrictlyEqual\n\n[isStrictlyEqual](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) checks whether its two operands are equal, returning a `Boolean` result. It always considers operands of different types to be different.\n\nVisit the following resources to learn more:\n\n- [@article@Strictly Equality (===) Operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)\n- [@article@Comparison - javascript.info](https://javascript.info/comparison)\n",
    "iterators-and-generators@TZ8XGdykSJjKBjX6Nivwo": "# Javascript Iterators and Generators\n\nIterators and generators, introduced into JavaScript with ECMAScript 6, represent an extremely useful concept related to iteration in the language. Iterators are objects, abiding by the iterator protocol, that allows us to easily iterate over a given sequence in various ways, such as using the `for...of` loop. Generators, on the other hand, allow us to use functions and the `yield` keyword to easily define iterable sequences that are iterators as well.\n\nVisit the following resources to learn more:\n\n- [@article@Introduction to Iterators - Advanced JavaScript](https://www.codeguage.com/courses/advanced-js/iteration-introduction)\n- [@article@A Detailed Discussion on Iterators - Advanced JavaScript](https://www.codeguage.com/courses/advanced-js/iteration-iterators)\n- [@article@What Exactly Are Generators? - Advanced JavaScript](https://www.codeguage.com/courses/advanced-js/iteration-generators)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "javascript-versions@SFPsWnVpZBAw3_re7op4h": "# Javascript Versions\n\nJavaScript, invented by Brendan Eich, achieved the status of an ECMA standard in 1997 and adopted the official name ECMAScript. This language has evolved through several versions, namely ES1, ES2, ES3, ES5, and the transformative ES6. These updates have played a crucial role in improving and standardizing JavaScript, making it widely used and valuable in the ever-changing field of web development.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Versions: How JavaScript has changed over the years](https://www.educative.io/blog/javascript-versions-history)\n- [@roadmap.sh@Brief History of JavaScript](https://roadmap.sh/guides/history-of-javascript)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "json@bFNvtHp97OzKnPJgr7WaH": "# JSON\n\nJavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa).\n\nVisit the following resources to learn more:\n\n- [@article@Working with JSON](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON)\n- [@video@JSON Tutorial for Beginners](https://www.youtube.com/watch?v=iiADhChRriM)\n",
    "keyed-collections@rhJrrqkRqy2Qw_he4SPGz": "# Keyed Collections\n\nKeyed collections are data collections that are ordered by key not index. They are associative in nature. Map and set objects are keyed collections and are iterable in the order of insertion.\n\nVisit the following resources to learn more:\n\n- [@article@Keyed collections](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections)\n- [@article@ES6 keyed collections- Maps and sets](https://blog.logrocket.com/es6-keyed-collections-maps-and-sets/)\n- [@video@Creating keyed collection](https://youtu.be/4UqSqF4foy4)\n",
    "let@kDRa9G3pMp0Cb0mqYUawM": "# [let] keyword\n\nThe `let` declaration declares a block-scoped local variable, optionally initializing it to a value.\n\nVisit the following resources to learn more:\n\n- [@article@let keyword - MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n- [@article@JavaScript Variables](https://javascript.info/variables)\n",
    "lexical-scoping@q7b5iMJ1Lfka5A-K-YcaN": "# Lexical scoping\n\nBefore one can make an intuition of closures in JavaScript, it's important to first get the hang of the term '**_lexical environment_**'. In simple words, the lexical environment for a function `f` simply refers to the environment enclosing that function's definition in the source code.\n\nVisit the following resources to learn more:\n\n- [@article@What is a lexical environment? - JavaScript - CodeGuage](https://www.codeguage.com/courses/js/functions-closures#What_is_a_lexical_environment)\n- [@article@Lexical scoping - JavaScript - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#lexical_scoping)\n",
    "logical-operators@bo4SvzU4BrPl3c99zW7Y5": "# Logical Operators\n\nThere are four logical operators in JavaScript: `||` (OR), `&&` (AND), `!` (NOT), `??` (Nullish Coalescing).\n\nVisit the following resources to learn more:\n\n- [@article@Logical Operators - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators)\n",
    "loops-and-iterations@YD-2l_amfqqqCdtc_Zdzo": "# Loops and Iterations\n\nLoops offer a quick and easy way to do something repeatedly.\n\nYou can think of a loop as a computerized version of the game where you tell someone to take X steps in one direction, then Y steps in another. For example, the idea \"Go five steps to the east\" could be expressed this way as a loop:\n\n```js\nfor (let step = 0; step < 5; step++) {\n  // Runs 5 times, with values of step 0 through 4.\n  console.log('Walking east one step');\n}\n```\n\nVisit the following resources to learn more:\n\n- [@article@Loops and iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "map@Xc0jL4rafpI-ixIaAxo9O": "# Map\n\n[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) is a collection of keyed data items, just like an `Object`. But the main difference is that `Map` allows keys of any type.\n\nVisit the following resources to learn more:\n\n- [@article@Map - Keyed Collections](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n- [@article@Map Data Type](https://javascript.info/map-set#map)\n",
    "memory-lifecycle@ZR2WfH1cerA-V_kaPwRvm": "# Memory lifecycle\n\nRegardless of the programming language, the memory life cycle is pretty much always the same:\n\n- Allocate the memory you need\n- Use the allocated memory (read, write)\n- Release the allocated memory when it is not needed anymore\n\nThe second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.\n\nVisit the following resources to learn more:\n\n- [@article@MDN docs - Memory Management](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management)\n- [@article@Lifecycle in Memory Management](https://medium.com/swlh/the-lifecycle-of-memory-in-javascript-5b5bffc5ff4c)\n",
    "memory-management@MatU4SthAAhByJ40XdZQn": "# Memory Management\n\nLow-level languages like C, have manual memory management primitives such as `malloc()` and `free()`. In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Garbage Collection](https://javascript.info/garbage-collection)\n- [@article@Memory Management in JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "modules-in-javascript@hLnJlwnECFbVMeFpH0M5Q": "# Modules\n\nModules encapsulate all sorts of code like functions and variables and expose all this to other files. Generally, we use it to break our code into separate files to make it more maintainable. They were introduced into JavaScript with ECMAScript 6.\n\nVisit the following resources to learn more:\n\n- [@article@Modules, introduction](https://javascript.info/modules-intro)\n- [@article@Export and Import](https://javascript.info/import-export)\n- [@article@Dynamic imports](https://javascript.info/modules-dynamic-imports)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "null@CxyNyFMuTLS3owtRMgClD": "# null\n\nThe `null` value in JavaScript signifies the deliberate absence of any object value. It is considered as one of JavaScript's primitive values and a `falsy` value.\n\n*Deliberate absence* emphasises the intentional use of `null` to indicate that a variable does not point to any object. This explicit declaration conveys the purposeful nature of null, showing that the variable is meant to be empty or non-existent at execution time.\n\nIn essence, `null` is a way to reset a variable, signalling that it should not reference any object.\n\nVisit the following resources to learn more:\n\n- [@article@What is null in JavaScript](https://www.altcademy.com/blog/what-is-null-in-javascript/)\n- [@article@null in JavaScript](https://masteringjs.io/tutorials/fundamentals/null)\n",
    "number@GZ_SXsWmP7AsXRTc4WUMw": "# number\n\nThe `Number` data type in JavaScript represents floating-point numbers, such as 37 or -9.25. The `Number` constructor provides constants and methods to work with numbers, and values of other types can be converted to numbers using the `Number()` function.\n\n## Example\n\n```js\nlet num1 = 255; // integer\nlet num2 = 255.0; // floating-point number with no fractional part\nlet num3 = 0xff; // hexadecimal notation\nlet num4 = 0b11111111; // binary notation\nlet num5 = 0.255e3; // exponential notation\n\nconsole.log(num1 === num2); // true\nconsole.log(num1 === num3); // true\nconsole.log(num1 === num4); // true\nconsole.log(num1 === num5); // true\n```\n\nIn this example:\n\n- `255` and `255.0` are equivalent, as JavaScript treats both as the same number.\n- `0xff` represents `255` in hexadecimal notation.\n- `0b11111111` represents `255` in binary notation.\n- `0.255e3` is `255` in exponential notation.\n- All these different representations are equal to `255` in JavaScript.\n",
    "object-prototype@0I6dJE0ygXPGjeRAe8AtT": "# Prototypes\n\nJavaScript is an object-oriented language built around a prototype model. In JavaScript, every object inherits properties from its prototype, if there are any. A prototype is simply an object from which another object inherits properties. To create complex programs using JavaScript, one has to be proficient in working with prototypes — they form the very core of OOP in the language.\n\nVisit the following resources to learn more:\n\n- [@article@Prototypes in JavaScript - A Comprehensive Guide](https://www.codeguage.com/courses/js/objects-prototypes)\n- [@article@Prototypes, Inheritance](https://javascript.info/prototypes)\n- [@article@Object prototypes - MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes)\n- [@video@Prototype in Javascript - Object Prototype](https://www.youtube.com/watch?v=583MGxjypgU)\n",
    "object@xe8HZ8Mt1fK8yJMcDPYHJ": "# Object\n\nJavaScript object is a data structure that allows us to have key-value pairs; so we can have distinct keys and each key is mapped to a value that can be of any JavaScript data type. Comparing it to a real-world object, a pen is an object with several properties such as color, design, the material it is made of, etc. In the same way, JavaScript objects can have properties that define their characteristics.\n\nVisit the following resources to learn more:\n\n- [@article@Objects](https://javascript.info/object)\n- [@article@Working with Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects)\n",
    "objectis@ATma3bLKdmWY_WTsPIKxh": "# Object.is\n\nThe Object.is() static method determines whether two values are the same value.\n\n```js\nconsole.log(Object.is('1', 1));\n// Expected output: false\n\nconsole.log(Object.is(NaN, NaN));\n// Expected output: true\n\nconsole.log(Object.is(-0, 0));\n// Expected output: false\n\nconst obj = {};\nconsole.log(Object.is(obj, {}));\n// Expected output: false\n```\n\nVisit the following resources to learn more:\n\n- [@article@Object.is() - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n",
    "promises@yXSF5gGST7l2X-4z1g0d_": "# Promises\n\nPromises are a much better way to work with asynchronous code in JavaScript than the old and error-prone callback approach. They were introduced into JavaScript with ECMAScript 6. Using promises, we can manage extremely complex asynchronous code with rigorous error-handling setup, write code in a more or less synchronous style, and keep ourselves from running into the so-called callback hell.\n\nVisit the following resources to learn more:\n\n- [@article@A Detailed Introduction to Promises](https://www.codeguage.com/courses/advanced-js/promises-introduction)\n- [@article@JavaScript Promises - Basics](https://www.codeguage.com/courses/advanced-js/promises-basics)\n- [@article@JavaScript Promises - Chaining](https://www.codeguage.com/courses/advanced-js/promises-chaining)\n- [@article@JavaScript Promises - Error Handling](https://www.codeguage.com/courses/advanced-js/promises-error-handling)\n- [@video@JavaScript Promises - Visualized](https://youtu.be/Xs1EMmBLpn4)\n",
    "prototypal-inheritance@Xge6eru1hRGobnOEHLZqv": "# Prototypal Inheritance\n\nThe Prototypal Inheritance is a feature in javascript used to add methods and properties in objects. It is a method by which an object can inherit the properties and methods of another object. Traditionally, in order to get and set the Prototype of an object, we use Object.getPrototypeOf and Object.setPrototypeOf.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n- [@article@Prototype Inheritance](https://javascript.info/prototype-inheritance)\n",
    "recursion@YJGhhFuWmFvhRKOg6nwON": "# Recursion\n\nOne of the most powerful and elegant concept of functions, recursion is when a function invokes itself. Such a function is called a **_recursive function_**. As recursion happens, the underlying code of the recursive function gets executed again and again until a terminating condition, called the _base case_, gets fulfilled. As you dive into the world of algorithms, you'll come across recursion in many many instances.\n\nVisit the following resources to learn more:\n\n- [@article@Recursion and Stack](https://javascript.info/recursion)\n- [@article@JavaScript Function Recursions - CodeGuage](https://www.codeguage.com/courses/js/functions-recursions)\n- [@article@Recursion - MDN](https://developer.mozilla.org/en-US/docs/Glossary/Recursion)\n- [@feed@Explore top posts about Recursion](https://app.daily.dev/tags/recursion?ref=roadmapsh)\n",
    "rest@-_6q0bIjQrvAaCWrVkASO": "# Rest Parameters\n\nThe rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent [variadic functions](https://en.wikipedia.org/wiki/Variadic_function) in JavaScript.\n\nVisit the following resources to learn more:\n\n- [@article@Rest Parameters - MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)\n- [@feed@Explore top posts about REST API](https://app.daily.dev/tags/rest-api?ref=roadmapsh)\n",
    "samevalue@nfMrC0eoXZl72H4o3VFEP": "# Same value\n\n[SameValue](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is) equality determines whether two values are functionally identical in all contexts.\n\nVisit the following resources to learn more:\n\n- [@article@Same-value equality using Object.is()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is)\n",
    "samevaluezero@fL3B2hkTgMb0oEwMiWJtK": "# Same value zero\n\n[SameValueZero](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) equality determines whether two values are functionally identical in all contexts with +0 and -0 are also considered equal.\n\nVisit the following resources to learn more:\n\n- [@article@Same-value-zero equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality)\n",
    "scope--function-stack@ISNzEYtrWe2v0R7Xfl5k-": "# Scope and function stack\n\n## Scope\n\nA space or environment in which a particular variable or function can be accessed or used. Accessibility of this variable or function depends on where it is defined.\n\nJavaScript has the following kinds of scopes:\n\n- **Global scope**: The default scope for all code running in script mode.\n- **Module scope**: The scope for code running in module mode.\n- **Function scope**: The scope created with a function.\n- **Block scope**: The scope created with a pair of curly braces (a block).\n\n## Function Stack (Call stack)\n\nThe function stack is how the interpreter keeps track of its place in a script that calls multiple functions, like which function is currently executing and which functions within that function are being called.\n\nVisit the following resources to learn more:\n\n- [@article@Function stack (call stack) - MDN](https://developer.mozilla.org/en-US/docs/Glossary/Call_stack)\n- [@article@Kinds of Scope - MDN](https://developer.mozilla.org/en-US/docs/Glossary/Scope)\n",
    "set@sciU68E13mcfL577y6Vim": "# Set\n\nThe `Set` object lets you store unique values of any type, whether [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) values or object references. A value in the `Set` may only occur once; it is unique in the `Set`'s collection.\n\nVisit the following resources to learn more:\n\n- [@article@Set - JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)\n- [@article@Set - ExploringJS](https://exploringjs.com/impatient-js/ch_sets.html)\n",
    "setinterval@jaC3XXudd7OBKwwCpoPFf": "# setInterval\n\nThe `setInterval()` method helps us to repeatedly execute a function after a fixed delay. It returns a unique interval ID which can later be used by the `clearInterval()` method, which stops further repeated execution of the function.\n\n`setInterval()` is similar to setTimeout, with a difference. Instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds):\n\nVisit the following resources to learn more:\n\n- [@article@Scheduling: setTimeout and setInterval](https://javascript.info/settimeout-setinterval)\n",
    "settimeout@wXypuqEmFLIubx-QQvDIr": "# setTimeout\n\nThe setTimeout runs a function after the specified period expires. Times are declared in milliseconds.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout)\n- [@video@setInterval and setTimeout: timing events](https://www.youtube.com/watch?v=kOcFZV3c75I)\n- [@video@Learn JavaScript setTimeout() in 6 minutes!](https://www.youtube.com/watch?v=shWr5DNVeCI)\n",
    "strict-mode@Xw8lb0xCWKmNs4KZfhBUy": "# Strict Mode\n\nJavaScript's strict mode is a way to opt-in to a restricted variant of JavaScript, thereby implicitly opting out of \"sloppy mode\". Strict mode isn't just a subset: it intentionally has different semantics from regular code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist so that scripts can opt into strict mode incrementally.\n\nStrict mode makes several changes to normal JavaScript semantics:\n\n- Eliminates some JavaScript silent errors by changing them to throw errors.\n- Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes run faster than identical code that's not strict mode.\n- Prohibits some syntax likely to be defined in future versions of ECMAScript.\n\nVisit the following resources to learn more:\n\n- [@article@Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\n- [@article@Strict mode in JavaScript](https://javascript.info/strict-mode)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "string-operators@c38b6t5f17Zg2O2yg3eFP": "# String Operators\n\nIn addition to the comparison operators, which can be used on string values, the concatenation operator (`+`) concatenates two string values together, returning another string that is the union of the two operand strings.\n\nThe shorthand assignment operator `+=` can also be used to concatenate strings.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Tutorials](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#string_operators)\n- [@article@String Concatenation - JavaScript.info](https://javascript.info/operators#string-concatenation-with-binary)\n",
    "string@1RcwBHU3jzx0YxxUGZic4": "# String\n\nString is a primitive type that holds a sequence of characters. String in Javascript is written within a pair of single quotation marks `''`, double quotation marks `\"\"`, or backticks ` `` ` (template literals). All types of quotes can be used to contain a string but only if the starting quote is the same as the end quote.\n\nVisit the following resources to learn more:\n\n- [@article@String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\n- [@article@JavaScript Strings](https://javascript.info/string)\n",
    "structured-data@JwLGAuSOTyZ5BHSqeBDU6": "# Structured data\n\nStructured data is used by search-engines, like Google, to understand the content of the page, as well as to gather information about the web and the world in general.\n\nIt is also coded using in-page markup on the page that the information applies to.\n\nVisit the following resources to learn more:\n\n- [@article@Google Developers docs](https://developers.google.com/search/docs/appearance/structured-data/intro-structured-data)\n",
    "subtopic-node@_JUZE26_bShEpWNjLXzga": "# subtopic node",
    "switch@H_QlcUlavKKfcNK8CYAvb": "# Switch Case\n\nThe `switch` statement evaluates an expression, matching the expression's value against a series of `case` clauses, and executes statements after the first `case` clause with a matching value, until a `break` statement is encountered. The `default` clause of a `switch` statement will be jumped to if no `case` matches the expression's value.\n\n## Example\n\n```js\nswitch (expression) {\n  case value1:\n    //Statements executed when the result of expression matches value1\n    break;\n  case value2:\n    //Statements executed when the result of expression matches value2\n    break;\n  ...\n  case valueN:\n    //Statements executed when the result of expression matches valueN\n    break;\n  default:\n    //Statements executed when none of the values match the value of the expression\n    break;\n}\n```\n\nVisit the following resources to learn more:\n\n- [@article@switch - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)\n- [@article@The `switch` Statement: Why, What and How - CodeGuage](https://www.codeguage.com/courses/js/conditions-switch)\n- [@article@The switch statement - javascript.info](https://javascript.info/switch)\n",
    "symbol@R6ICrk6vjoBxx5nRGo4Jg": "# Symbol\n\nSymbols are a unique and immutable primitive data type in JavaScript, introduced in ECMAScript 6 (ES6). They are often used to create unique property keys for objects, ensuring no property key collisions occur. Each Symbol value is distinct, even when multiple are created with the same description. Symbols can be created using the Symbol() function, and their primary use case is to add hidden or special properties to objects that won’t interfere with other properties or methods.\n\nLearn more from the following resources:\n\n- [@article@Symbol data type in JavaScript](https://www.javascripttutorial.net/symbol/)\n- [@article@Symbol type](https://javascript.info/symbol)\n- [@article@Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n- [@video@Symbols in Javascript](https://www.youtube.com/watch?v=E5Bblr-SFbA)\n\n",
    "throw-statement@ReGIniyLYl5hGExchrJd2": "# Throw Statement\n\nThe throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate. (excerpt from MDN)\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-us/docs/web/javascript/reference/statements/throw)\n- [@article@Error Handling](https://javascript.info/error-handling)\n- [@article@\"Throw\" operator](https://javascript.info/try-catch#throw-operator)\n",
    "trycatchfinally@rbjEZe5vxCJ8reI1oZ-jf": "# Try, Catch, Finally\n\nThese are ways of handling errors in your JavaScript code. Inside the try code block we have the code to run, inside the catch block we handle the errors, and inside the finally block we have code that runs after the execution of the previous code blocks, regardless of the result.\n\nVisit the following resources to learn more:\n\n",
    "type-casting@XPmBieVCXvL3WbWkYRoKr": "# Type Casting\n\nType conversion (or typecasting) means the transfer of data from one data type to another. Implicit conversion happens when the compiler (for compiled languages) or runtime (for script languages like [JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/JavaScript)) automatically converts data types. The source code can also explicitly require a conversion to take place.\n\nVisit the following resources to learn more:\n\n- [@article@Type Conversions](https://javascript.info/type-conversions)\n- [@article@Type Casting in JavaScript](https://www.tutorialspoint.com/type-casting-in-javascript)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "type-conversion-vs-coercion@_Bo2YZqZ_gY35SLPML4T6": "# Type Conversion/Coercion\n\nType coercion is the automatic or implicit conversion of values from one data type to another (such as strings to numbers). Type conversion is similar to type coercion because they convert values from one data type to another with one key difference — type coercion is implicit. In contrast, type conversion can be either implicit or explicit.\n\nVisit the following resources to learn more:\n\n- [@article@Type Conversion - MDN](https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion)\n- [@article@Type Coercion - MDN](https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion)\n- [@video@Type Conversion and Coercion video](https://www.youtube.com/watch?v=jfQyMPzPTjY)\n",
    "typed-arrays@8X1mdQ3NDBVOZZWBbAFRE": "# Typed Arrays\n\nIn Javascript, a typed array is an array-like buffer of binary data. There is no JavaScript property or object named TypedArray, but properties and methods can be used with typed array objects.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)\n- [@video@Intro to Typed Arrays in JavaScript](https://www.youtube.com/watch?v=UYkJaW3pmj0)\n",
    "typeof-operator@RRACLQ6-aopkxImIp3Toc": "# `typeof` Operator\n\nYou can use the typeOf operator to find the data type of a JavaScript variable. It returns a string indicating the type of provided operand's value.\n\nVisit the following resources to learn more:\n\n- [@article@typeof Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n",
    "unary-operators@k9rSR-YQ8B_iRcXNm2btP": "# Unary Operators\n\nJavaScript Unary Operators are the special operators that consider a single operand and perform all the types of operations on that single operand. These operators include unary plus, unary minus, prefix increments, postfix increments, prefix decrements, and postfix decrements.\n\nVisit the following resources to learn more:\n\n- [@article@Unary Operators in JavaScript](https://www.educba.com/unary-operators-in-javascript/)\n- [@article@Unary Operators - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#unary_operators)\n",
    "undefined@ZLs0NKM0lrnOy5ATDhlk0": "# undefined\n\nundefined is a Primitive data type in Javascript.\n\nWhenever a variable is declared but not initialized or assigned a value, then it is stored as undefined. A function returns undefined if a value was not returned. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value.\n\nVisit the following resources to learn more:\n\n- [@video@undefined in JS](https://www.youtube.com/watch?v=B7iF6G3EyIk&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=8)\n",
    "using-browser-devtools@rc5WzBBOm2cus-rQl8EOE": "# JavaScript Chrome Dev Tools\n\nThese are a set of tools built into the browser to aid frontend developers diagnose and solve various issues in their applications — such as JavaScript and logical bugs, CSS styling issues or even just making quick temporary alterations to the DOM.\n\nTo enter the dev tools, right click and click **Inspect** (or press `ctrl+shift+c`/`cmd+opt+c`) to enter the Elements panel. Here you can debug CSS and HTML issues. If you want to see logged messages or interact with javascript, enter the **Console** tab from the tabs above (or press `ctrl+shift+j` or `F12` / `cmd+opt+j` to enter it directly). Another very useful feature in the Chrome dev tools is the Lighthouse (for checking performance).\n\nNOTE: This isn't a chrome-specific feature, and most browsers (Chromium based or otherwise) will have their own, largely-similar set of devtools.\n\nVisit the following resources to learn more:\n\n- [@official@Official Docs](https://developer.chrome.com/docs/devtools/)\n- [@official@Debug JavaScript with Chrome Dev Tools](https://developer.chrome.com/docs/devtools/javascript/)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "using-it-alone@qps2Mdm-lwa4Wr0IxKm0C": "# Using this alone\n\nThe keyword `this` when used alone refers to the global object.\n\n_Note: in a browser window the global object is the `window` object._\n\nVisit the following resources to learn more:\n\n",
    "using-this-keyword@fm2CuL1IZp3hnrLrPUX7U": "# This Keyword\n\nIn JavaScript, the `this` keyword is a little different compared to other languages. It refers to an object, but it depends on how or where it is being invoked. It also has some differences between strict mode and non-strict mode.\n\n- In an object method, `this` refers to the object\n- Alone, `this` refers to the global object\n- In a function, `this` refers to the global object\n- In a function, in strict mode, `this` is undefined\n- In an event, `this` refers to the element that received the event\n- Methods like call(), apply(), and bind() can refer `this` to any object\n\nVisit the following resources to learn more:\n\n- [@article@This Keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "var@JSjeM8qnBg4onXq9mn5gB": "# [var] keyword\n\nThe var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.\n\nVisit the following resources to learn more:\n\n- [@article@var keyword - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\n- [@article@JavaScript Variables](https://javascript.info/variables)\n- [@video@Declaring Variables without Var, Let, Const - What Would Happen?](https://www.youtube.com/watch?v=6UAKBYpUC-Y)\n",
    "variable-declarations@BqbAWt--Guqex-rrb4ZUv": "# Variable Declarations\n\nTo use variables in JavaScript, we first need to create it i.e. declare a variable. To declare variables, we use one of the `var`, `let`, or `const` keywords.\n\nVisit the following resources to learn more:\n\n- [@article@Storing the information you need — Variables](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables)\n- [@article@JavaScript Variables - CodeGuage](https://www.codeguage.com/courses/js/variables)\n",
    "variable-naming-rules@HfieG3v3wnmpZDfNwEJvZ": "# Naming Rules\n\nA variable name should accurately identify your variable. When you create good variable names, your JavaScript code becomes easier to understand and easier to work with. Properly naming variables is really important. JavaScript also has some rules when it comes to naming variables; read about these rules through the links below.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Variable Naming Tips - CodeGuage](https://www.codeguage.com/courses/js/variables#Tips_for_naming_variables)\n- [@article@Understanding Variables in JavaScript](https://www.informit.com/articles/article.aspx?p=131025&seqNum=3)\n- [@article@Naming JavaScript Variables](https://www.dummies.com/article/technology/programming-web-design/javascript/naming-javascript-variables-142522/)\n- [@article@JavaScript Naming Conventions](https://www.robinwieruch.de/javascript-naming-conventions/)\n- [@article@Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)\n",
    "variable-scopes@7iMJuaB7yKlSIbT4dBe5L": "# Scopes\n\nIn JavaScript, scope refers to the visibility of a variable or how it can be used after it is declared. The scope of a variable depends on the keyword that was used to declare it.\n\nThe three types of Scope are Global Scope, Function Scope, and Block Scope. Before ES6 (2015), JavaScript had only Global Scope and Function Scope with the `var` keyword. ES6 introduced `let` and `const` which allow Block Scope in JavaScript.\n\nGlobal Scope: Variables declared outside any function or curly braces '{}' have Global Scope, and can be accessed from anywhere within the same Javascript code. `var`, `let` and `const` all provide this Scope.\n\nFunction Scope: Variables declared within a function can only be used within that same function. Outside that function, they are undefined. `var`, `let` and `const` all provide this Scope.\n\nBlock Scope: A block is any part of JavaScript code bounded by '{}'. Variables declared within a block can not be accessed outside that block. This Scope is only provided by the `let` and `const` keywords. If you declare a variable within a block using the `var` keyword, it will NOT have Block Scope.\n\nLocal Scope: Local variables are only recognized inside their functions, variables with the same name can be used in different functions. Local variables are created when a function starts, and deleted when the function is completed. `var`, `let` and `const` all provide this Scope.\n\nVisit the following resources to learn more:\n\n- [@article@javascript scope](https://wesbos.com/javascript/03-the-tricky-bits/scope)\n- [@video@Understanding Global Local Function Block Scope](https://www.youtube.com/watch?v=_E96W6ivHng)\n",
    "weak-map@6icsjC4aisDgPWasVuCOt": "# Weak map\n\n[WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) is a Map-like collection of key/value pairs whose keys must be objects, it removes them once they become inaccessible by other means\n\nVisit the following resources to learn more:\n\n- [@article@WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)\n- [@article@WeakMap and WeakSet](https://javascript.info/weakmap-weakset)\n",
    "weak-set@DSFzj61N9ojz29mjExhVa": "# WeakSet\n\n`WeakSet` objects are collections of objects. Just as with `Sets`, each object in a `WeakSet` may occur only once; all objects in a `WeakSet`'s collection are unique.\n\nVisit the following resources to learn more:\n\n- [@article@WeakSet](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet)\n- [@article@WeakMap and WeakSet](https://javascript.info/weakmap-weakset)\n",
    "what-is-javascript@UBB-8hUcwo4Mfd0cmEcdA": "# What is JavaScript?\n\nJavaScript, often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. It lets us add interactivity to pages e.g. you might have seen sliders, alerts, click interactions, popups, etc on different websites -- all of that is built using JavaScript. Apart from being used in the browser, it is also used in other non-browser environments as well such as Node.js for writing server-side code in JavaScript, Electron for writing desktop applications, React Native for mobile applications, and so on.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)\n- [@article@The Modern JavaScript Tutorial](https://javascript.info/)\n- [@article@A Comprehensive Course on JavaScript with Quizzes and Exercises - CodeGuage](https://www.codeguage.com/courses/js/)\n- [@article@Exploring JS: JavaScript books for programmers](https://exploringjs.com/)\n- [@video@JavaScript Crash Course for Beginners](https://youtu.be/hdI2bqOjy3c?t=2)\n- [@video@Build a Netflix Landing Page Clone with HTML, CSS & JS](https://youtu.be/P7t13SGytRk?t=22)\n- [@video@Learn JavaScript - Full Course for Beginners](https://www.youtube.com/watch?v=PkZNo7MFNFg)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "while@9-MpHmzK_IiCi6IcvAlGM": "# while statement\n\nThe `while` statement creates a loop that executes a specified statement as long as the test condition evaluates to `true`. The condition is evaluated before executing the statement.\n\nVisit the following resources to learn more:\n\n- [@article@While Statement - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)\n- [@article@The while Loop - CodeGuage](https://www.codeguage.com/courses/js/loops-while-loop)\n",
    "working-with-apis@q6vciQb_Jk-Up16Pk5NeE": "# Working with APIs\n\nWhen working with remote APIs, you need a way to interact with those APIs. Modern JavaScript provides two native ways to send HTTP requests to remote servers, `XMLHttpRequest` and `Fetch`.\n\nVisit the following resources to learn more:\n\n- [@article@Fetching data from the server](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data)\n- [@article@XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n- [@article@Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n- [@article@Is fetch API better than XMLHTTPRequest](https://medium.com/beginners-guide-to-mobile-web-development/the-fetch-api-2c962591f5c)\n- [@article@Ajax Battle: XMLHttpRequest vs the Fetch API](https://blog.openreplay.com/ajax-battle-xmlhttprequest-vs-fetch/)\n",
    "xmlhttprequest@LiuhBE7dIlkoWkthSoCsa": "# XMLHttpRequest\n\n`XMLHttpRequest` (XHR) is a built-in browser object that can be used to interact with server. XHR allows you to update data without having to reload a web page. Despite the word XML in its name, XHR not only used to retrieve data with XML format, we can use it with any type of data, like JSON, file(s), and much more.\n\nVisit the following resources to learn more:\n\n- [@article@Using XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)\n- [@article@Network request - XMLHttpRequest](https://javascript.info/xmlhttprequest)\n"
  },
  "javascript": "---\njsonUrl: '/jsons/roadmaps/javascript.json'\npdfUrl: '/pdfs/roadmaps/javascript.pdf'\nrenderer: 'editor'\norder: 5\nbriefTitle: 'JavaScript'\nbriefDescription: 'Step by step guide to learn JavaScript in 2025'\ntitle: 'JavaScript Roadmap'\ndescription: 'Step by step guide to learn JavaScript in 2025'\nisNew: false\nhasTopics: true\ndimensions:\n  width: 968\n  height: 2550\nschema:\n  headline: 'JavaScript Roadmap'\n  description: 'Learn JavaScript with this interactive step by step guide in 2025. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/javascript.png'\n  datePublished: '2023-01-05'\n  dateModified: '2023-01-20'\nquestion:\n  title: 'What is JavaScript?'\n  description: |\n    JavaScript is a very flexible and versatile programming language, considered as a core technology for web development. This is because it is the only language natively supported by all browsers, allowing developers to add dynamic behavior and create complex user experiences with this language. \n    \n    Because of its flexibility and portability, JavaScript is also widely used for back-end development (thanks to runtimes such as Node.js, Bun, and Deno) and even server-side scripting (for automation and for creating developer tools).\n    \n    ## What does a JavaScript developer do?\n    \n    A JavaScript developer writes and maintains code to build interactive web applications, back-end logic (usually RESTful APIs), or some automation work. \n    \n    If they're focused on front-end development, their work usually involves designing dynamic user interfaces and integrating them with REST APIs (usually) to connect with back-end systems.\n    \n    If, on the other hand, they're focused on back-end development, then most likely, they're spending most of their time developing APIs using a back-end framework like NextJS.\nseo:\n  title: 'JavaScript Developer Roadmap: Step by step guide to learn JavaScript'\n  description: 'Community driven, articles, resources, guides, interview questions, quizzes for javascript development. Learn to become a modern JavaScript developer by following the steps, skills, resources and guides listed in this roadmap.'\n  keywords:\n    - 'javascript guide 2024'\n    - 'javascript guide 2025'\n    - 'learn javascript'\n    - 'step by step javascript guide'\n    - 'javascript roadmap 2024'\n    - 'javascript roadmap 2025'\n    - 'javascript developer roadmap 2024'\n    - 'javascript developer roadmap 2025'\n    - 'guide to becoming a javascript developer'\n    - 'javascript developer roadmap'\n    - 'javascript roadmap'\n    - 'become javascript developer'\n    - 'javascript developer skills'\n    - 'javascript skills test'\n    - 'skills for javascript development'\n    - 'learn javascript development'\n    - 'what is javascript'\n    - 'javascript quiz'\n    - 'javascript interview questions'\nrelatedRoadmaps:\n  - 'nodejs'\n  - 'typescript'\n  - 'frontend'\n  - 'backend'\n  - 'react'\n  - 'angular'\n  - 'vue'\nrelatedQuestions:\n  - 'javascript'\n  - 'react'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'skill-roadmap'\n---\n",
  "migration-mapping": {
    "javascript-introduction": "6khAD6mzZ9S96JJuC5_j6",
    "javascript-variables": "kvActjpU4FUJdrmuFoFEe",
    "javascript-introduction:what-is-javascript": "UBB-8hUcwo4Mfd0cmEcdA",
    "javascript-introduction:history-of-javascript": "l-GKzcsBNA0r6Jax8hwnP",
    "javascript-introduction:javascript-versions": "SFPsWnVpZBAw3_re7op4h",
    "javascript-introduction:how-to-run-javascript": "uXsWIUUxtc4H_iRx3uZv0",
    "javascript-variables:hoisting": "Lb5jLF91WO5V5CWpifciW",
    "javascript-variables:variable-declarations": "BqbAWt--Guqex-rrb4ZUv",
    "javascript-variables:naming-rules": "HfieG3v3wnmpZDfNwEJvZ",
    "javascript-variables:scopes": "7iMJuaB7yKlSIbT4dBe5L",
    "javascript-variables:scopes:block": "uqEzHYx13Y2EpvTTRzykn",
    "javascript-variables:scopes:function": "YMT7O6lrMSMtNo0EnmsnQ",
    "javascript-variables:scopes:global": "oC4o6GLEES_nUgCJu9Q6I",
    "javascript-variables:variable-declarations:var": "JSjeM8qnBg4onXq9mn5gB",
    "javascript-variables:variable-declarations:let": "kDRa9G3pMp0Cb0mqYUawM",
    "javascript-variables:variable-declarations:const": "q85z6x1Lc-yLWepwtIT2_",
    "javascript-datatypes": "-jbPPuEXacBR0d0CWPHgd",
    "javascript-datatypes:primitive-types": "1RcwBHU3jzx0YxxUGZic4",
    "javascript-datatypes:object:prototypal-inheritance": "Xge6eru1hRGobnOEHLZqv",
    "javascript-datatypes:object:prototype": "0I6dJE0ygXPGjeRAe8AtT",
    "javascript-datatypes:object": "xe8HZ8Mt1fK8yJMcDPYHJ",
    "javascript-datatypes:typeof-operator": "RRACLQ6-aopkxImIp3Toc",
    "javascript-datatypes:object:builtin-objects": "D95ndkkwmT5X_HqboEn6E",
    "javascript-type-casting": "XPmBieVCXvL3WbWkYRoKr",
    "javascript-type-casting:type-conversion-coercion": "_Bo2YZqZ_gY35SLPML4T6",
    "javascript-type-casting:explicit-type-casting": "1xhjrRN-Rfekei2JwwU7Y",
    "javascript-type-casting:implicit-type-casting": "pP42K_eH4RCdUdUS8BJlP",
    "javascript-data-structures": "ADarwihuI2nBq1C3U7-Zr",
    "javascript-data-structures:keyed-collections": "rhJrrqkRqy2Qw_he4SPGz",
    "javascript-data-structures:keyed-collections:map": "Xc0jL4rafpI-ixIaAxo9O",
    "javascript-data-structures:keyed-collections:weak-map": "6icsjC4aisDgPWasVuCOt",
    "javascript-data-structures:keyed-collections:set": "sciU68E13mcfL577y6Vim",
    "javascript-data-structures:keyed-collections:weak-set": "DSFzj61N9ojz29mjExhVa",
    "javascript-data-structures:structured-data": "JwLGAuSOTyZ5BHSqeBDU6",
    "javascript-data-structures:structured-data:json": "bFNvtHp97OzKnPJgr7WaH",
    "javascript-data-structures:indexed-collections": "lBOGoHZrmnIRatvryDwTm",
    "javascript-data-structures:indexed-collections:typed-arrays": "8X1mdQ3NDBVOZZWBbAFRE",
    "javascript-data-structures:indexed-collections:arrays": "NZedBxG9B9TRVOf2QE2yL",
    "javascript-equality-comparisons": "23Xa6q5VvRVlzc6Dx8vST",
    "javascript-equality-comparisons:value-comparison-operators": "RonBj1htt6jnBt3W7zoTA",
    "javascript-equality-comparisons:equality-algorithms:is-loosely-equal": "PLallt_T33W6bUEn0Hc3W",
    "javascript-equality-comparisons:equality-algorithms:is-strictly-equal": "pcILon_Jjm2_XS10iUJ0E",
    "javascript-equality-comparisons:equality-algorithms:same-value-zero": "fL3B2hkTgMb0oEwMiWJtK",
    "javascript-loops-iterations": "YD-2l_amfqqqCdtc_Zdzo",
    "javascript-loops-iterations:for-statement": "2M211rcaPSWbZ-sPoSEVR",
    "javascript-loops-iterations:do-while-statement": "57lO_3uxJaWsFXS-0J1AK",
    "javascript-loops-iterations:while-statement": "9-MpHmzK_IiCi6IcvAlGM",
    "javascript-control-flow:conditional-statements:if-else": "ndbDXAx6bL4lZmpXv16Y_",
    "javascript-control-flow:conditional-statements:switch": "H_QlcUlavKKfcNK8CYAvb",
    "javascript-loops-iterations:for-in-statement": "cq3vvFZoNnAAZJ6oEBUwb",
    "javascript-loops-iterations:for-of-statement": "FBz6h_AmTJBXoBN-a38a5",
    "javascript-loops-iterations:break-continue": "4oHFzn7R7xLxfuLpsJjr-",
    "javascript-control-flow": "3tckJ2Sci7z-sNx9jx9eF",
    "javascript-control-flow:conditional-statements": "ttCsd2_H2SuRivCjGv1OX",
    "javascript-control-flow:exception-handling": "34TKGxV9YziOWMh9rT_KE",
    "javascript-control-flow:exception-handling:throw-statement": "ReGIniyLYl5hGExchrJd2",
    "javascript-control-flow:exception-handling:try-catch-finally": "rbjEZe5vxCJ8reI1oZ-jf",
    "javascript-control-flow:exception-handling:utilizing-error-objects": "-z-4VTaC3tOThqChgyoMs",
    "javascript-expressions-and-operators": "_6vZa43gWjxO2OcD1iCCQ",
    "javascript-expressions-and-operators:assignment-operators": "IvBtUzIGnkgGXrJjqmjf4",
    "javascript-expressions-and-operators:omparison-operators": "-v4_V4UuoZSgUk2sqOCim",
    "javascript-expressions-and-operators:arithmetic-operators": "0PK1NwlgkNe2Vf-We4uLH",
    "javascript-expressions-and-operators:bitwise-operators": "ghjNJW67Wj5L5QK46xwL-",
    "javascript-expressions-and-operators:logical-operators": "bo4SvzU4BrPl3c99zW7Y5",
    "javascript-expressions-and-operators:bigint-operators": "udoz0DZi7f-vm30dSnYKu",
    "javascript-expressions-and-operators:string-operators": "c38b6t5f17Zg2O2yg3eFP",
    "javascript-expressions-and-operators:conditional-operators": "640mk-m5mB90Mme-7jcXV",
    "javascript-expressions-and-operators:comma-operators": "6_8EwyZY2jBkZr7xnfRY3",
    "javascript-expressions-and-operators:unary-operators": "k9rSR-YQ8B_iRcXNm2btP",
    "javascript-expressions-and-operators:relational-operators": "BbrrliATuH9beTypRaFey",
    "javascript-functions": "k8bJH9qydZm8I9rhH7rXw",
    "javascript-functions:function-parameters": "R1D4fsZliHv7wIo8Tj-kp",
    "javascript-functions:arrow-functions": "fr0NChxMXLpJizyMhXcXS",
    "javascript-functions:function-parameters:default-params": "8X8mRl-puL0Lp43dO5mha",
    "javascript-functions:function-parameters:rest-params": "-_6q0bIjQrvAaCWrVkASO",
    "javascript-functions:iifes": "YZlCoPvZuX5MmpLOTj5d4",
    "javascript-functions:arguments-object": "QLC7bW-qHskLH2HOA-Sko",
    "javascript-functions:scope-and-function-stack": "ISNzEYtrWe2v0R7Xfl5k-",
    "javascript-functions:built-in-functions": "s8wUJivWmetysJ8bt9FBC",
    "javascript-functions:scope-and-function-stack:recursion": "YJGhhFuWmFvhRKOg6nwON",
    "javascript-functions:scope-and-function-stack:lexical-scoping": "q7b5iMJ1Lfka5A-K-YcaN",
    "javascript-functions:scope-and-function-stack:closures": "itS6B12I8I1KNCPvc0KCQ",
    "javascript-strict-mode": "Xw8lb0xCWKmNs4KZfhBUy",
    "javascript-this-keyword": "fm2CuL1IZp3hnrLrPUX7U",
    "javascript-this-keyword:function-borrowing": "EAN6DCiCfSq04R4vKgZ0q",
    "javascript-this-keyword:explicit-binding": "p2NhSwPYMtRiPRHjPaqmX",
    "javascript-this-keyword:this-in-a-method": "3E5MuxPvEJU-dwgTrbQAR",
    "javascript-this-keyword:this-in-a-function": "azsXq6Y5iCvQDgTWZpWQ3",
    "javascript-this-keyword:using-this-alone": "qps2Mdm-lwa4Wr0IxKm0C",
    "javascript-this-keyword:this-in-event-handlers": "JVbEBtVrTTFnTF3_yUIAC",
    "javascript-this-keyword:this-in-arrow-functions": "P0190rTm2wLQmCzWOKour",
    "javascript-asynchronous-javascript": "sFOqx6_7poVIVuXhJVY0E",
    "javascript-asynchronous-javascript:event-loop": "_bs5NNHVdHLWGBmpYwHMi",
    "javascript-asynchronous-javascript:set-timeout": "wXypuqEmFLIubx-QQvDIr",
    "javascript-asynchronous-javascript:set-interval": "jaC3XXudd7OBKwwCpoPFf",
    "javascript-asynchronous-javascript:callbacks": "D8oGY7pdviRByaz6c9sU6",
    "javascript-asynchronous-javascript:callbacks:callback-hell": "PJSdqvh5OBwPCNpn3q_S5",
    "javascript-asynchronous-javascript:promises": "yXSF5gGST7l2X-4z1g0d_",
    "javascript-asynchronous-javascript:promises:async-await": "Dn872mgexmxoLtbkIgIgz",
    "working-with-apis": "q6vciQb_Jk-Up16Pk5NeE",
    "working-with-apis:xml-http-request": "LiuhBE7dIlkoWkthSoCsa",
    "working-with-apis:fetch": "kL5rfWxXe4J44ENru1uJS",
    "javascript-iterators-and-generators": "TZ8XGdykSJjKBjX6Nivwo",
    "javascript-classes": "F_Lrj0F7UXriqJ0mhwxCy",
    "javascript-modules": "hLnJlwnECFbVMeFpH0M5Q",
    "javascript-modules:commonjs": "4EXeGkOpfAViB9Uo4zL6O",
    "javascript-modules:esm": "jLNmYeo20Mbu4WRvVgvwU",
    "javascript-memory-management": "MatU4SthAAhByJ40XdZQn",
    "javascript-memory-management:memory-lifecycle": "ZR2WfH1cerA-V_kaPwRvm",
    "javascript-memory-management:garbage-collection": "KKyX8N4lTgN0w-Khm6Ztq",
    "javascript-chrome-dev-tools": "rc5WzBBOm2cus-rQl8EOE",
    "javascript-chrome-dev-tools:debugging-issues": "dhEtcgv7G9fNV-AUNJdWk",
    "javascript-chrome-dev-tools:debugging-memory-leaks": "BA_ArmZMnVMaL_zl3W3Pt",
    "javascript-chrome-dev-tools:debugging-performance": "ECxISKUAU7js_JsfSHzud"
  }
}