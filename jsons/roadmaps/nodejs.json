{
  "content": {
    "--watch@812bVEzxwTsYzLG_PmLqN": "# --watch\r\n\r\nThe `--watch` flag in Node.js is a powerful feature introduced in Node.js version 19 that enables automatic reloading of your Node.js application whenever changes are detected in the specified files.\r\n\r\nHere's How it works:\r\n\r\n- You run your Node.js script with the `--watch` flag: `$ node --watch your_script.js`\r\n- Node.js starts watching the specified file (or directory) for changes.\r\n- Whenever a change is detected, Node.js automatically restarts the script\r\n\r\nVisit the following resources to learn more:\r\n\r\n- [@official@Node.js CLI](https://nodejs.org/api/cli.html)\r\n- [@official@Node.js --watch Docs](https://nodejs.org/api/cli.html#--watch)\r\n- [@article@Medium - Watch Mode](https://medium.com/@khaled.smq/built-in-nodejs-watch-mode-52ffadaec8a8)\r\n",
    "assertion-errors@do-tdCUfDtiZHBg4ZO3dC": "# Assertion Errors\n\nAn `AssertionError` in Node.js is an error that is thrown when the `assert` module determines that a given expression is not truthy. The `assert` module is a built-in Node.js module that provides a simple set of assertion tests that can be used to test the behavior of your code.\n\nVisit the following resources to learn more:\n\n- [@official@Node.js Assert](https://nodejs.org/api/assert.html#new-assertassertionerroroptions)\n- [@article@Node.js Error Handling - AssertionError](https://blog.airbrake.io/blog/nodejs-error-handling/assertionerror-nodejs)\n",
    "async-programming@uE7fvHSTSdebMf5RsNyaY": "# Async Programming\n\nAsynchronous code means that things can happen independently of the main program flow, async functions in JavaScript are processed in the background without blocking other requests. It ensures non-blocking code execution. Asynchronous code executes without having any dependency and no order. This improves the system efficiency and throughput. Making web apps requires knowledge of asynchronous concepts since we will be dealing with actions that require some time to get processed.\n\nVisit the following resources to learn more:\n\n- [@article@Introduction to Async JS](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing/)\n- [@video@Asynchronous Vs Synchronous Programming](https://www.youtube.com/watch?v=Kpn2ajSa92c)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "asyncawait@a26qNCyMcT5GsVzxeNCLk": "# Async/Await\n\nAsync/Await is a special syntax to work with promises in a more comfortable fashion. It's easy to understand and use. Adding the keyword async before a function ensures that the function returns a promise and the keyword await makes JavaScript wait until that promise settles and returns the result.\n\nVisit the following resources to learn more:\n\n- [@official@Async/Await Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n- [@article@More on async await](https://javascript.info/async-await)\n- [@video@Using async await](https://www.youtube.com/watch?v=V_Kr9OSfDeU)\n- [@article@W3Docs Async/Await](https://www.w3docs.com/learn-javascript/async-await.html)\n",
    "axios@BOLiZg8YDKADMwP01U5ph": "# Axios\n\nAxios is a promise-based HTTP Client for node.js and the browser. Used for making requests to web servers. On the server-side it uses the native node.js http module, while on the client (browser) it uses XMLHttpRequests.\n\nVisit the following resources to learn more:\n\n- [@official@Axios Documentation](https://axios-http.com/docs/intro)\n- [@video@Axios Tutorial](https://www.youtube.com/watch?v=6LyagkoRWYA)\n- [@feed@Explore top posts about Axios](https://app.daily.dev/tags/axios?ref=roadmapsh)\n",
    "building--consuming-apis@fFVCb6aZWRHdNDFt5C09R": "# APIs\n\nAPI is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.\n\nVisit the following resources to learn more:\n\n- [@article@What is an API?](https://aws.amazon.com/what-is/api/)\n- [@video@What is an API (in 5 minutes)](https://youtu.be/ByGJQzlzxQg?si=9EB9lgRvEOgt3xPJ)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "callbacks@GwInWcbQn18PnzKGXzmln": "# Callbacks\n\nNode.js, being an asynchronous platform, doesn't wait around for things like file I/O to finish - Node.js uses callbacks. A callback is a function called at the completion of a given task; this prevents any blocking, and allows other code to be run in the meantime.\n\nVisit the following resources to learn more:\n\n- [@official@Asynchronicity in Programming Languages](https://nodejs.org/en/learn/asynchronous-work/javascript-asynchronous-programming-and-callbacks)\n- [@article@What are Callbacks?](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function)\n",
    "callstack--stack-trace@wIieXdFtoZWJ-ht8qqWbp": "# Stack Trace\n\nThe stack trace is used to trace the active stack frames at a particular instance during the execution of a program. The stack trace is useful while debugging code as it shows the exact point that has caused an error.\n\nVisit the following resources to learn more:\n\n- [@article@Multiple Ways to Log The Stack Trace in Node.js](https://www.cloudhadoop.com/nodejs-print-stack-trace-error/)\n",
    "chalk-package@V4OWIC1cnw8EFyu26Y_dA": "# Chalk\n\nChalk is a clean and focused library used to do string styling in your terminal applications. With it, you can print different styled messages to your console such as changing font colors, font boldness, font opacity, and the background of any message printed on your console.\n\nVisit the following resources to learn more:\n\n- [@opensource@Chalk Docs](https://github.com/chalk/chalk#readme)\n",
    "child-process@lzPrWD3pxQmpbqgYPL-zW": "# Child Process\n\nThe child_process module gives the node the ability to run the child process, established through IPC (inter-process communication) by accessing operating system commands.\n\nThe three main methods inside this module are :\n`child_process.spawn()`\n`child_process.fork()`\n`child_process.exec()`\n\nVisit the following resources to learn more:\n\n- [@official@Child Process Docs](https://nodejs.org/api/child_process.html#child-process)\n- [@article@Securing Node.js Against Command Injection](https://www.nodejs-security.com/blog/securing-your-nodejs-apps-by-analyzing-real-world-command-injection-examples)\n",
    "chokidar@een1zhvgN_33Cu6OiWtyX": "# Chokidar\n\nChokidar is a fast open-source file watcher for node. js. You give it a bunch of files, it watches them for changes and notifies you every time an old file is edited; or a new file is created.\n\nVisit the following resources to learn more:\n\n- [@official@chokidar](https://www.npmjs.com/package/chokidar)\n",
    "cli-progress@iW9je5Pq7bjxWZDERv_p5": "# Cli progress\n\nCLI-Progress is a package that provides a custom progress bar for CLI applications.\n\nVisit the following resources to learn more:\n\n- [@official@CLI-Progress Documentation](https://www.npmjs.com/package/cli-progress)\n- [@feed@Explore top posts about CLI](https://app.daily.dev/tags/cli?ref=roadmapsh)\n",
    "cluster@PkQ_sQ0YFPCZGx4BRgG0t": "# Cluster\n\nThe Cluster module allows you to easily create child processes that each runs simultaneously on their own single thread, to handle workloads among their application threads.\n\nVisit the following resources to learn more:\n\n- [@official@Node.js Cluster](https://nodejs.org/api/cluster.html#cluster)\n",
    "command-line-apps@Ce-dP-OXu0mEm30rzp2hW": "# Command Line Applications\n\nCommand Line Applications are applications that can be run from the command line. They are also called CLI (Command Line Interface) applications. Users can interact with clients entirely by terminal commands. They are very useful for automation and building tools.\n\nVisit the following resources to learn more:\n\n- [@article@Build a Command Line Application with Node.js](https://developer.okta.com/blog/2019/06/18/command-line-app-with-nodejs)\n- [@video@5-Minute Node.js CLI Project](https://www.youtube.com/watch?v=_oHByo8tiEY)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "commander@BxxLQUI7JcQgF6TK3L5uU": "# Commander.js\n\nCommander is a light-weight, expressive, and powerful command-line framework for node.js. with Commander.js you can create your own command-line interface (CLI).\n\nVisit the following resources to learn more:\n\n- [@official@commander package](https://www.npmjs.com/package/commander)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "common-built-in-modules@M62lAWBOrTe99TfpFOQ-Y": "# Nodejs core modules\n\nThese are the core modules that come with `Node.js` out of the box. This module provides tools or APIs for performing out certain standard `Node.js` operations. like interacting with the file system, url parsing, or logging information to the console.\n\nLearn more from the following resources:\n\n- [@official@fs module](https://nodejs.org/api/fs.html)\n- [@official@url module](https://nodejs.org/api/url.html)\n- [@official@console module](https://nodejs.org/api/console.html)\n- [@official@util module](https://nodejs.org/api/util.html)\n- [@official@events module](https://nodejs.org/api/events.html)\n- [@official@os module](https://nodejs.org/api/os.html)\n- [@official@worker threads module](https://nodejs.org/api/worker_threads.html)\n- [@official@child process module](https://nodejs.org/api/child_process.html)\n- [@official@process object](https://nodejs.org/api/process.html)\n- [@official@crypto module](https://nodejs.org/api/crypto.html)",
    "commonjs@mhjswf17nhq075NTYV5gE": "# CommonJS vs ESM\n\nCommonJS and ES (EcmaScript) are module systems used in Node. CommonJS is the default module system. However, a new module system was recently added to NodeJS - ES modules. CommonJS modules use the require() statement for module imports and module.exports for module exports while it's import and export for ES.\n\nVisit the following resources to learn more:\n\n- [@article@CommonJS vs ESM](https://blog.logrocket.com/commonjs-vs-es-modules-node-js/)\n- [@article@Using CommonJS](https://www.javascripttutorial.net/nodejs-tutorial/nodejs-modules/)\n- [@article@Using ES Modules](https://blog.logrocket.com/es-modules-in-node-today/)\n- [@video@Using Modules](https://www.youtube.com/watch?v=pP4kjXykbio)\n- [@article@CommonJS vs. ES Modules: Modules and Imports in NodeJS](https://reflectoring.io/nodejs-modules-imports/)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "creating--importing@EEnmOcDKPZzY_O1NwP_5j": "# Custom Modules\n\nModules are the collection of JavaScript codes in a separate logical file that can be used in external applications based on their related functionality. There are two ways to create modules in Node.js i.e. either via CommonJS or ESM.\n\nVisit the following resources to learn more:\n\n- [@video@Creating a Module in Node.js](https://www.youtube.com/watch?v=Cxo4UKpHv5s)\n- [@article@CommonJS vs ESM in Node.js](https://blog.logrocket.com/commonjs-vs-es-modules-node-js/)\n- [@article@Modules and Imports in Node.js](https://reflectoring.io/nodejs-modules-imports/)\n",
    "creating-packages@Uh9hmEy7o1EJLg4E--ku2": "# Creating Packages\n\nnpm packages allow you to bundle some specific functionality into a reusable package which can then be uploaded to some package registry such as npm or GitHub packages and then be installed and reused in projects using npm.\n\nVisit the following resources to learn more:\n\n- [@article@Best practices for creating a modern npm package](https://snyk.io/blog/best-practices-create-modern-npm-package/)\n",
    "cypress@3Fh3-V1kCZtlUTvEoloIO": "# Cypress\n\nCypress is a new front end testing tool built for the modern web. It enables you to write faster, easier and more reliable tests.\n\nVisit the following resources to learn more:\n\n- [@official@Cypress](https://www.cypress.io/)\n- [@article@Cypress Documentation](https://docs.cypress.io/)\n- [@feed@Explore top posts about Cypress](https://app.daily.dev/tags/cypress?ref=roadmapsh)\n",
    "debugging@ZLNUuDKhJ03Kw7xMVc7IR": "# More Debugging\n\nDebugging is a concept to identify and remove errors from software applications. Here, we will learn about the technique to debug a Node.js application.\n\nWhy not to use `console.log()` for debugging?\n\nUsing `console.log` to debug the code generally dives into an infinite loop of “stopping the app and adding a console.log, and start the app again” operations. Besides slowing down the development of the app, it also makes the writing dirty and creates unnecessary code. Finally, trying to log out variables alongside with the noise of other potential logging operations, may make the process of debugging difficult when attempting to find the values you are debugging.\n\nVisit the following resources to learn more:\n\n- [@article@Wikipedia - What is Debugging?](https://en.wikipedia.org/wiki/Debugging)\n- [@official@Node.js - Getting Started](https://nodejs.org/en/learn/getting-started/debugging)\n",
    "dotenv-package@fE9C7Resn4EcL-hYHbsaZ": "# dotenv\n\ndotenv is a zero-dependency module that loads environment variables from a `.env` file into `process.env`. Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.\n\nVisit the following resources to learn more:\n\n- [@article@The Twelve-Factor App Methodology](https://12factor.net/config)\n- [@official@process.env Documentation](https://nodejs.org/docs/latest/api/process.html#process_process_env)\n- [@opensource@dotenv Docs](https://github.com/motdotla/dotenv#readme)\n- [@official@Dotenv package](https://www.npmjs.com/package/dotenv)\n- [@article@Dotenv tutorial](https://zetcode.com/javascript/dotenv/)\n- [@feed@Explore top posts about General Programming](https://app.daily.dev/tags/general-programming?ref=roadmapsh)\n",
    "drizzle@JXQF9H4_N0rM7ZDKcCZNn": "# Drizzle\n\nDrizzle lets you build your project the way you want, without interfering with your project or structure. Using Drizzle you can define and manage database schemas in TypeScript, access your data in a SQL-like or relational way, and take advantage of opt-in tools to make your developer experience amazing.\n\nVisit the following resources to learn more:\n\n- [@official@Drizzle](https://orm.drizzle.team/)\n- [@official@Drizzle Documentation](https://orm.drizzle.team/docs/overview)\n- [@opensource@Drizzle GitHub](https://github.com/drizzle-team/drizzle-orm)\n- [@article@Getting Started with Drizzle](https://dev.to/franciscomendes10866/getting-started-with-drizzle-orm-a-beginners-tutorial-4782)\n",
    "ejs@L-_N7OxxuHCXsdWYBgZGu": "# EJS\n\nEJS is a template language or engine that allows you to generate HTML markup with pure JavaScript. And this is what makes it perfect for Nodejs applications.\nIn simple words, the EJS template engine helps to easily embed JavaScript into your HTML template.\n\nVisit the following resources to learn more:\n\n- [@official@EJS](https://ejs.co/)\n- [@official@EJS Documentation](https://ejs.co/#docs)\n- [@official@EJS Package](https://www.npmjs.com/package/ejs)\n- [@article@Try EJS Online](https://ionicabizau.github.io/ejs-playground/)\n- [@article@How to use EJS](https://www.digitalocean.com/community/tutorials/how-to-use-ejs-to-template-your-node-application)\n- [@article@Step-by-Step EJS Guide](https://codeforgeek.com/ejs-template-engine-in-nodejs/)\n",
    "error-handling@t_kfKdNSKVBPYQ9zF9VqQ": "# Error Handling\n\nError handling is a way to find bugs and solve them as quickly as humanly possible. The errors in Node.js can be either operation or programmer errors. Read the articles linked below to understand how to handle different types of errors in Node.js\n\nVisit the following resources to learn more:\n\n- [@article@Node.js Error Handling Best Practices](https://sematext.com/blog/node-js-error-handling)\n- [@article@Error handling in Node.js](https://blog.logrocket.com/error-handling-node-js/)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "esm@mKccfWOhC1Aj4VnaOqryA": "# ESM\n\nESM (ECMAScript Modules) is a standardized module system in JavaScript that allows for the organized, maintainable, and reusable structuring of code. It uses import and export statements for including and sharing functions, objects, or primitives between files. ESM supports static analysis, enabling better optimization and tooling, and is always in strict mode to reduce common JavaScript issues. Node.js fully supports ESM, which can be used with .mjs file extensions or configured in the package.json for .js files, making it easier to write modular and efficient JavaScript applications.\n\nVisit the following resources to learn more:\n\n- [@official@ESM Documentation](https://nodejs.org/api/esm.html)\n",
    "event-emitter@bgEHTBYzRDJqZ6gLqLbsz": "# Event Emitter\n\nIn Node.js, an event can be described simply as a string with a corresponding callback. An event can be \"emitted\" (or, in other words, the corresponding callback be called) multiple times or you can choose to only listen for the first time it is emitted.\n\nVisit the following resources to learn more:\n\n- [@official@What are Event Emitters?](https://nodejs.org/en/learn/asynchronous-work/the-nodejs-event-emitter)\n- [@article@Using Event Emitters in Node.js](https://www.digitalocean.com/community/tutorials/using-event-emitters-in-node-js)\n",
    "event-loop@b679H8gEBuvrHQ8ik7e96": "# Event Loop\n\nThe Event Loop is one of the most critical aspects of Node.js. Why is this so important? Because it explains how Node.js can be asynchronous and have non-blocking I/O, it explains the \"killer feature\" of Node.js, which made it this successful.\n\nVisit the following resources to learn more:\n\n- [@official@The Node.JS Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop)\n- [@article@JavaScript Visualized: Event Loop](https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif)\n- [@course@The Node.js Event Loop](https://www.coursera.org/lecture/secure-full-stack-mean-developer/the-node-js-event-loop-j5fbT)\n- [@official@The NodeJS Event loop](https://nodejs.org/en/guides/event-loop-timers-and-nexttick)\n- [@official@Don't Block the Event Loop](https://nodejs.org/en/guides/dont-block-the-event-loop)\n- [@article@Event Loop in Node.js - Mixu's Node book](https://book.mixu.net/node/ch2.html#the-event-loop-understanding-how-node-executes-javascript-code)\n",
    "exitting--exit-codes@XteNExIZN3_g95_dPCopY": "# Exiting and exit codes\n\nExiting is a way of terminating a Node.js process by using node.js process module.\n\nVisit the following resources to learn more:\n\n- [@official@Exit Documentation](https://nodejs.org/api/process.html#event-exit)\n- [@article@How to Exit a Process in Node.js](https://betterstack.com/community/questions/how-to-exit-in-node-js/)\n",
    "expressjs@1vq_KcYR_pkfp1MtXaL75": "# Express.js\n\nExpress is a node js web application framework that provides broad features for building web and mobile applications. It is used to build a single page, multi-page, and hybrid web application.\n\nVisit the following resources to learn more:\n\n- [@official@Express.js](https://expressjs.com/)\n- [@official@Getting Started Guide](https://expressjs.com/en/starter/installing.html)\n- [@article@Express Full Guide](https://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm)\n- [@article@Sample Project](https://auth0.com/blog/create-a-simple-and-stylish-node-express-app/)\n- [@feed@Explore top posts about Express.js](https://app.daily.dev/tags/express?ref=roadmapsh)\n",
    "fastify@WkU_rI4i-UmNSxb5F9TI-": "# Fastify\n\nFastify is a web framework highly focused on providing the best developer experience with the least overhead and a powerful plugin architecture, inspired by Hapi and Express.\n\nVisit the following resources to learn more:\n\n- [@official@Fastify](https://www.fastify.io/)\n- [@official@Fastify Documentation](https://www.fastify.io/docs/latest/)\n- [@video@Beginner Fastify Tutorial](https://www.youtube.com/watch?v=Lk-uVEVGxOA)\n- [@feed@Explore top posts about Fastify](https://app.daily.dev/tags/fastify?ref=roadmapsh)\n",
    "fetch@B_3rTGQxJneMREXoi2gQn": "# fetch\n\nThe `fetch()` method in JavaScript is used to request to the server and load the information on the webpages. The request can be of any APIs that return the data of the format JSON or XML. This method returns a promise.\n\nVisit the following resources to learn more:\n\n- [@official@MDN - Using the Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n- [@official@NodeJS globals: fetch](https://nodejs.org/api/globals.html#fetch)\n- [@official@MDN - Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [@article@freeCodeCamp on avoiding callback hell](https://www.freecodecamp.org/news/how-to-deal-with-nested-callbacks-and-avoid-callback-hell-1bc8dc4a2012/)\n",
    "figlet-package@PHLdJylzNZDJBGi8FFsfO": "# Figlet\n\nThis package aims to fully implement the FIGfont spec in JavaScript, which represents the graphical arrangement of characters representing larger characters. It works in the browser and with Node.js.\n\nVisit the following resources to learn more:\n\n- [@opensource@figlet](https://github.com/patorjk/figlet.js)\n",
    "fs-extra@zDmWGRrgwq3Gjfkyk6crK": "# fs-extra\n\nfs-extra adds file system methods that aren't included in the native fs module and adds promise support to the fs methods. It also uses graceful-fs to prevent EMFILE errors. It should be a drop in replacement for fs.\n\nVisit the following resources to learn more:\n\n- [@official@fs-extra package](https://www.npmjs.com/package/fs-extra)\n- [@article@fs-extra vs fs](https://ar.al/2021/03/07/fs-extra-to-fs/)\n",
    "fs-module@b1r1X3XCoPSayQjDBcy54": "# fs module\n\nFile System or `fs` module is a built in module in Node that enables interacting with the file system using JavaScript. All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules.\n\nVisit the following resources to learn more:\n\n- [@official@fs module](https://nodejs.org/api/fs.html)\n- [@video@Using fs](https://www.youtube.com/watch?v=ZySsdm576wE)\n",
    "garbage-collection@SJ01N7vMZkNiIuMYQhdpj": "# Garbage Collection\n\nMemory management in JavaScript is performed automatically and invisibly to us. We create primitives, objects, functions… All that takes memory. The main concept of memory management in JavaScript is reachability.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript Garbage Collection](https://javascript.info/garbage-collection)\n- [@article@Memory Management in JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management)\n",
    "glob@CWH0ZsxJ8beLvwMYJyH52": "# Glob\n\nThe glob pattern is most commonly used to specify filenames, called wildcard characters, and strings, called wildcard matching.\n\nVisit the following resources to learn more:\n\n- [@official@NPM Glob](https://www.npmjs.com/package/glob)\n",
    "global-installation@l24OMkPAEDnEDAVAMrMuG": "# Global Install vs Local Install\n\nNodeJS and NPM allow two methods of installing dependencies/packages: Local and Global. This is mainly used when adding a package or dependency as part of a specific project you're working on. The package would be installed (with its dependencies) in `node_modules` folder **under your project**. In addition, in `package.json` file there will be a new line added for the installed dependency under the label `dependencies`. At this point - you can start using the package in your NodeJS code by importing the package. Unlike the local install, you can install packages and dependencies **globally**. This would install it in a system path, and these packages would be available to any program which runs on **this specific** computer. This method is often used for installing command line tools (for example, even `npm` program is a Globally installed npm package).\n\nVisit the following resources to learn more:\n\n- [@official@Downloading and installing packages locally](https://docs.npmjs.com/downloading-and-installing-packages-locally)\n- [@official@Downloading and installing packages globally](https://docs.npmjs.com/downloading-and-installing-packages-globally)\n- [@official@NPM Install Docs](https://docs.npmjs.com/cli/commands/npm-install)\n",
    "global-keyword@PEGHvFT2Eg-1OyfhxYu22": "# global keyword\n\nIn browsers, the top-level scope is the global scope, and its global object is called the `window` object. Within the browser, `var something` will define a new global variable inside the `window` object. In Node.js, this is different. The top-level scope is **not** the global scope; `var something` inside a Node.js module will be local to that module.\n\nVisit the following resources to learn more:\n\n- [@official@global Keyword in Node.js](https://nodejs.org/api/globals.html#global)\n- [@article@What is the 'global' object in NodeJS](https://stackoverflow.com/questions/43627622/)\n- [@video@What is Global Object?](https://www.youtube.com/watch?v=jn8PZNBmKm0)\n- [@video@Global Object in Node](https://www.youtube.com/watch?v=PY-AycMkEAg)\n",
    "globby@HYTw74rrd7kkOemCxfT9I": "# Globby\n\n_User-friendly glob matching_\n\nBased on fast-glob but adds a bunch of useful features.\n\nVisit the following resources to learn more:\n\n- [@official@NPM Globby](https://www.npmjs.com/package/globby)\n- [@opensource@GitHub Globby](https://github.com/sindresorhus/globby)\n",
    "got-package@6stiDKubT6XVAOGiJ6wsx": "# Got\n\nGot is a lighter, human-friendly, and powerful HTTP request library explicitly designed to work with Node.js. It supports pagination, RFC compliant caching, makes an API request again if it fails, supports cookies out of the box, etc.\n\nVisit the following resources to learn more:\n\n- [@official@Got Documentation](https://www.npmjs.com/package/got)\n- [@article@How to consume APIs using GOT in Node.js?](https://rapidapi.com/guides/call-apis-got)\n",
    "handling-async-errors@3MpxV23lNpuKg0--e_9m7": "# Async errors\n\nErrors must always be handled. If you are using synchronous programming you could use a try catch. But this does not work if you work asynchronous! Async errors will only be handled inside the callback function!\n\nVisit the following resources to learn more:\n\n- [@article@Async Errors](https://www.mariokandut.com/handling-errors-in-asynchronous-functions-node-js/)\n- [@article@The best way to handle errors in asynchronous javascript](https://dev.to/m__mdy__m/the-best-way-to-handle-errors-in-asynchronous-javascript-16bb)\n",
    "history-of-nodejs@Vrcv5px-3fqmyJnQv3WBK": "# History of Node.js\n\nNode.js was written initially by Ryan Dahl in 2009, about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web. The initial release supported only Linux and macOS X. Its development and maintenance were led by Dahl and later sponsored by Joyent.\n\nVisit the following resources to learn more:\n\n- [@article@Rising Stack - History of Node.js on a Timeline](https://blog.risingstack.com/history-of-node-js/)\n- [@article@SAP Press - How Did Node.js Come About?](https://blog.sap-press.com/how-did-node.js-come-about)\n- [@video@Node.js: The Documentary | An Origin Story](https://youtu.be/LB8KwiiUGy0)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "hono@Xa-lA1wbZ9JZ_XpXfhhw5": "# Hono\r\n\r\nHono is a lightweight, simple, and fast web framework for Cloudflare Workers, Deno, Bun, and other applications. It is a modern web application that is both fast and flexible. It offers inbuilt support for TypeScript, and easy development in a local environment. Using Hono, It is easy to create publishable web applications with Deno, Bun, and Cloudflare Workers.\r\n\r\nVisit the following resources to learn more:\r\n\r\n- [@official@Hono Documentation](https://hono.dev/docs/)\r\n- [@article@Build a web application with Hono](https://blog.logrocket.com/build-web-application-hono/)\r\n",
    "http-module@Sjc1YDtbzXyLQH711_3nj": "# Making API calls with HTTP\n\nYou can make API calls using the `http` module in Node.js as well. Here are the two methods that you can use:\n\n- `http.get()` - Make http GET requests.\n- `http.request()` - Similar to `http.get()` but enables sending other types of http requests (GET requests inclusive).\n\nVisit the following resources to learn more:\n\n- [@official@Node.js `http.get()` documentation](https://nodejs.org/docs/latest-v16.x/api/http.html#httpgeturl-options-callback)\n- [@official@Node.js `http.request()` documentation](https://nodejs.org/docs/latest-v16.x/api/http.html#httprequesturl-options-callback)\n- [@article@How To Create an HTTP Client with Core HTTP in Node.js](https://www.digitalocean.com/community/tutorials/how-to-create-an-http-client-with-core-http-in-node-js)\n",
    "inquirer-package@WFJJtIqVoBIhK10XY-d7l": "# Inquirer\n\nInquirer.js is a collection of common interactive command line interfaces for taking inputs from user.\nIt is promise based and supports chaining series of prompt questions together, receiving text input, checkboxes, lists of choices and much more.\n\nYou can use it to empower your terminal applications that need user input or to build your own CLI.\n\nVisit the following resources to learn more:\n\n- [@opensource@Inquirer](https://github.com/SBoudrias/Inquirer.js#readme)\n- [@article@How To Create Interactive Command-line Prompts with Inquirer.js](https://www.digitalocean.com/community/tutorials/nodejs-interactive-command-line-prompts)\n- [@video@How to make a CLI in Node.js with Inquirer](https://www.youtube.com/watch?v=0xjfkl9nODQ)\n",
    "introduction-to-nodejs@KDd40JOAvZ8O1mfhTYB3K": "# Node.js Introduction\n\nNode.js is an open source, cross-platform runtime environment and library that is used for running web applications outside the client’s browser.\n\nIt is used for server-side programming, and primarily deployed for non-blocking, event-driven servers, such as traditional web sites and back-end API services, but was originally designed with real-time, push-based architectures in mind. Every browser has its own version of a JS engine, and node.js is built on Google Chrome’s V8 JavaScript engine.\n\nVisit the following resources to learn more:\n\n- [@official@Node.js](https://nodejs.org/en/)\n- [@official@Node.js Documentation](https://nodejs.org/en/docs/)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "javascript-errors@Wg7KSpAPxjeFMxC6PBnHO": "# Javascript Errors\n\nJavaScript Errors are used by JavaScript to inform developers about various issue in the script being executed. These issues can be syntax error where the developer/programmer has used the wrong syntax, it can be due to some wrong user input or some other problem.\n\nJavaScript has six types of errors that may occur during the execution of the script:\n\n- EvalError\n- RangeError\n- ReferenceError\n- SyntaxError\n- TypeError\n- URIError\n\nVisit the following resources to learn more:\n\n- [@article@Error Types in JavaScript](https://blog.bitsrc.io/types-of-native-errors-in-javascript-you-must-know-b8238d40e492)\n- [@article@JavaScript error reference - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "jest@5xrbKv2stKPJRv7Vzf9nM": "# Jest\n\nJest is a delightful JavaScript Testing Framework with a focus on simplicity. It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!\n\nVisit the following resources to learn more:\n\n- [@official@Jest](https://jestjs.io)\n- [@official@Jest Documentation](https://jestjs.io/docs/getting-started)\n- [@feed@Explore top posts about Jest](https://app.daily.dev/tags/jest?ref=roadmapsh)\n",
    "jsonwebtoken@7u2WMxjLx3mMtn0cha4M7": "# JSON Web Token\n\nJWT, or JSON-Web-Token, is an open standard for sharing security information between two parties — a client and a server. Each JWT contains encoded JSON objects, including a set of claims. JWTs are signed using a cryptographic algorithm to ensure that the claims cannot be altered after the token is issued.\n\nVisit the following resources to learn more:\n\n- [@official@JSON Package Documentation](https://www.npmjs.com/package/jsonwebtoken)\n- [@article@What is JWT](https://www.akana.com/blog/what-is-jwt)\n- [@video@JWT Implementation](https://www.youtube.com/watch?v=mbsmsi7l3r4)\n",
    "keep-app-running@af7n-J7VvbdpZh9lwA773": "# Keep your app running in Production\n\nPM2 lets you run your nodejs scripts forever. In the event that your application crashes, PM2 will also restart it for you.\n\nVisit the following resources to learn more:\n\n- [@article@Keep a Node Application Constantly Running](https://devtut.github.io/nodejs/keep-a-node-application-constantly-running.html#use-pm2-as-a-process-manager)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "knex@HDDnt79_PCB5JU-KnHKUh": "# Knex\n\nKnex.js is a \"batteries included\" SQL query builder for PostgreSQL, CockroachDB, MSSQL, MySQL, MariaDB, SQLite3, Better-SQLite3, Oracle, and Amazon Redshift designed to be flexible, portable, and fun to use.\n\nVisit the following resources to learn more:\n\n- [@official@Knex.js](https://knexjs.org)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "ky@-_2letLUta5Ymc5eEOKhn": "# Ky\n\nKy is a tiny and elegant HTTP client based on the browser Fetch API. Ky targets modern browsers and Deno.For older browsers, you will need to transpile and use a fetch polyfill.For Node.js, check out Got.. 1 KB (minified & gzipped), one file, and no dependencies.\n\nVisit the following resources to learn more:\n\n- [@opensource@Ky Docs](https://github.com/sindresorhus/ky)\n- [@official@Ky Package](https://www.npmjs.com/package/ky/v/0.9.0)\n",
    "local-installation@oYeux7PbveYaVwXRzAg5x": "# Local Installation\n\nLocally installed packages are available only to the project where the packages are installed, while the globally installed packages can be used any where without installing them into a project. Another use case of the global packages is when using CLI tools.\n\nVisit the following resources to learn more:\n\n- [@official@Downloading and installing packages locally](https://docs.npmjs.com/downloading-and-installing-packages-locally)\n- [@official@Downloading and installing packages globally](https://docs.npmjs.com/downloading-and-installing-packages-globally)\n",
    "logging@b7ZAEqo0ZU6TNf18Bo0mI": "# Node.js Logging\n\n**Logging** is an essential part of understanding the complete application life cycle of the `Node.js` application. We can much more easily and quickly fix errors by looking at logs throughout the development process, from creating to debugging to designing new features. **Error**, **warn**, **info**, and **debug** are the four basic logging levels in `Node.js`. Logging involves persistently collecting information about an application's runtime behaviour.\n\nVisit the following resources to learn more:\n\n- [@article@Node.js Logging](https://stackify.com/node-js-logging/)\n- [@article@Logging best practices](https://blog.appsignal.com/2021/09/01/best-practices-for-logging-in-nodejs.html)\n- [@article@Logging](https://stackify.com/node-js-logging/)\n- [@feed@Explore top posts about Logging](https://app.daily.dev/tags/logging?ref=roadmapsh)\n",
    "marko@f2DyjBIglAZ6NoHaRnlzt": "# Marko\n\nMarko is a fast and lightweight HTML-based templating engine that compiles templates to CommonJS modules and supports streaming, async rendering, and custom tags. It is HTML re-imagined as a language for building dynamic and reactive user interfaces.\n\nVisit the following resources to learn more:\n\n- [@official@Marko Documentation](https://markojs.com/docs/guides-overview/)\n",
    "memory-leaks@oU9I7KBZoTSXXFmYscEIq": "# Memory Leaks\n\nMemory leaks are caused when your Node.js app’s CPU and memory usage increases over time for no apparent reason. In simple terms, a Node.js memory leak is an orphan block of memory on the Heap that is no longer used by your app because it has not been released by the garbage collector. It’s a useless block of memory. These blocks can grow over time and lead to your app crashing because it runs out of memory.\n\nVisit the following resources to learn more:\n\n- [@article@Memory Leaks in Node.js](https://sematext.com/blog/nodejs-memory-leaks/)\n- [@article@Memory Leaks Causes](https://sematext.com/blog/nodejs-memory-leaks/#what-causes-them-common-node-js-memory-leaks)\n- [@article@Memory Leaks Detectors](https://sematext.com/blog/nodejs-memory-leaks/#node-js-memory-leak-detectors)\n- [@feed@Explore top posts about General Programming](https://app.daily.dev/tags/general-programming?ref=roadmapsh)\n",
    "modules@mbGFT6S7mL3bHHEZv0_s2": "# Node.js Modules\n\nWe split our code into different files to maintain, organize and reuse code whenever possible. A module system allows us to split and include code and import code written by other developers whenever required. In simple terms, a module is nothing but a JavaScript file. Node.js has many built-in modules that are part of the platform and comes with Node.js installation, for example, HTTP, fs, path, and more.\n\nVisit the following resources to learn more:\n\n- [@official@Modules: CommonJS modules](https://nodejs.org/api/modules.html#modules-commonjs-modules)\n- [@article@CommonJS vs. ES Modules in Node.js](https://blog.logrocket.com/commonjs-vs-es-modules-node-js/)\n- [@video@Modules in Node.js](https://www.youtube.com/watch?v=9Amxzvq5LY8&)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "mongoose@NDf-o-WECK02mVnZ8IFxy": "# Mongoose\n\nMongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. Mongoose provides a straight-forward, schema-based solution to model your application data. It includes built-in type casting, validation, query building, business logic hooks and more, out of the box.\n\nVisit the following resources to learn more:\n\n- [@official@Mongoose](https://mongoosejs.com)\n- [@official@Mongoose Documentation](https://mongoosejs.com/docs/guide.html)\n- [@article@Getting Started with MongoDB and Mongoose](https://www.mongodb.com/developer/languages/javascript/getting-started-with-mongodb-and-mongoose/)\n- [@feed@Explore top posts about Mongoose](https://app.daily.dev/tags/mongoose?ref=roadmapsh)\n",
    "monitor-changes-dev@swp4wBgA7z-sd64VDkMrw": "# Keep App Running\n\nIn Node.js, you need to restart the process to make changes take effect. This adds an extra step to your workflow. You can eliminate this extra step by using `nodemon` to restart the process automatically.\n\nSince Node.js 18.11.0, you can run Node with the `--watch` flag to reload your app every time a file is changed. So you don't need to use `nodemon` anymore.\n\nVisit the following resources to learn more:\n",
    "morgan@CTHFGgtXFpke4aPhh5vRY": "# Morgan\n\nMorgan is a NodeJS and express.js middleware to log the HTTP request and error, simplifying the debugging process. It provides flexibility in defining the format of log messages and helps override the output destination for your logs.\n\nVisit the following resources to learn more:\n\n- [@official@morgan package](https://www.npmjs.com/package/morgan)\n- [@article@How to Use Morgan | DigitalOcean](https://www.digitalocean.com/community/tutorials/nodejs-getting-started-morgan)\n",
    "native-drivers@5WqLm53CHDT5uBoMH-iPl": "# Native Drivers\n\nAnother way to connect to different databases in Node.js is to use the official native drivers provided by the database.\n\nVisit the following resources to learn more:\n\n- [@official@MongoDB Drivers](https://www.mongodb.com/docs/drivers/)\n",
    "native-drivers@KpC-QYKalUp7VUvnMKBoW": "# Native drivers\n\nNativeDriver is an implementation of the WebDriver API which drives the UI of a native application rather than a web application. It extends the WebDriver API in a few key places, and re-interprets the existing API for native applications.\n",
    "nestjs@tGD8XLHnfspfv8CbguGwV": "# NestJS\n\nNestJS is a progressive Node.js framework for creating efficient and scalable server-side applications.\n\nVisit the following resources to learn more:\n\n- [@official@NestJS](https://nestjs.com)\n- [@official@NestJS Documentations](https://docs.nestjs.com)\n- [@video@Beginner NestJS Tutorial](https://www.youtube.com/watch?v=GHTA143_b-s)\n- [@feed@Explore top posts about NestJS](https://app.daily.dev/tags/nestjs?ref=roadmapsh)\n",
    "node---inspect@DcmGcVlEHL4IV7yPMDpVa": "# Node Inspect\n\nNode.js provides a built-in DevTools-based debugger to allow debugging Node.js applications.\n\nVisit the following resources to learn more:\n\n- [@article@Debugging Node.js with Chrome DevTools](https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27)\n",
    "nodejs-vs-browser@ebVb0anYmbD1Y9ZTFXKFp": "# Nodejs vs Browser\n\nBoth the browser and Node.js use JavaScript as their programming language. Building apps that run in the browser is entirely different than building a Node.js application. Even though it's always JavaScript, some key differences make the experience radically different.\n\nVisit the following resources to learn more:\n\n- [@official@Differences between Node.js and the Browser](https://nodejs.org/en/learn/getting-started/differences-between-nodejs-and-the-browser/)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "nodemon@2Ym2jMvov0lZ79aJFaw29": "# Nodemon\n\nIn Node.js, you need to restart the process to make changes take effect. This adds an extra step to your workflow. You can eliminate this extra step by using nodemon or PM2 to restart the process automatically.\n\n`nodemon` is a command-line interface (CLI) utility developed by rem that wraps your Node app, watches the file system, and automatically restarts the process.\n\nVisit the following resources to learn more:\n\n- [@official@Nodemon](https://nodemon.io/)\n- [@article@PM2](https://pm2.keymetrics.io/docs/usage/quick-start/)\n- [@article@How To Restart Your Node.js Apps Automatically with nodemon](https://www.digitalocean.com/community/tutorials/workflow-nodemon)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "nodetest@oSLpy31XEcA2nRq9ks_LJ": "# node:test\n\n`node:test` is a built-in module in Node.js that provides a simple, asynchronous test runner. It's designed to make writing tests as straightforward as writing any other code.\n\nKey Features\n\n- Simplicity: Easy to use and understand.\n- Asynchronous Support: Handles asynchronous code gracefully.\n- Subtests: Allows for organizing tests into hierarchical structures.\n- Hooks: Provides beforeEach and afterEach hooks for setup and teardown.\n\nVisit the following resources to learn more:\n\n- [@official@Test Runner API Docs](https://nodejs.org/api/test.html)\n- [@official@Node.js Test Runner](https://nodejs.org/en/learn/test-runner/using-test-runner)\n",
    "npm-workspaces@WvxCGVKLvTUVEHeOcUQPg": "# npm workspaces\n\nWorkspace is a generic term that refers to the set of npm CLI features that support managing multiple packages from your local file system from within a singular top-level root package.\n\nVisit the following resources to learn more:\n\n- [@official@npm workspaces](https://docs.npmjs.com/cli/using-npm/workspaces)\n- [@article@Getting Started with Npm Workspaces](https://ruanmartinelli.com/blog/npm-7-workspaces-1/)\n- [@feed@Explore top posts about NPM](https://app.daily.dev/tags/npm?ref=roadmapsh)\n",
    "npm@jQJ9aOKtg-O-GhWk5OgCK": "# npm\n\nnpm is the standard package manager for Node.js.\n\nIt is two things: first and foremost, it is an online repository for the publishing of open-source Node.js projects; second, it is a command-line utility for interacting with said repository that aids in package installation, version management, and dependency management. A plethora of Node.js libraries and applications are published on npm, and many more are added every day\n\nVisit the following resources to learn more:\n\n- [@official@NPM Documentation](https://docs.npmjs.com/)\n- [@official@What is npm?](https://nodejs.org/en/learn/getting-started/an-introduction-to-the-npm-package-manager)\n- [@official@An introduction to the npm package manager](https://nodejs.org/en/learn/getting-started/an-introduction-to-the-npm-package-manager)\n- [@video@NPM Crash Course](https://www.youtube.com/watch?v=jHDhaSSKmB0)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "npx@YdpJ-DUo8Q5ATRmF4s4YS": "# npx\n\nnpx is a very powerful command that's been available in npm starting version 5.2, released in July 2017. If you don't want to install npm, you can install npx as a standalone package. npx lets you run code built with Node.js and published through the npm registry, without needing to install the package itself. This is particularly useful for trying out new tools, running one-time commands, or using packages in shared environments where global installations are undesirable. npx takes care of downloading the package on-the-fly, running the desired command, and then cleaning up the temporary installation. This keeps your project's dependencies lean and avoids version conflicts.\n\nVisit the following resources to learn more:\n\n- [@official@npx](https://docs.npmjs.com/cli/commands/npx/)\n- [@article@Introduction to the npx Node.js Package Runner](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b)\n",
    "passportjs@mIyv6S9a5dCHkk-JhhjKV": "# Passport js\n\nPassport.js is authentication middleware for Node.js. It makes implementing authentication in express apps really easy and fast. It is extremely flexible and modular. It uses \"strategies\" to support authentication using a username and password, Facebook, Twitter, and a lot of other sites.\n\nVisit the following resources to learn more:\n\n- [@official@PassportJS](https://www.passportjs.org/)\n- [@official@PassportJS Documentation](https://www.passportjs.org/docs/)\n- [@video@Implementation of OAuth using passportjs](https://www.youtube.com/watch?v=sakQbeRjgwg\\&list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x)\n- [@feed@Explore top posts about JavaScript](https://app.daily.dev/tags/javascript?ref=roadmapsh)\n",
    "path-module@Blzb-fdQZMu6Xq5JDJW0_": "# path module\n\nThe `path` module provides utilities for working with file and directory paths. It's built-in to Node.js core and can simply be used by requiring it.\n\nVisit the following resources to learn more:\n\n- [@official@Path Documentation](https://nodejs.org/api/path.html)\n- [@official@Learn Node.js File Paths](https://nodejs.org/en/learn/manipulating-files/nodejs-file-paths)\n- [@video@Path Module in Node.js](https://youtu.be/j95Lwxvi9JY)\n",
    "playwright@Ix-g9pgJjEI04bSfROvlq": "# Playwright\n\nPlaywright is an open-source automation library developed by Microsoft for testing and automating web applications. 1  It offers a unified API to control Chromium, Firefox, and WebKit browsers, making it a versatile choice for cross-browser testing.\n\nPlaywright provides a high-level API to interact with web pages. You can write scripts to simulate user actions, such as clicking buttons, filling forms, and navigating through different pages. Playwright handles the underlying browser interactions, making it easy to write and maintain tests.\n\nVisit the following resources to learn more:\n\n- [@official@Playwright](https://playwright.dev/)\n- [@official@Playwright Docs](https://playwright.dev/docs/getting-started-vscode)\n- [@article@Getting Started with Playwright](https://learn.microsoft.com/en-us/shows/getting-started-with-end-to-end-testing-with-playwright/)\n",
    "pm2@7WAuMMyelUbgwEHtnMmJv": "# Pm2\n\nPM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.\n\nVisit the following resources to learn more:\n\n- [@official@Pm2](https://pm2.keymetrics.io/)\n- [@official@Pm2 Documentation](https://pm2.keymetrics.io/docs/usage/quick-start/)\n",
    "prisma@3Qxtf8n6gJYdnRsuqa52Q": "# Prisma\n\nPrisma provides an open source next-generation ORM in the TypeScript ecosystem. It offers a dedicated API for relation filters. It provides an abstraction layer that makes you more productive compared to writing SQL. Prisma currently supports `PostgreSQL`, `MySQL`, `SQL Server`, `SQLite`, `MongoDB` and `CockroachDB`.\n\nVisit the following resources to learn more:\n\n- [@official@Prisma](https://www.prisma.io/)\n- [@video@Prisma & MongoDB Youtube Tutorial](https://www.youtube.com/watch?v=-7r4whMKt1s)\n- [@feed@Explore top posts about Prisma](https://app.daily.dev/tags/prisma?ref=roadmapsh)\n",
    "prisma@O7Cy2g_GPxKU6vPfEmNyi": "# Prisma\n\nPrisma is an ORM that helps app developers build faster and make fewer errors. Combined with its Data Platform developers gain reliability and visibility when working with databases.\n\nVisit the following resources to learn more:\n\n- [@official@Prisma](https://www.prisma.io/)\n- [@official@Prisma Documentation](https://www.prisma.io/docs/)\n- [@feed@Explore top posts about Prisma](https://app.daily.dev/tags/prisma?ref=roadmapsh)\n",
    "processargv@lT2DDRtbFfEjb_cmsQx8i": "# process.argv\n\n`process.argv` is an array of parameters that are sent when you run a Node.js file or Node.js process.\n\nVisit the following resources to learn more:\n\n- [@official@process.argv](https://nodejs.org/docs/latest/api/process.html#processargv)\n- [@video@Command Line Arguments - Cave of Programming](https://youtu.be/nr7i2HOAjeE)\n",
    "processcwd@QT2QE2FLkyUDpwMKYkFQL": "# process.cwd()\n\nThe `process.cwd()` method returns the current working directory of the Node.js process.\n\nVisit the following resources to learn more:\n\n- [@official@process.cwd()](https://nodejs.org/api/process.html#processcwd)\n- [@article@Whats the difference between process.cwd() vs \\_\\_dirname?](https://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname)\n",
    "processenv@wthXp2YGg3eTMbxsek77C": "# process.env\n\nIn Node. js, process. env is a global variable that is injected during runtime. It is a view of the state of the system environment variables. When we set an environment variable, it is loaded into process.env during runtime and can later be accessed.\n\nVisit the following resources to learn more:\n\n- [@official@Node.js Learn Environment Variables](https://nodejs.org/en/learn/command-line/how-to-read-environment-variables-from-nodejs)\n- [@article@Process.env Node](https://www.knowledgehut.com/blog/web-development/node-environment-variables)",
    "processnexttick@ATu9-29yJWcDOik5FTOgf": "# process.nextTick()\n\nEvery time the event loop takes a full trip, we call it a tick. When we pass a function to `process.nextTick()`, we instruct the engine to invoke this function at the end of the current operation before the next event loop tick starts.\n\nVisit the following resources to learn more:\n\n- [@official@Understanding Process.NextTick()](https://nodejs.org/en/learn/asynchronous-work/understanding-processnexttick)\n- [@official@The Node.js process.nextTick()](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)\n- [@video@The process.nextTick Function](https://www.youtube.com/watch?v=-niA5XOlCWI)\n",
    "processstdin@betuntelnEMSHdatO6VPl": "# Process stdin\n\nThe `process.stdin` is a standard Readable stream which listens for user input and is accessible via the process module. It uses `on()` function to listen for input events.\n\nVisit the following resources to learn more:\n\n- [@official@process.stdin](https://nodejs.org/api/process.html#processstdin)\n- [@article@Node.js Process stdin & stdout](https://nodecli.com/node-stdin-stdout)\n",
    "promises@QcOqhuKWOUUUBSiu5Oelv": "# Promises\n\nA promise is commonly defined as a proxy for a value that will eventually become available.\n\nAsynchronous functions use promise behind the scenes, so understanding how promises work is fundamental to understanding how \"async\" and \"await\" works.\n\nOnce a promise has been called, it will start in a pending state. This means that the calling function continues executing, while the promise is pending until it resolves, giving the calling function whatever data was being requested.\n\nCreating a Promise:\n\nThe Promise API exposes a Promise constructor, which you initialize using new Promise().\n\nUsing resolve() and reject(), we can communicate back to the caller what the resulting Promise state was, and what to do with it.\n\nVisit the following resources to learn more:\n\n- [@article@Promise Methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [@official@Promises](https://www.promisejs.org/)\n- [@video@Asynchronous JavaScript - Promises](https://www.youtube.com/watch?v=a_8nrslImo4/)\n",
    "prompts-package@xgsKrUdfB0g0DMQCLK3aY": "# Prompts\n\nPrompts is a higher level and user friendly interface built on top of Node.js's inbuilt `Readline` module. It supports different type of prompts such as text, password, autocomplete, date, etc. It is an interactive module and comes with inbuilt validation support.\n\nVisit the following resources to learn more:\n\n- [@official@Prompts](https://www.npmjs.com/package/prompts)\n",
    "pug@O67e2qyhxP5joR5LGyZ2N": "# Pug\n\nPug is a JavaScript template engine. It is a high-performance template engine heavily influenced by Haml and implemented with JavaScript for Node.js and browsers. Pug was formerly called Jade.\n\nPug is a high-performance template engine heavily influenced by Haml and implemented with JavaScript for Node.js and browsers\n\nVisit the following resources to learn more:\n\n- [@official@Getting started with PugJs](https://pugjs.org/api/getting-started.html)\n- [@article@How to Build a Node Application Using a Pug Template](https://blog.bitsrc.io/how-to-build-a-node-application-using-a-pug-template-7319ab1bba69?gi=40b338891148)\n- [@video@Node.js + Express - Tutorial - PugJS Templating Engine](https://www.youtube.com/watch?v=DSp9ExFw3Ig)\n- [@article@Pug.js tutorial](https://zetcode.com/javascript/pugjs/)\n",
    "running-nodejs-code@uPJqdMQQJRkTMMhNORDeH": "# Running Node.js Code\n\nThe usual way to run a Node.js program is to run the globally available `node` command (once you install Node.js) and pass the name of the file you want to execute.\n\nVisit the following resources to learn more:\n\n- [@official@Run Node.js from Command Line](https://nodejs.org/en/learn/command-line/run-nodejs-scripts-from-the-command-line/)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "running-scripts@64pgc7rcgboFcNYuOlX8e": "# Running Scripts\n\nIn Node.js, npm scripts are used for the purpose of initiating a server, starting the build of a project, and also for running the tests. We can define this scripts in the package.json file of the folder. Also, we can split the huge scripts into many smaller parts if it is needed.\n\nVisit the following resources to learn more:\n\n- [@article@Example of Running Scripts](https://riptutorial.com/node-js/example/4592/running-scripts)\n- [@official@Running Scripts](https://docs.npmjs.com/cli/using-npm/scripts)\n",
    "semantic-versioning@dOlzIXBfAPmbY542lNOe6": "# Semantic Versioning\n\nSemantic Versioning is a standard for versioning software that's widely adopted in the npm ecosystem. It provides a clear and consistent way to communicate changes in a software package to users.\n\n## Version Format\n\nA semantic version number consists of three parts separated by dots:\n\n- MAJOR: Incremented when there are incompatible API changes.\n- MINOR: Incremented when new functionality is added in a backwards-compatible manner.\n- PATCH: Incremented when bug fixes are made without affecting the API.\n\n### Example: 1.2.3\n\n- 1 is the major version.\n- 2 is the minor version.\n- 3 is the patch version.\n\nVisit the following resources to learn more:\n\n- [@official@Semver.org](https://semver.org/)\n- [@article@Medium - Understanding Semantic Versioning](https://medium.com/codex/understanding-semantic-versioning-a-guide-for-developers-dad5f2b70583)\n- [@article@Devopedia - Semver](https://devopedia.org/semantic-versioning)\n",
    "sequelize@fOm-ktIaLqrmA0zln0Bga": "# Sequelize\n\nSequelize is an easy-to-use and promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, DB2, Microsoft SQL Server, and Snowflake. It features solid transaction support, relations, eager and lazy loading, read replication and more.\n\nWhat is an ORM ?\n\nAn ORM is known as Object Relational Mapper. This is a tool or a level of abstraction which maps(converts) data in a relational database into programmatic objects that can be manipulated by a programmer using a programming language (usually an OOP language). ORMs solely exist to map the details between two data sources which due to a mismatch cannot coexist together.\n\nVisit the following resources to learn more:\n\n- [@official@Sequelize](https://sequelize.org/)\n- [@official@Sequelize - NPM Package](https://www.npmjs.com/package/sequelize)\n- [@official@Sequelize Docs](https://sequelize.org/docs/v6/getting-started/)\n- [@article@Getting started with Sequelize](https://levelup.gitconnected.com/the-ultimate-guide-to-get-started-with-sequelize-orm-238588d3516e)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "setimmediate@YvTPpoIiSqjDYi0Q10kWh": "# setImmediate\n\nThe `setImmediate` function delays the execution of a function to be called after the current event loops finish all their execution. It's very similar to calling `setTimeout` with 0 ms delay.\n\nVisit the following resources to learn more:\n\n- [@official@Understanding setImmediate](https://nodejs.org/en/learn/asynchronous-work/understanding-setimmediate)\n- [@article@Understanding setImmediate](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate)\n",
    "setinterval@T5I-mFKK6bKzXrzkECI0P": "# setInterval\n\nThe `setInterval()` method helps us to repeatedly execute a function after a fixed delay. It returns a unique interval ID which can later be used by the `clearInterval()` method, which stops further repeated execution of the function.\n\n`setInterval()` is similar to setTimeout, with a difference. Instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds):\n\nVisit the following resources to learn more:\n\n- [@article@Scheduling: setTimeout and setInterval](https://javascript.info/settimeout-setinterval)\n",
    "settimeout@W2Dbj4Y78Bgdx7og5xkrg": "# setTimeout\n\nThe setTimeout runs a function after the specified period expires. Times are declared in milliseconds.\n\nVisit the following resources to learn more:\n\n- [@article@JavaScript MDN Docs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout)\n- [@video@setInterval and setTimeout: timing events](https://www.youtube.com/watch?v=kOcFZV3c75I)\n- [@video@Learn JavaScript setTimeout() in 6 minutes!](https://www.youtube.com/watch?v=shWr5DNVeCI)",
    "stdout--stderr@N2vR1_NyDn4rYLXJzxWBZ": "# Process stdout\n\nThe `process.stdout` property is an inbuilt application programming interface of the process module which is used to send data out of our program. A Writable Stream to stdout. It implements a `write()` method.\n`console.log()` prints to the `process.stdout.write()` with formatted output or new line.\n\nVisit the following resources to learn more:\n\n- [@official@process.stdout](https://nodejs.org/api/process.html#processstdout)\n- [@article@process.stdout vs console.log](https://stackoverflow.com/questions/4976466/difference-between-process-stdout-write-and-console-log-in-node-js/4984464#4984464)\n",
    "streams@WrnjjUDXQwwMXQjmgK72U": "# Nodejs streams\n\nStreams are a type of data handling methods and are used to read, write or transform chunks of data piece by piece without keeping it in memory all at once. There are four types of streams in Node.js.\n\n- **Readable**: streams from which data can be read.\n- **Writable**: streams to which we can write data.\n- **Duplex**: streams that are both Readable and Writable.\n- **Transform**: streams that can modify or transform the data as it is written and read.\n\nMultiple streams can be chained together using `pipe()` method.\n\nVisit the following resources to learn more:\n\n- [@official@Stream API Documentation](https://nodejs.org/api/stream.html)\n- [@video@Node.js Streams tutorial](https://www.youtube.com/watch?v=GlybFFMXXmQ)\n- [@article@Understanding Streams in Node.js](https://nodesource.com/blog/understanding-streams-in-nodejs)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "system-errors@05YY-AhLKzn4Ypr4eow5E": "# System Errors\n\nNode.js generates system errors when exceptions occur within its runtime environment. These usually occur when an application violates an operating system constraint.\nFor example, a system error will occur if an application attempts to read a file that does not exist.\n\nBelow are the system errors commonly encountered when writing a Node.js program:\n\n1. EACCES - Permission denied\n2. EADDRINUSE - Address already in use\n3. ECONNRESET - Connection reset by peer\n4. EEXIST - File exists\n5. EISDIR - Is a directory\n6. EMFILE - Too many open files in system\n7. ENOENT - No such file or directory\n8. ENOTDIR - Not a directory\n9. ENOTEMPTY - Directory not empty\n10. ENOTFOUND - DNS lookup failed\n11. EPERM - Operation not permitted\n12. EPIPE - Broken Pipe\n13. ETIMEDOUT - Operation timed out\n\nVisit the following resources to learn more:\n\n- [@official@Node.js Errors](https://nodejs.org/api/errors.html#errors_class_systemerror)\n- [@Article@16 Common Errors in Node.js and How to Fix Them](https://betterstack.com/community/guides/scaling-nodejs/nodejs-errors/)\n",
    "template-engines@J0ErCAZT5B97ZMogU2JHd": "# Template Engines\n\nTemplate engine helps us to create an HTML template with minimal code. Also, it can inject data into HTML template at client side and produce the final HTML.\n\nSome examples of template engines in Node.js are:\n\n- Nunjucks\n- Jade\n- Vash\n- EJS\n- Handlebars\n- HAML\n\nVisit the following resources to learn more:\n\n- [@official@Getting Started with Pug](https://pugjs.org/api/getting-started.html)\n- [@official@Handlebars Package](https://www.npmjs.com/package/handlebars)\n- [@official@EJS Package](https://www.npmjs.com/package/ejs)\n",
    "testing@90NIFfbWjTbyKZKwyJlfI": "# Testing\n\nSoftware testing is the process of verifying that what we create is doing exactly what we expect it to do. The tests are created to prevent bugs and improve code quality.\n\nThe two most common testing approaches are unit testing and end-to-end testing. In the first, we examine small snippets of code, in the second, we test an entire user flow.\n\nVisit the following resources to learn more:\n\n- [@article@Software Testing](https://en.wikipedia.org/wiki/Software_testing)\n- [@official@Vitest](https://vitest.dev/)\n- [@official@Jest](https://jest.io)\n",
    "threads@KzUmXkwrmU_ssVBjSHAiY": "# Nodejs Threads\n\nNode.js is a single-threaded language and gives us ways to work parallelly to our main process. Taking note of nowadays multicore system single threading is very memory efficient.\n\nVisit the following resources to learn more:\n\n- [@article@Single Thread vs Child Process vs Worker Threads vs Cluster in Node.js](https://alvinlal.netlify.app/blog/single-thread-vs-child-process-vs-worker-threads-vs-cluster-in-nodejs)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "topic-node@8ZC8r1PsBp4EyxWy_S0ko": "# topic node",
    "typeorm@rk5FtAPDi1TpvWd0yBbtl": "# TypeORM\n\nTypeORM is an ORM that can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeScript, Expo, and Electron platforms and can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8). Its goal is to always support the latest JavaScript features and provide additional features that help you to develop any kind of application that uses databases - from small applications with a few tables to large scale enterprise applications with multiple databases.\n\nVisit the following resources to learn more:\n\n- [@official@TypeORM Docs](https://typeorm.io)\n- [@video@TypeORM Crash Course](https://www.youtube.com/watch?v=JaTbzPcyiOE)\n",
    "uncaught-exceptions@uzOmaTZrHhBxx5plb345Z": "# Uncaught Exceptions\n\nWhen a JavaScript error is not properly handled, an uncaughtException is emitted. These suggest the programmer has made an error, and they should be treated with the utmost priority.\n\nThe correct use of `uncaughtException` is to perform synchronous cleanup of allocated resources (e.g. file descriptors, handles, etc) before shutting down the process. It is not safe to resume normal operation after `uncaughtException` because system becomes corrupted. The best way is to let the application crash, log the error and then restart the process automatically using nodemon or pm2.\n\nVisit the following resources to learn more:\n\n- [@official@Uncaught Exception Error Events](https://nodejs.org/api/process.html#event-uncaughtexception)\n- [@article@Let It Crash: Best Practices for Handling Node.js Errors on Shutdown](https://blog.heroku.com/best-practices-nodejs-errors)\n- [@article@Uncaught Exceptions in Node.js](https://shapeshed.com/uncaught-exceptions-in-node/)\n",
    "updating-packages@bYBz12FUiJ1qLgdQSGyGK": "# Updating Packages\n\nnpm provides various features to help install and maintain the project's dependencies. Dependencies get updates with new features and fixes, so upgrading to a newer version is recommended. We use `npm update` commands for this.\n\nVisit the following resources to learn more:\n\n- [@official@Updating packages downloaded from the registry](https://docs.npmjs.com/updating-packages-downloaded-from-the-registry)\n- [@video@How to Update All NPM Dependencies At Once](https://www.youtube.com/watch?v=Ghdfdq17JAY)\n- [@article@How to Update Npm Packages Safely With Npm Check Updates](https://chrispennington.blog/blog/how-to-update-npm-packages-safely-with-npm-check-updates/)\n",
    "user-specified-errors@wQ4i6_a1EFk9HHc6Sll-3": "# User Specified Errors\n\nUser specified errors can be created by extending the base Error object, a built-in error class. When creating errors in this manner, you should pass a message string that describes the error. This message can be accessed through the message property on the object. The Error object also contains a name and a stack property that indicate the name of the error and the point in the code at which it is created.\n\nVisit the following resources to learn more:\n\n- [@article@A Comprehensive Guide To Error Handling In Node.js](https://www.honeybadger.io/blog/errors-nodejs/)\n",
    "using-apm@CvkjlOpT34lOHgzQHL40s": "# Using APM\n\nAs much fun as it is to intercept your container requests with inspect and step through your code, you won’t have this option in production. This is why it makes a lot of sense to try and debug your application locally in the same way as you would in production.\n\nIn production, one of your tools would be to login to your remote server to view the console logs, just as you would on local. But this can be a tedious approach. Luckily, there are tools out there that perform what is called log aggregation, such as Stackify.\n\nThese tools send your logs from your running application into a single location. They often come with high-powered search and query utilities so that you can easily parse your logs and visualize them.\n\nVisit the following resources to learn more:\n\n- [@article@Debugging using APM](https://stackify.com/node-js-debugging-tips/)\n- [@feed@Explore top posts about APM](https://app.daily.dev/tags/apm?ref=roadmapsh)\n",
    "using-debugger@XEGTeGWw05xWYOfUo3POE": "# Using Debugger\n\nNode.js includes a command-line debugging utility. The Node.js debugger client is not a full-featured debugger, but simple stepping and inspection are possible. To use it, start Node.js with the inspect argument followed by the path to the script to debug.\n\nExample - `$ node inspect myscript.js`\n\nVisit the following resources to learn more:\n\n- [@official@Debugger](https://nodejs.org/api/debugger.html)\n- [@official@Inspect Docs](https://nodejs.org/en/learn/getting-started/debugging)\n- [@article@Freecodecamp.org - Debugging](https://www.freecodecamp.org/news/how-to-debug-node-js-applications/)\n",
    "vitest@qjToBaMenW3SDtEfoCbQ6": "# Vitest\n\nVitest is a Vite-native unit testing framework that's Jest-compatible. Vitest is a powerful testing library built on top of Vite that is growing in popularity. You can use Vitest for a range of testing needs, such as unit, integration, end-to-end (E2E), snapshot, and performance testing of functions and components. ESM, TypeScript, JSX. Out-of-box ESM, TypeScript and JSX support powered by esbuild. Vitest is free and open source.\n\nVisit the following resources to learn more:\n\n- [@official@Vitest](https://vitest.dev/)\n- [@official@Vitest Documentation](https://vitest.dev/guide/)\n",
    "what-is-nodejs@Mp056kNnwsRWeEXuhGPy-": "# What is Node.js\n\nNode.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project! Node.js runs the V8 JavaScript engine, Google Chrome's core, outside the browser. This allows Node.js to be very performant. A Node.js app runs in a single process, without creating a new thread for every request.\n\nNode.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking and generally, libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm.\n\nVisit the following resources to learn more:\n\n- [@official@Node.js](https://nodejs.org/en/about/)\n- [@official@Node.js - Getting Started](https://nodejs.org/en/learn/getting-started/introduction-to-nodejs)\n- [@video@What is Node.js?](https://www.youtube.com/watch?v=uVwtVBpw7RQ)\n- [@video@How Node.js Works?](https://www.youtube.com/watch?v=jOupHNvDIq8)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "why-use-nodejs@ex8FOKrUlbu4MuEq2czyW": "# Why Node.js\n\nNode.js is a cross-platform runtime, perfect for a wide range of use cases. Its huge community makes it easy to get started. It uses the V8 engine to compile JavaScript and runs at lightning-fast speeds. Node.js applications are very scalable and maintainable. Cross-platform support allows the creation of all kinds of applications - desktop apps, software as a service, and even mobile applications. Node.js is perfect for data-intensive and real-time applications since it uses an event-driven, non-blocking I/O model, making it lightweight and efficient. With such a huge community, a vast collection of Node.js packages is available to simplify and boost development.\n\nVisit the following resources to learn more:\n\n- [@official@Learn Node.js](https://nodejs.org/en/learn/getting-started/introduction-to-nodejs)\n- [@article@Why Choose Node.js?](https://medium.com/selleo/why-choose-node-js-b0091ad6c3fc)\n- [@article@5 Reasons to Choose Node.js](https://www.bitovi.com/blog/5-reasons-to-choose-nodejs)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "winston@Oe9cQCz2lwSaot7miZOta": "# Winston\n\nwinston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.\n\nVisit the following resources to learn more:\n\n- [@opensource@winston](https://github.com/winstonjs/winston?tab=readme-ov-file#readme)\n- [@article@A Complete Guide to Winston Logging in Node.js](https://betterstack.com/community/guides/logging/how-to-install-setup-and-use-winston-and-morgan-to-log-node-js-applications/)\n",
    "worker-threads@bH2Iv3BX0ZiWD3lOmC_m_": "# Worker Threads\n\nWorker thread is a continuous parallel thread that runs and accepts messages until it is explicitly closed or terminated.\nWith worker threads, we can achieve a much efficient application without creating a deadlock situation. Workers, unlike children's processes, can exchange memory.\n\nVisit the following resources to learn more:\n\n- [@official@Worker Threads](https://nodejs.org/api/worker_threads.html#worker-threads)\n",
    "working-with-databases@5l-lZ8gwVLqqAF_n99vIO": "# What is Database\n\nA database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a database management system (DBMS).\n\nVisit the following resources to learn more:\n\n- [@article@What is Database?](https://en.wikipedia.org/wiki/Database)\n- [@article@What is Database - AWS](https://aws.amazon.com/what-is/database/)\n",
    "working-with-files@wEK77A6MPQBCBUSJKMiaY": "# Working with Files\n\nYou can programmatically manipulate files in Node.js with the built-in `fs` module. The name is short for “file system,” and the module contains all the functions you need to read, write, and delete files on the local machine.\n\nVisit the following resources to learn more:\n\n- [@official@File System Module](https://nodejs.org/docs/latest/api/fs.html)\n- [@article@How To Work with Files using the fs Module in Node.js](https://www.digitalocean.com/community/tutorials/how-to-work-with-files-using-the-fs-module-in-node-js)\n- [@feed@Explore top posts about Node.js](https://app.daily.dev/tags/nodejs?ref=roadmapsh)\n",
    "__dirname@1AaGG660rvZlNYMOA35qO": "# \\_\\_dirname\n\nThe `__dirname` in a node script returns the path of the folder where the current JavaScript file resides. `__filename` and `__dirname` are used to get the filename and directory name of the currently executing file.\n\nVisit the following resources to learn more:\n\n- [@official@\\_\\_dirname](https://nodejs.org/docs/latest/api/modules.html#__dirname)\n- [@article@How to use \\_\\_dirname](https://www.digitalocean.com/community/tutorials/nodejs-how-to-use__dirname)\n",
    "__filename@P2gdwx1qCxvg1Ppfw0aqQ": "# \\_\\_filename\n\nThe `__filename` in Node.js returns the filename of the executed code. It gives the absolute path of the code file. The following approach covers implementing `__filename` in the Node.js project.\n\nVisit the following resources to learn more:\n\n- [@official@\\_\\_filename](https://nodejs.org/docs/latest/api/modules.html#__filename)\n"
  },
  "migration-mapping": {
    "nodejs-introduction": "KDd40JOAvZ8O1mfhTYB3K",
    "nodejs-introduction:what-is-nodejs": "Mp056kNnwsRWeEXuhGPy-",
    "nodejs-introduction:why-nodejs": "ex8FOKrUlbu4MuEq2czyW",
    "nodejs-introduction:history-of-nodejs": "Vrcv5px-3fqmyJnQv3WBK",
    "nodejs-introduction:nodejs-vs-browser": "ebVb0anYmbD1Y9ZTFXKFp",
    "nodejs-introduction:running-nodejs-code": "uPJqdMQQJRkTMMhNORDeH",
    "nodejs-modules": "mbGFT6S7mL3bHHEZv0_s2",
    "nodejs-modules:commonjs-vs-esm": "mhjswf17nhq075NTYV5gE",
    "nodejs-modules:custom-modules": "EEnmOcDKPZzY_O1NwP_5j",
    "nodejs-modules:global-keyword": "PEGHvFT2Eg-1OyfhxYu22",
    "nodejs-npm": "jQJ9aOKtg-O-GhWk5OgCK",
    "nodejs-npm:npx": "YdpJ-DUo8Q5ATRmF4s4YS",
    "nodejs-npm:creating-packages": "Uh9hmEy7o1EJLg4E--ku2",
    "nodejs-npm:updating-packages": "bYBz12FUiJ1qLgdQSGyGK",
    "nodejs-npm:running-scripts": "64pgc7rcgboFcNYuOlX8e",
    "nodejs-npm:npm-workspaces": "WvxCGVKLvTUVEHeOcUQPg",
    "nodejs-npm:global-install-vs-local-install": "l24OMkPAEDnEDAVAMrMuG",
    "nodejs-error-handling": "t_kfKdNSKVBPYQ9zF9VqQ",
    "nodejs-error-handling:stack-trace": "wIieXdFtoZWJ-ht8qqWbp",
    "nodejs-error-handling:using-debugger": "XEGTeGWw05xWYOfUo3POE",
    "nodejs-error-handling:uncaught-exceptions": "uzOmaTZrHhBxx5plb345Z",
    "nodejs-error-handling:error-types:javascript-errors": "Wg7KSpAPxjeFMxC6PBnHO",
    "nodejs-error-handling:error-types:system-errors": "05YY-AhLKzn4Ypr4eow5E",
    "nodejs-error-handling:error-types:user-specified-errors": "wQ4i6_a1EFk9HHc6Sll-3",
    "nodejs-error-handling:error-types:assertion-errors": "do-tdCUfDtiZHBg4ZO3dC",
    "nodejs-error-handling:async-errors": "3MpxV23lNpuKg0--e_9m7",
    "nodejs-async-programming": "uE7fvHSTSdebMf5RsNyaY",
    "nodejs-async-programming:event-emitter": "bgEHTBYzRDJqZ6gLqLbsz",
    "nodejs-async-programming:event-loop": "b679H8gEBuvrHQ8ik7e96",
    "nodejs-async-programming:promises": "QcOqhuKWOUUUBSiu5Oelv",
    "nodejs-async-programming:async-await": "a26qNCyMcT5GsVzxeNCLk",
    "nodejs-async-programming:callbacks": "GwInWcbQn18PnzKGXzmln",
    "nodejs-async-programming:set-timeout": "W2Dbj4Y78Bgdx7og5xkrg",
    "nodejs-async-programming:set-interval": "T5I-mFKK6bKzXrzkECI0P",
    "nodejs-async-programming:set-immediate": "YvTPpoIiSqjDYi0Q10kWh",
    "nodejs-async-programming:process-next-tick": "ATu9-29yJWcDOik5FTOgf",
    "nodejs-working-with-files": "wEK77A6MPQBCBUSJKMiaY",
    "nodejs-working-with-files:process-cwd": "QT2QE2FLkyUDpwMKYkFQL",
    "nodejs-working-with-files:path-module": "Blzb-fdQZMu6Xq5JDJW0_",
    "nodejs-working-with-files:fs-module": "b1r1X3XCoPSayQjDBcy54",
    "nodejs-working-with-files:glob": "CWH0ZsxJ8beLvwMYJyH52",
    "nodejs-working-with-files:fs-extra": "zDmWGRrgwq3Gjfkyk6crK",
    "nodejs-working-with-files:globby": "HYTw74rrd7kkOemCxfT9I",
    "nodejs-working-with-files:chokidar": "een1zhvgN_33Cu6OiWtyX",
    "nodejs-working-with-files:dirname": "1AaGG660rvZlNYMOA35qO",
    "nodejs-working-with-files:filename": "P2gdwx1qCxvg1Ppfw0aqQ",
    "nodejs-command-line-apps": "Ce-dP-OXu0mEm30rzp2hW",
    "nodejs-command-line-apps:exitting-and-exit-codes": "XteNExIZN3_g95_dPCopY",
    "nodejs-command-line-apps:environment-variables:process-env": "wthXp2YGg3eTMbxsek77C",
    "nodejs-command-line-apps:environment-variables:dotenv": "fE9C7Resn4EcL-hYHbsaZ",
    "nodejs-command-line-apps:taking-input:process-stdin": "betuntelnEMSHdatO6VPl",
    "nodejs-command-line-apps:taking-input:inquirer": "WFJJtIqVoBIhK10XY-d7l",
    "nodejs-command-line-apps:taking-input:prompts": "xgsKrUdfB0g0DMQCLK3aY",
    "nodejs-command-line-apps:printing-output:process-stdout": "N2vR1_NyDn4rYLXJzxWBZ",
    "nodejs-command-line-apps:printing-output:chalk": "V4OWIC1cnw8EFyu26Y_dA",
    "nodejs-command-line-apps:printing-output:figlet": "PHLdJylzNZDJBGi8FFsfO",
    "nodejs-command-line-apps:printing-output:cli-progress": "iW9je5Pq7bjxWZDERv_p5",
    "nodejs-command-line-apps:command-line-args:process-argv": "lT2DDRtbFfEjb_cmsQx8i",
    "nodejs-command-line-apps:command-line-args:commander-js": "BxxLQUI7JcQgF6TK3L5uU",
    "nodejs-apis": "fFVCb6aZWRHdNDFt5C09R",
    "nodejs-apis:express-js": "1vq_KcYR_pkfp1MtXaL75",
    "nodejs-apis:fastify": "WkU_rI4i-UmNSxb5F9TI-",
    "nodejs-apis:nest-js": "tGD8XLHnfspfv8CbguGwV",
    "nodejs-apis:api-calls-http": "Sjc1YDtbzXyLQH711_3nj",
    "nodejs-apis:axios": "BOLiZg8YDKADMwP01U5ph",
    "nodejs-apis:got": "6stiDKubT6XVAOGiJ6wsx",
    "nodejs-keep-app-running": "swp4wBgA7z-sd64VDkMrw",
    "nodejs-keep-app-running:nodemon": "2Ym2jMvov0lZ79aJFaw29",
    "nodejs-template-engines": "J0ErCAZT5B97ZMogU2JHd",
    "nodejs-template-engines:ejs": "L-_N7OxxuHCXsdWYBgZGu",
    "nodejs-template-engines:pug": "O67e2qyhxP5joR5LGyZ2N",
    "nodejs-template-engines:marko": "f2DyjBIglAZ6NoHaRnlzt",
    "nodejs-databases": "5l-lZ8gwVLqqAF_n99vIO",
    "nodejs-databases:document:mongoose": "NDf-o-WECK02mVnZ8IFxy",
    "nodejs-databases:document:prisma": "3Qxtf8n6gJYdnRsuqa52Q",
    "nodejs-databases:document:native-drivers": "5WqLm53CHDT5uBoMH-iPl",
    "nodejs-databases:relational:knex": "HDDnt79_PCB5JU-KnHKUh",
    "nodejs-databases:relational:type-orm": "rk5FtAPDi1TpvWd0yBbtl",
    "nodejs-databases:relational:sequelize": "fOm-ktIaLqrmA0zln0Bga",
    "nodejs-databases:relational:prisma": "O7Cy2g_GPxKU6vPfEmNyi",
    "nodejs-databases:relational:native-drivers": "KpC-QYKalUp7VUvnMKBoW",
    "nodejs-logging:winston": "Oe9cQCz2lwSaot7miZOta",
    "nodejs-logging:morgan": "CTHFGgtXFpke4aPhh5vRY",
    "nodejs-logging": "b7ZAEqo0ZU6TNf18Bo0mI",
    "nodejs-testing": "90NIFfbWjTbyKZKwyJlfI",
    "nodejs-testing:jest": "5xrbKv2stKPJRv7Vzf9nM",
    "nodejs-keep-app-running-prod": "af7n-J7VvbdpZh9lwA773",
    "nodejs-keep-app-running-prod:pm2": "7WAuMMyelUbgwEHtnMmJv",
    "nodejs-testing:cypress": "3Fh3-V1kCZtlUTvEoloIO",
    "nodejs-threads": "KzUmXkwrmU_ssVBjSHAiY",
    "nodejs-threads:child-process": "lzPrWD3pxQmpbqgYPL-zW",
    "nodejs-threads:cluster": "PkQ_sQ0YFPCZGx4BRgG0t",
    "nodejs-threads:worker-threads": "bH2Iv3BX0ZiWD3lOmC_m_",
    "nodejs-streams": "WrnjjUDXQwwMXQjmgK72U",
    "nodejs-more-debugging": "ZLNUuDKhJ03Kw7xMVc7IR",
    "nodejs-more-debugging:memory-leaks:garbage-collection": "SJ01N7vMZkNiIuMYQhdpj",
    "nodejs-more-debugging:memory-leaks": "oU9I7KBZoTSXXFmYscEIq",
    "nodejs-more-debugging:node-inspect": "DcmGcVlEHL4IV7yPMDpVa",
    "nodejs-more-debugging:using-apm": "CvkjlOpT34lOHgzQHL40s",
    "nodejs-common-modules": "M62lAWBOrTe99TfpFOQ-Y",
    "nodejs-apis:jsonwebtoken": "7u2WMxjLx3mMtn0cha4M7",
    "nodejs-apis:passport-js": "mIyv6S9a5dCHkk-JhhjKV"
  },
  "nodejs": "---\njsonUrl: '/jsons/roadmaps/nodejs.json'\npdfUrl: '/pdfs/roadmaps/nodejs.pdf'\nrenderer: 'editor'\norder: 6\nbriefTitle: 'Node.js'\nbriefDescription: 'Step by step guide to becoming a Node.js developer in 2025'\ntitle: 'Node.js Developer'\ndescription: 'Step by step guide to becoming a modern Node.js developer in 2025'\nisNew: false\nhasTopics: true\ndimensions:\n  width: 968\n  height: 2380\ncourses:\n  - title: 'Complete Course to Master SQL'\n    description: 'Learn SQL from scratch with this comprehensive course'\n    link: 'https://roadmap.sh/courses/sql'\n    features:\n      - '55+ Lessons'\n      - 'AI Tutor'\n      - 'Coding Environment'\n      - 'Quizzes'\n      - 'Certification'\n    instructor:\n      name: 'Kamran Ahmed'\n      image: 'https://github.com/kamranahmedse.png'\n      title: 'Founder roadmap.sh'\nschema:\n  headline: 'Node.js Roadmap'\n  description: 'Learn Node.js with this interactive step by step guide in 2025. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/nodejs.png'\n  datePublished: '2023-01-05'\n  dateModified: '2023-01-20'\nseo:\n  title: 'Node.js Developer Roadmap: Learn to become a modern node.js developer'\n  description: 'Learn to become a modern node.js developer using this roadmap. Community driven, articles, resources, guides, interview questions, quizzes for modern node.js development.'\n  keywords:\n    - 'node.js roadmap 2024'\n    - 'node.js roadmap 2025'\n    - 'nodejs roadmap 2024'\n    - 'nodejs roadmap 2025'\n    - 'node.js developer roadmap 2025'\n    - 'nodejs developer roadmap 2025'\n    - 'guide to becoming a developer'\n    - 'guide to becoming a node.js developer'\n    - 'guid to becoming a node.js developer'\n    - 'node.js developer'\n    - 'nodejs developer'\n    - 'node.js engineer'\n    - 'nodejs engineer'\n    - 'node.js skills'\n    - 'nodejs skills'\n    - 'node.js development'\n    - 'nodejs development'\n    - 'node.js development skills'\n    - 'nodejs development skills'\n    - 'node.js development skills test'\n    - 'nodejs development skills test'\n    - 'node.js roadmap'\n    - 'nodejs roadmap'\n    - 'node.js engineer roadmap'\n    - 'nodejs engineer roadmap'\n    - 'node.js developer roadmap'\n    - 'nodejs developer roadmap'\n    - 'become a node.js developer'\n    - 'become a node.js developer'\n    - 'node.js developer career path'\n    - 'nodejs developer career path'\n    - 'node.js developer'\n    - 'nodejs developer'\n    - 'modern node.js developer'\n    - 'node developer'\n    - 'skills for node.js development'\n    - 'skills for nodejs development'\n    - 'learn node.js development'\n    - 'node.js developer quiz'\n    - 'nodejs developer quiz'\n    - 'node.js developer interview questions'\n    - 'nodejs developer interview questions'\nrelatedRoadmaps:\n  - 'javascript'\n  - 'backend'\n  - 'docker'\n  - 'typescript'\n  - 'system-design'\n  - 'frontend'\nrelatedQuestions:\n  - 'javascript'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'skill-roadmap'\n---\n"
}