{
  "code-review": "---\njsonUrl: '/jsons/roadmaps/code-review.json'\npdfUrl: '/pdfs/roadmaps/code-review.pdf'\norder: 14\nbriefTitle: 'Code Review'\nbriefDescription: 'Learn what to focus on when conducting a code review.'\ntitle: 'Code Review Pyramid'\ndescription: 'Learn what to focus on when conducting a code review.'\nisNew: false\nhasTopics: true\ndimensions:\n  width: 968\n  height: 506.06\nschema:\n  headline: 'Code Review Guide'\n  description: 'Learn what to review when conducting Code Reviews with this interactive guide. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/code-review.png'\n  datePublished: '2023-06-03'\n  dateModified: '2023-06-03'\nseo:\n  title: 'Code Review Guide'\n  description: 'Learn what to review when conducting code reviews. We also have questions to ask yourself under each node of the pyramid to guide you further.'\n  keywords:\n    - 'code review tutorial'\n    - 'code review guide'\n    - 'code review for beginners'\n    - 'code reviews'\n    - 'code review 2025'\n    - 'code review best practices'\n    - 'code review roadmap 2024'\n    - 'code review roadmap 2025'\n    - 'guide to learning code review'\n    - 'code review roadmap'\n    - 'code review learning path'\n    - 'code review learning roadmap'\n    - 'what is code review'\nrelatedRoadmaps:\n  - 'backend'\n  - 'frontend'\n  - 'devops'\n  - 'engineering-manager'\n  - 'system-design'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'skill-roadmap'\n---\n",
  "content": {
    "api-semantics": "# Questions to Ask\n\n- API as small as possible, as large as needed?\n- Is there one way of doing one thing, not multiple ones?\n- Is it consistent, does it follow the principle of least surprise?\n- Clean split of API/internals without internals leaking into the API?\n- Are there no breaking changes to user-facing parts (API classes, configuration, metrics, log formats, etc)?\n- Is a new API generally useful and not overly specific to a single use case?\n",
    "code-style": "# Questions to Ask\n\n- Is the project's formatting style applied?\n- Does it adhere to the agreed-upon naming conventions?\n- Is it DRY?\n- Is the code sufficiently \"readable\" (method lengths, etc.)?\n",
    "documentation": "# Questions to Ask\n\n- Are the new features reasonably documented?\n- Are all relevant types of documentation covered, such as README, API docs, user guide, reference docs, etc?\n- Is the documentation understandable and free of significant typos and grammar mistakes?\n",
    "implementation-semantics": "# Questions to Ask\n\n- Does it satisfy the original requirements?\n- Is it logically correct?\n- Is there no unnecessary complexity?\n- Is it robust (i.e., no concurrency issues, proper error handling, etc.)?\n- Is it performant?\n- Is it secure (i.e., no SQL injections, etc.)?\n- Is it observable (i.e., metrics, logging, tracing, etc.)?\n- Do newly added dependencies pull their weight? Is their license acceptable?\n",
    "index": "# ",
    "tests": "# Questions to Ask\n\n- Are all tests passing?\n- Are new features reasonably tested?\n- Are corner cases tested?\n- Is it using unit tests where possible, integration tests where necessary?\n- Are there tests for NFRs, e.g. performance?\n"
  }
}