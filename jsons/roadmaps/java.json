{
  "content": {
    "abstraction@qdA6bK9ZkP8p0_NH_wMuj": "# Abstraction\n\nThe abstract keyword in Java is used to declare a class or a method that cannot be instantiated directly or must be implemented by subclasses, respectively. It is a key part of Java's abstraction mechanism, allowing developers to define abstract classes and methods that provide a blueprint for other classes.\n\nVisit the following resources to learn more:\n\n- [@article@Java Abstract Classes](https://jenkov.com/tutorials/java/abstract-classes.html)\n- [@article@Java Interfaces vs. Abstract Classes](https://jenkov.com/tutorials/java/interfaces-vs-abstract-classes.html)\n",
    "access-specifiers@KYndNwfQcwRCf3zCXOwd_": "# Access Specifiers\n\nAccess specifiers (or access modifiers) in Java are keywords that control the visibility or accessibility of classes, methods, constructors, and other members. They determine from where these members can be accessed. Java provides four access specifiers: `private`, `default` (no keyword), `protected`, and `public`, each offering a different level of access control.\n\nVisit the following resources to learn more:\n\n- [@article@Java Access Modifiers](https://jenkov.com/tutorials/java/access-modifiers.html)\n",
    "annotations@c--y6GcKj9am0CBdu_Hnt": "# Annotations\n\nAnnotations are a form of metadata that provide data about a program. They are used to provide supplemental information about the code, but they are not a part of the program itself. Annotations can be used by the compiler to detect errors or suppress warnings, and they can also be used at runtime to modify the behavior of the program.\n\nVisit the following resources to learn more:\n\n- [@article@Java Annotations Tutorial](https://jenkov.com/tutorials/java/annotations.html)",
    "array-vs-arraylist@a-EQiBUlSgdZba1mW36op": "# Array vs ArrayList\n\nArrays and ArrayLists are both ways to store collections of elements in Java. An array is a fixed-size, ordered sequence of elements of the same data type. Once you declare its size, you cannot change it. An ArrayList, on the other hand, is a dynamic, resizable array implementation. It can grow or shrink as needed, allowing you to add or remove elements without worrying about the initial size.\n\nVisit the following resources to learn more:\n\n- [@article@Java Arrays](https://jenkov.com/tutorials/java/arrays.html)\n- [@article@Java ArrayLists](https://jenkov.com/tutorials/java-collections/list.html)\n",
    "arrays@5khApwg1FZ-0qorsLyH-F": "# Arrays\n\nArrays are fundamental data structures used to store a collection of elements of the same data type in contiguous memory locations. They provide a way to organize and access multiple values using a single variable name and an index. Each element in an array can be accessed directly using its index, starting from 0.\n\nVisit the following resources to learn more:\n\n- [@article@Java Arrays](https://jenkov.com/tutorials/java/arrays.html)\n- [@video@Java Arrays Tutorial](https://www.youtube.com/watch?v=ei_4Nt7XWOw)",
    "attributes-and-methods@xTwJYcA6ldgaw3yGmbDEd": "# Attributes and Methods\n\nAttributes are variables that hold data about an object, defining its state or characteristics. Methods are functions that define the behavior of an object, allowing it to perform actions or operations. Together, attributes and methods encapsulate the data and behavior of an object within a class.\n\nVisit the following resources to learn more:\n\n- [@article@Java Classes](https://jenkov.com/tutorials/java/classes.html)\n- [@article@Java Methods](https://jenkov.com/tutorials/java/methods.html)\n- [@article@Java Properties](https://jenkov.com/tutorials/java-collections/properties.html)\n",
    "basic-syntax@OlbQNB6YXZjO1J7D0lZU1": "# Basic Syntax\n\nUnderstanding the basics is the key to a solid foundation. In this section, learn the basic terminologies, naming conventions, reserved keywords, expressions, statements, data structures, OOP, packages, etc.\n\n- To print output use --> System.out.println();\n- To take input from user --> Scanner or BufferedReader class can be used\n\nVisit the following resources to learn more:\n\n- [@official@Java Language Basics](https://dev.java/learn/language-basics)\n- [@video@Java - Basic Syntax](https://www.youtube.com/watch?v=81piDKqPxjQ)\n- [@video@Java Tutorial for Beginners](https://www.youtube.com/watch?v=RRubcjpTkks)\n",
    "basics-of-oop@DZ4BX4NYeCQbjGSj56lng": "# Basics of OOP\n\nObject-Oriented Programming (OOP) is a programming paradigm centered around \"objects,\" which contain data in the form of fields (attributes) and code in the form of procedures (methods). OOP focuses on creating reusable code by grouping related data and behavior into objects, allowing for modularity, abstraction, inheritance, and polymorphism. These concepts help in organizing and structuring code in a way that mirrors real-world entities and their interactions.\n\nVisit the following resources to learn more:\n\n- [@article@Java Classes and Objects](https://jenkov.com/tutorials/java/classes.html)\n",
    "bazel@6FMj9tMAQPii_1kLtHJLk": "# Bazel\n\nBazel is an open-source build and test tool similar to Make, Maven, and Gradle. It uses a human-readable, high-level build language. Bazel supports projects in multiple languages and builds outputs for multiple platforms. It's designed for fast, reliable, and reproducible builds, making it suitable for large codebases and complex projects.\n\nVisit the following resources to learn more:\n\n- [@article@Getting started with Bazel](https://bazel.build/start)\n- [@article@Build Java Projects with Bazel](https://earthly.dev/blog/build-java-projects-with-bazel/)\n- [@article@Introduction to the Bazel Build Tool](https://www.baeldung.com/bazel-build-tool)\n",
    "build-tools@81N1cZLue_Ii0uD5CV6kZ": "# Build Tools\n\nA build tool is a program or command-line utility that automates the process of compiling, assembling, and deploying software.\n\nBuild tools are not only limited to compiling code; they can also help with package management, dependency handling, and continuous integration systems.\n",
    "classes-and-objects@LenPrQwxFsE1UVbXO_dE7": "# Classes and Objects\n\nClasses are blueprints for creating objects, which are instances of those classes. A class defines the characteristics (attributes) and behaviors (methods) that objects of that class will possess. Think of a class as a template and an object as a specific instance created from that template.\n\nVisit the following resources to learn more:\n\n- [@article@Java Class and Objects](https://www.programiz.com/java-programming/class-objects)\n- [@video@Java Classes and Objects](https://www.youtube.com/watch?v=IUqKuGNasdM)\n",
    "concurrency@shqS9-hg__mkOtnnl_I4l": "# Concurrency\n\nConcurrency is the ability of a program to execute multiple tasks seemingly simultaneously. This doesn't necessarily mean they are running at the exact same instant, but rather that their execution overlaps in time. This can be achieved through techniques like multithreading, where a single program is divided into multiple threads that can run concurrently, or through asynchronous programming, where tasks can be started and then the program can continue executing other tasks without waiting for the first task to complete.\n\nVisit the following resources to learn more:\n\n- [@article@Java Concurrency and Multithreading Tutorial](https://jenkov.com/tutorials/java-concurrency/index.html)\n- [@article@Java Concurrency in Practice](https://www.baeldung.com/java-concurrency)",
    "conditionals@sG_3ZQIE1-FQXQkk-OduQ": "# Conditionals\n\nJava has the following conditional statements:\n\n- Use `if` to specify a block of code to be executed, if a specified condition is true\n- Use `else` to specify a block of code to be executed if the same condition is false\n- Use `else if` to specify a new condition to test; if the first condition is false\n- Use `switch` to specify many alternative blocks of code to be executed\n- Use `?,:` operator to specify one line condition\n\nVisit the following resources to learn more:\n\n- [@article@What are Conditional statements?](https://www.educative.io/answers/what-are-conditional-statements-in-programming)\n- [@video@Conditionals and Loops in Java](https://youtu.be/ldYLYRNaucM)\n- [@video@Switch Statements + Nested Case in Java](https://youtu.be/mA23x39DjbI)\n",
    "cryptography@_wV2VQq6MIY1rVHjK8pfu": "# Cryptography\n\nCryptography is the practice and study of techniques for secure communication in the presence of adversaries. It involves converting readable data (plaintext) into an unreadable format (ciphertext) through encryption, and then converting the ciphertext back into plaintext through decryption. Cryptography uses algorithms and keys to ensure confidentiality, integrity, authentication, and non-repudiation of information.\n\nVisit the following resources to learn more:\n\n- [@article@Java Cryptography Tutorial](https://jenkov.com/tutorials/java-cryptography/index.html)\n- [@video@Cryptography 101 for Java developers](https://www.youtube.com/watch?v=itmNhVckTPc)\n\n",
    "cucumber-jvm@UFDy19TNkykRsKv4vRsVJ": "# Cucumber JVM\n\nCucumber is a testing tool that supports Behavior Driven Development (BDD). It offers a way to write tests that anybody can understand, regardless of their technical knowledge.\n\nVisit the following resources to learn more:\n\n- [@official@Cucumber](https://cucumber.io/)\n- [@official@Cucumber Documentation](https://cucumber.io/docs/cucumber/)\n- [@article@Cucumber-JVM for Java](https://automationpanda.com/2017/10/24/cucumber-jvm-for-java/)\n- [@video@Cucumber-JVM 5 with Enhanced Cucumber Expression](https://www.youtube.com/watch?v=jCzpxvAJoZM)\n- [@feed@Explore top posts about JVM](https://app.daily.dev/tags/jvm?ref=roadmapsh)\n",
    "data-types@5g9mmi01WeZ4aDqNzwx_V": "# Data Types and Variables\n\nVariable in Java is a data container that stores the data values during Java program execution. Every variable is assigned a data type, which designates the type and quantity of values it can hold. Variable is a memory location name of the data. The Java variables have mainly three types: Local, Instance and Static.\n\nData Types are divided into two group -\n\n- Primitive - byte,short,int,long,float,double,boolean and char\n- Non-Primitive - String, Arrays, Classes, Enums and Records\n\nVisit the following resources to learn more:\n\n- [@article@Java Data Types](https://jenkov.com/tutorials/java/variables.html)\n- [@article@What are Data Types & Variables?](https://jenkov.com/tutorials/java/data-types.html)",
    "database-access@fV-gW51jhna2__Ln2HIIh": "# ORM (Object-Relational Mapping)\n\nA programming method to map objects in Java to relational entities in a database. In other words, converting data between relational databases and object-oriented programming languages. Some popular ORM tools/frameworks in Java are:\n\n- Spring Data JPA\n- Hibernate\n- Ebean\n\nVisit the following resources to learn more:\n\n- [@article@ORM tutorial](https://www.altexsoft.com/blog/object-relational-mapping/)\n- [@article@Java Databases: An Overview of Libraries & APIs](https://www.marcobehler.com/guides/java-databases)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "date-and-time@9h20XVRli7TDq0QIJwX2U": "# Working with Date and Time in Java\n\nDate and Time is a very important concept in programming. Java provides a rich set of classes to work with Date and Time.\n\nLearn how to work with Date and Time in Java.\n\n- [@article@Date and Time API in Java](https://chamalwr.medium.com/datetime-api-in-java-2aef5df1c39b)\n- [@article@Introduction to Date and Time in Java](https://www.baeldung.com/java-8-date-time-intro)\n- [@article@Java SE 8 Date and Time](https://www.oracle.com/technical-resources/articles/java/jf14-date-time.html)",
    "dependency-injection@zItXmuluDtl6HkTYQ7qMh": "# Dependency Injection\n\nDependency Injection (DI) is a design pattern where objects receive their dependencies from external sources rather than creating them themselves. This means a class doesn't have to worry about how to obtain the objects it needs to function; instead, those objects are \"injected\" into the class, usually through its constructor, setter methods, or interface. This promotes loose coupling and makes code more testable and maintainable.\n\nVisit the following resources to learn more:\n\n- [@article@Dependency Injection Tutorial](https://jenkov.com/tutorials/dependency-injection/index.html)\n- [@article@Java Dependency Injection Design Pattern Example Tutorial](https://www.digitalocean.com/community/tutorials/java-dependency-injection-design-pattern-example-tutorial)\n\n",
    "dequeue@DWO2-EPIUeKK5aQGiTuKc": "# Dequeue\n\nA Dequeue (pronounced \"dee-queue\") is a double-ended queue, a data structure that allows you to add and remove elements from both the front (head) and the back (tail) of the queue. Unlike a regular queue (FIFO - First-In, First-Out), a dequeue provides flexibility for both FIFO and LIFO (Last-In, First-Out) operations. This makes it useful for implementing various algorithms and data management tasks where elements need to be accessed or modified from either end.\n\nVisit the following resources to learn more:\n\n- [@article@Java Deque Tutorial](https://jenkov.com/tutorials/java-collections/deque.html)\n- [@article@Java Deque](https://www.programiz.com/java-programming/deque)\n",
    "ebean@X2rJ3BY1ytFKsbJqJETFu": "# Ebean\n\nEbean is an object-relational mapping tool written in Java. It supports the standard JPA annotations for declaring entities. However, it provides a much simpler API for persisting. In fact, one of the points worth mentioning about the Ebean architecture is that it is sessionless, meaning it does not fully manage entities.\n\nVisit the following resources to learn more:\n\n- [@official@Ebean](https://ebean.io/)\n- [@official@Ebean Documentation](https://ebean.io/docs/)\n- [@article@Guide to Ebean](https://www.baeldung.com/ebean-orm)\n",
    "encapsulation@iH9wSsOK4a77pS7U0Yu5z": "# Encapsulation\n\nEncapsulation is a fundamental concept in object-oriented programming where data and the methods that operate on that data are bundled together as a single unit. This unit, often a class, hides the internal state of the object from the outside world and only exposes a controlled interface for interacting with it. This protects the data from accidental modification and allows for easier maintenance and modification of the code.\n\nVisit the following resources to learn more:\n\n- [@article@Java - Encapsulation](https://www.tutorialspoint.com/java/java_encapsulation.htm)\n\n",
    "enums@ey1f8IsdAlDv1O3E_tNog": "# Enums\n\nEnums, short for enumerations, are a special data type in Java that represent a group of named constants. They allow you to define a type that can only take on a specific set of predefined values. This makes your code more readable and less prone to errors by restricting the possible values a variable can hold.\n\nVisit the following resources to learn more:\n\n- [@article@Java Enums](https://jenkov.com/tutorials/java/enums.html)\n- [@article@Java Enums](https://www.programiz.com/java-programming/enums)\n",
    "exception-handling@g9P3548F38tYGjevBc42w": "# Exception Handling\n\nException Handling in Java is one of the effective means to handle the runtime errors so that the regular flow of the application can be preserved. Java Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, IOException, SQLException, RemoteException, etc.\n\nThere are three types of exceptions -\n\n1. Checked Exception - exceptions checked at compile time. Example - IOException\n2. Unchecked Exception - exceptions checked at run time. Example - NullPointerException\n3. Error - It is irrecoverable. Example - OutOfMemoryError\n\nVisit the following resources to learn more:\n\n- [@video@Understanding Java Exceptions](https://www.youtube.com/watch?v=W-N2ltgU-X4)",
    "file-operations@NowpzyPVFcX082j5YS5i8": "# Files and APIs\n\nLearn how to work with files i.e., reading, writing and deleting, files and folders, etc. Also, learn how to make API calls, parse the incoming response, and so on.\n\n- `FileWriter` - this class is useful to create a file by writing characters into it\n- `FileReader` - this class is useful to read data in form of characters from file\n- `Files.lines(Paths.get(\"file.txt\")))` - processing the files as a stream. Since Java 8\n- `Files.readString / Files.writeString` - reads the whole file and puts it into a string - since Java 11\n\nVisit the following resources to learn more:\n\n- [@article@How To Work With Files In Java](https://www.marcobehler.com/guides/java-files)\n- [@article@(old) Java HttpURLConnection Example - Java HTTP Request GET, POST](https://www.digitalocean.com/community/tutorials/java-httpurlconnection-example-java-http-request-get-post)\n- [@article@New Java HttpClient](https://www.baeldung.com/java-9-http-client)\n- [@article@5 ways to make HTTP requests in Java](https://www.twilio.com/blog/5-ways-to-make-http-requests-in-java)\n- [@article@Read a file line by line in Java](https://mkyong.com/java8/java-8-stream-read-a-file-line-by-line/)\n- [@article@Various ways to read a file to String in Java](https://howtodoinjava.com/java/io/java-read-file-to-string-examples/)\n",
    "final-keyword@Ajuc_rHObqMQBXLqRIuxh": "# Final Keyword\n\nThe `final` keyword in Java is a non-access modifier used to apply restrictions on a variable, method, or class. When applied to a variable, it makes the variable's value constant after initialization. When applied to a method, it prevents the method from being overridden in a subclass. When applied to a class, it prevents the class from being subclassed (inherited).\n\nVisit the following resources to learn more:\n\n- [@article@Java Final Keyword](https://www.baeldung.com/java-final)\n- [@article@How does the final keyword in Java work? I can still modify an object](https://stackoverflow.com/questions/15655012/how-does-the-final-keyword-in-java-work-i-can-still-modify-an-object)\n\n",
    "functional-composition@1Mk_zXxCCcUoX-gFxtlnf": "# Functional Composition\n\nFunctional composition is the process of combining two or more functions to produce a new function. The resulting function applies each function in order, passing the output of one function as the input to the next. This allows you to build complex operations by chaining together simpler, reusable functions.\n\nVisit the following resources to learn more:\n\n- [@article@Functional Composition in Java](https://jenkov.com/tutorials/java-functional-programming/functional-composition.html)\n- [@article@Java Functional Programming](https://www.baeldung.com/java-functional-programming)",
    "functional-interfaces@SityDdjhhNZ9CO3Tg0VI9": "# Functional Interfaces\n\nFunctional interfaces are interfaces that contain only one abstract method. They can have multiple default or static methods, but only one method that needs to be implemented. These interfaces can be used with lambda expressions and method references, allowing for concise and readable code when dealing with single-method operations.\n\nVisit the following resources to learn more:\n\n- [@article@Java Functional Interfaces](https://jenkov.com/tutorials/java-functional-programming/functional-interfaces.html)\n- [@article@Java Functional Interfaces](https://www.baeldung.com/java-8-functional-interfaces)\n\n",
    "generic-collections@eL4pc6SaNiKP48PzN7mNe": "# Generics\n\nJava Generic methods and generic classes enable programmers to specify, with a single method declaration, a set of related methods, or with a single class declaration, a set of related types, respectively.\n\nVisit the following resources to learn more:\n\n- [@article@Java - Generics](https://www.tutorialspoint.com/java/java_generics.htm)\n- [@video@Generics in Java](https://www.youtube.com/watch?v=XMvznsY02Mk)",
    "gradle@rmDIm5dqtdlNfPhvpqS7-": "# Gradle\n\nGradle is an open-source build automation tool that helps software engineers to test, build, and release high-performance software products. In addition, Gradle also supports multi-language development. Currently, the supported languages for Gradle include Java, Kotlin, Groovy, Scala, C/C++, and JavaScript.\n\nVisit the following resources to learn more:\n\n- [@official@Gradle](https://gradle.org/)\n- [@video@Gradle Tutorial](https://youtu.be/kONQCIAcWeI)\n- [@video@Working with Gradle](https://youtu.be/6V6G3RyxEMk)\n- [@article@Building Spring Boot Projects with Gradle](https://www.baeldung.com/spring-boot-gradle-plugin)\n- [@feed@Explore top posts about Gradle](https://app.daily.dev/tags/gradle?ref=roadmapsh)\n",
    "hibernate@UEiDzzodyEu5O1xFAFDly": "# Hibernate\n\nHibernate is an open source object-relational mapping tool that provides a framework to map object-oriented domain models to relational databases for web applications. Hibernate implements the specifications of JPA. Performance is key so Hibernate supports first-level and second-level caching\n\nVisit the following resources to learn more:\n\n- [@official@Hibernate](https://hibernate.org/)\n- [@article@Second-level caching explained](https://hazelcast.com/glossary/hibernate-second-level-cache/)\n",
    "high-order-functions@dz6bCmB4dgA7VVZ448cN6": "# High Order Functions\n\nHigh Order Functions are functions that can either accept other functions as arguments or return functions as their results. This capability allows for more flexible and reusable code by enabling you to abstract over operations. Essentially, you can pass behavior as data, making your code more dynamic and adaptable to different situations.\n\nVisit the following resources to learn more:\n\n- [@article@Java High Order Functions](https://jenkov.com/tutorials/java-functional-programming/higher-order-functions.html)",
    "inheritance@PXpPEmCEBUKRjwP3B5LzJ": "# Inheritance\n\nInheritance is a fundamental concept in object-oriented programming where a new class (called a subclass or derived class) acquires properties and behaviors from an existing class (called a superclass or base class). This allows for code reuse and the creation of hierarchical relationships between classes, promoting a more organized and maintainable codebase. The subclass can extend the superclass by adding new attributes and methods or overriding existing ones.\n\nVisit the following resources to learn more:\n\n- [@article@Java Inheritance](https://jenkov.com/tutorials/java/inheritance.html)\n- [@article@Inheritance in Java with Example](https://www.digitalocean.com/community/tutorials/inheritance-java-example)\n",
    "initializer-block@dg_UpaO8TzIN7w_QZ1n-6": "# Initializer Block\n\nAn initializer block in Java is a block of code, enclosed in curly braces `{}` , that is executed when an instance of a class is created. It's used to initialize instance variables or perform setup tasks before the constructor is called. There are two types: instance initializer blocks, which run every time a new object is created, and static initializer blocks, which run only once when the class is first loaded.\n\nVisit the following resources to learn more:\n\n- [@article@Static and Instance Initializer Blocks in Java](https://www.baeldung.com/java-static-instance-initializer-blocks)\n- [@article@All About Java Instance Initializer Blocks](https://blogs.oracle.com/javamagazine/post/java-instance-initializer-block)\n- [@article@What is an initialization block?](https://stackoverflow.com/questions/3987428/what-is-an-initialization-block)\n",
    "interfaces@6wTRN2PYC6zM_Txkekx53": "# Interfaces\n\nAn interface in Java is a blueprint of a class. It specifies a set of methods that a class must implement if it claims to implement the interface. Think of it as a contract: any class that \"signs\" the contract (implements the interface) agrees to provide specific behaviors (methods). Interfaces can also contain constants (static final variables). They help achieve abstraction and multiple inheritance in Java.\n\nVisit the following resources to learn more:\n\n- [@article@Interfaces in Java](https://jenkov.com/tutorials/java/interfaces.html)\n- [@article@A Guide to Java Interfaces](https://www.baeldung.com/java-interfaces)\n",
    "io-operations@M0ybgK1JCycXhZ1dEpCFo": "# I/O Operations\n\nI/O Operations, short for Input/Output Operations, deal with how a program interacts with the outside world. This involves reading data from sources like files, network connections, or the keyboard, and writing data to destinations such as files, the console, or network sockets. Essentially, it's the mechanism by which a program receives information and sends results.\n\nVisit the following resources to learn more:\n\n- [@article@Java IO Tutorial](https://jenkov.com/tutorials/java-io/index.html)\n",
    "iterator@-17LFO72I8RKjJRMXct9k": "# Iterator\n\nAn Iterator is an object that enables you to traverse through a collection (like a List or Set) one element at a time. It provides a standard way to access elements sequentially without needing to know the underlying structure of the collection. You can use methods like `hasNext()` to check if there's a next element and `next()` to retrieve it.\n\nVisit the following resources to learn more:\n\n- [@article@Java Iterator Tutorial](https://jenkov.com/tutorials/java-collections/iterator.html)\n- [@article@Java Iterable Tutorial](https://jenkov.com/tutorials/java-collections/iterable.html)\n",
    "java-memory-model@wEc7pSVU5G2c6Zqmtb_1k": "# Java Memory Model\n\nThe Java Memory Model (JMM) defines how threads in Java interact with memory. It specifies how and when different threads can see writes to shared variables, addressing issues like data visibility and race conditions in concurrent programs. The JMM ensures that multithreaded Java programs behave predictably across different hardware architectures by establishing rules for memory synchronization and ordering.\n\nVisit the following resources to learn more:\n\n- [@article@Java Memory Model](https://jenkov.com/tutorials/java-concurrency/java-memory-model.html)\n",
    "javalin@OrkJa48HIDmrLOgCBpimA": "# Javalin\n\nJavalin is a lightweight web framework for Java and Kotlin that's designed to be simple, intuitive, and fun to use. It allows developers to quickly build web applications and APIs with minimal boilerplate code. Javalin focuses on providing a straightforward approach to routing, request handling, and response generation, making it a good choice for projects where speed of development and ease of understanding are important.\n\nVisit the following resources to learn more:\n\n- [@official@Javalin Website](https://javalin.io/)\n- [@article@Creating a REST API with Javalin](https://www.baeldung.com/javalin-rest-microservices)\n\n",
    "jdbc@9UbRG752qxJdUwmqEAjN3": "# Java JDBC\n\nJDBC is an API(Application programming interface) used in java programming to interact with databases. The classes and interfaces of JDBC allow the application to send requests made by users to the specified database.\n\nVisit the following resources to learn more:\n\n- [@article@IBM: What is JDBC](https://www.ibm.com/docs/en/informix-servers/12.10?topic=started-what-is-jdbc)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "jmeter@U2BqOY49HaII6mKQB3SVt": "# JMeter\n\nApache JMeter is an Apache project that can be used as a load testing tool for analyzing and measuring the performance of a variety of services, with a focus on web applications.\n\nVisit the following resources to learn more:\n\n- [@article@Apache JMeter Website](https://jmeter.apache.org/)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)\n",
    "junit@hY1-sEpTmpaj1PregdkFf": "# JUnit\n\nJUnit is a testing framework for Java.\n\nVisit the following resources to learn more:\n\n- [@official@JUnit](https://junit.org/junit5)\n- [@official@JUnit Documentation](https://junit.org/junit5/docs/current/user-guide/)\n- [@article@JUnit tutorial](https://www.guru99.com/junit-tutorial.html)\n- [@article@Basic JUnit tutorial](https://www.baeldung.com/junit-5)\n- [@video@Testing with JUnit crash course](https://www.youtube.com/watch?v=flpmSXVTqBI)\n",
    "lambda-expressions@00_q6I95eO-PUUrKpPFY8": "# Lambda Expressions\n\nLambda expressions are essentially short blocks of code that you can pass around to be executed. They allow you to treat functionality as a method argument, or code as data. Think of them as anonymous methods – methods without a name – that can be written directly in the place where they are needed, making your code more concise and readable, especially when dealing with functional interfaces.\n\nVisit the following resources to learn more:\n\n- [@article@Java Lambda Expressions](https://jenkov.com/tutorials/java/lambda-expressions.html)\n",
    "learn-the-basics@2TGq1y2QthnxxN-FfToSe": "# Java Fundamentals\n\nJava is a programming language and computing platform first released by Sun Microsystems in 1995. Java is a general-purpose, class-based, object-oriented programming language designed for having lesser implementation dependencies. It is a computing platform for application development. Java is fast, secure, and reliable. Therefore, it is widely used for developing Java applications in laptops, data centers, game consoles, scientific supercomputers, cell phones, etc.\n\nLearn about the fundamentals of Java such as basic syntax, data types, variables, conditionals, functions, data structures, packages, etc.\n\nVisit the following resources to learn more:\n\n- [@video@Java Tutorial for Beginners](https://youtu.be/eIrMbAQSU34)\n- [@video@Java + DSA + Interview Preparation Course (For beginners)](https://youtube.com/playlist?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ)\n- [@article@Head First Java](https://www.amazon.co.uk/Head-First-Java-3rd-Brain-Friendly/dp/1491910771)\n- [@article@Thinking in Java](https://www.amazon.co.uk/Thinking-Java-Eckel-Bruce-February/dp/B00IBON6C6)\n- [@article@Effective Java](https://www.amazon.com/Effective-Java-Joshua-Bloch/dp/0134685997)\n- [@article@Java: A Beginners Guide](https://www.amazon.co.uk/Java-Beginners-Guide-Herbert-Schildt/dp/1260463559)\n- [@article@Java: The Complete Reference](https://www.amazon.co.uk/gp/product/B09JL8BMK7/ref=dbs_a_def_rwt_bibl_vppi_i2)\n- [@course@Introduction to Java by Hyperskill (JetBrains Academy)](https://hyperskill.org/tracks/8)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "lifecycle-of-a-program@QgWalJLIb6Fw0HhN1wb02": "# Lifecycle of a Program\n\nIn Java, the program lifecycle consists of several distinct phases that work together to execute code. The process begins with developers writing Java source code in `.java` files using an IDE or text editor. This code is then compiled by the Java compiler (javac) into bytecode stored in `.class` files, with syntax and type checking performed during compilation. When the program runs, the Java Virtual Machine (JVM) loads these compiled class files into memory through a process involving loading of binary data, linking for verification and preparation, and initialization of class elements. The JVM then verifies the bytecode's security compliance, performs Just-In-Time (JIT) compilation to translate bytecode into native machine code for better performance, and executes the program instructions while managing system resources. Throughout execution, the JVM handles garbage collection by reclaiming memory from unused objects, and finally releases all resources upon program termination. This architecture enables Java's \"write once, run anywhere\" capability since the bytecode can execute on any device with a compatible JVM.\n\nVisit the following resources to learn more:\n\n- [@article@Life Cycle of a Java Program](https://www.startertutorials.com/corejava/life-cycle-java-program.html)\n- [@article@How the JVM Executes Java Code](https://www.cesarsotovalero.net/blog/how-the-jvm-executes-java-code.html)\n",
    "log4j2@sFaNj_1MviaTc6UIfjXl6": "# Log4j2\n\nApache Log4j is a Java-based logging utility. Log4j Java library's role is to log information that helps applications run smoothly, determine what's happening, and help with the debugging process when errors occur. Logging libraries typically write down messages to the log file or a database.\n\nLog4j2 is the updated version of the popular and influential log4j library, used extensively throughout the Java ecosystem for so many years. Version 2. x keeps all the logging features of its predecessor and builds on that foundation with some significant improvements, especially in the area of performance.\n\nVisit the following resources to learn more:\n\n- [@article@Official Website](https://logging.apache.org/log4j/2.x/manual/configuration.html)\n- [@article@Log4j explained: Everything you need to know](https://www.techtarget.com/whatis/feature/Log4j-explained-Everything-you-need-to-know)\n",
    "logback@okC1uMdyfIJAhX_R9Npsw": "# Logback\n\nLogback is one of the most widely used logging frameworks in the Java Community. It's a replacement for its predecessor, Log4j. Logback offers a faster implementation, provides more options for configuration, and more flexibility in archiving old log files.\n\nVisit the following resources to learn more:\n\n- [@article@Official Website](https://logback.qos.ch/manual/configuration.html)\n",
    "logging-frameworks@d9F5Wt8onY125DLuzNULg": "# Logging Frameworks\n\nLogging is an important feature that helps developers to trace out the errors. It provides the ability to capture the log file. Logging provides the complete tracing information of the application and also records the critical failure if any occur in an application. There are three components of Logging: Logger, Logging handlers or Appenders and Layouts or logging formatters.\n\nVisit the following resources to learn more:\n\n- [@article@Introduction to Java Logging](https://www.baeldung.com/java-logging-intro)\n- [@article@Java Logging Frameworks](https://en.wikipedia.org/wiki/Java_logging_framework)\n- [@article@How to Do Logging In Java](https://www.marcobehler.com/guides/java-logging)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "loops@JHUhVEjWFXTn6-wKcKevg": "# Loops\n\nIn Java and other programming languages, loops are used to iterate a part of the program several times. There are four types of loops in Java, `for`, `forEach`, `while`, and `do...while`.\n\n- Syntax of `for` loop is `for(initialization;condition;increment/decrement){}`\n- Syntax of `forEach` loop is `for(data_type variable:array_name){}`\n\nVisit the following resources to learn more:\n\n- [@article@Loops in Java.](https://www.programiz.com/java-programming/for-loop)\n",
    "map@eKtdDtiJygKQ4PuEylFQY": "# Map\n\nA Map is a data structure that stores data in key-value pairs. Each key is unique, and it maps to a specific value. Think of it like a dictionary where you use a word (the key) to look up its definition (the value). Maps allow you to efficiently retrieve, add, or remove values based on their associated keys.\n\nVisit the following resources to learn more:\n\n- [@article@Generic Map in Java](https://jenkov.com/tutorials/java-generics/generic-map.html)\n- [@article@Java Map](https://jenkov.com/tutorials/java-collections/map.html)\n- [@article@Java ConcurrentMap](https://jenkov.com/tutorials/java-util-concurrent/concurrentmap.html)\n- [@article@Java SortedMap](https://jenkov.com/tutorials/java-collections/sortedmap.html)\n",
    "math-operations@ziD_XwzJSFQP_3iLjq9pA": "# Math Operations\n\nMath operations involve performing calculations using numbers. These operations include addition, subtraction, multiplication, division, and modulus (finding the remainder). They are fundamental building blocks for solving numerical problems and manipulating data in programming.\n\nVisit the following resources to learn more:\n\n- [@article@Java Math](https://jenkov.com/tutorials/java/math-operators-and-math-class.html)\n",
    "maven@VdL_fAHxmRbuF0J627beA": "# Maven\n\nMaven is an open-source build tool, used primarily for Java projects.\n\nVisit the following resources to learn more:\n\n- [@article@Getting started](https://maven.apache.org/guides/getting-started/)\n- [@article@Building Spring Projects with Maven](https://www.baeldung.com/spring-with-maven)\n- [@feed@Explore top posts about Maven](https://app.daily.dev/tags/maven?ref=roadmapsh)\n",
    "method-chaining@Ax2ouIZgN1DpPzKDy4fwp": "# Method Chaining\n\nMethod chaining is a programming technique where multiple method calls are made sequentially on the same object, one after another, in a single statement. Each method in the chain returns an object, allowing the next method to be called on that returned object. This approach enhances code readability and conciseness by reducing the need for temporary variables and intermediate steps.\n\nVisit the following resources to learn more:\n\n- [@stackoverflow@How to achieve method chaining in Java](https://stackoverflow.com/questions/21180269/how-to-achieve-method-chaining-in-java)\n",
    "method-overloading--overriding@y-i56f1P_mMdvyBr7J4XE": "# Method Overloading and Overriding\n\nMethod overloading allows you to define multiple methods in the same class with the same name but different parameters (different number, types, or order of parameters). Method overriding, on the other hand, occurs when a subclass provides a specific implementation for a method that is already defined in its superclass. The method signature (name and parameters) must be the same in both the superclass and the subclass for overriding to occur.\n\nVisit the following resources to learn more:\n\n- [@article@Overriding vs Overloading in Java](https://www.digitalocean.com/community/tutorials/overriding-vs-overloading-in-java)\n- [@article@Java Inheritance Tutorial](https://jenkov.com/tutorials/java/inheritance.html)\n",
    "mocking--mockito@mLM1HJf6_pxrUDOmb45ew": "# Mocking\n\nMocking removes external dependencies from a unit test to create a sense of an entire controlled environment. The traditional method of mocks involves mocking all other classes that interact with the class we want to test. The common targets for mocking are:\n\n- Database connections\n- Web services\n- Slow Classes\n- Classes with side effects\n- Classes with non-deterministic behavior\n\nVisit the following resources to learn more:\n\n- [@article@Mockito - Mocking Framework for Java](https://site.mockito.org/)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)\n",
    "modules@kdxy8Zssnc5lJjdmjUyMc": "# Modules\n\nModules in Java are a way to organize code into reusable and independent units. They provide a higher level of abstraction than packages, allowing you to control which parts of your code are exposed to other modules and which are kept private. This enhances encapsulation, improves security, and simplifies dependency management by explicitly declaring dependencies between modules.\n\nVisit the following resources to learn more:\n\n- [@article@Java Modules](https://jenkov.com/tutorials/java/modules.html)\n- [@article@A Guide to Java 9 Modularity](https://www.baeldung.com/java-modularity)\n",
    "nested-classes@zDBW20W2XMCtNTG3emJ_A": "# Nested Classes\n\nNested classes are classes defined inside another class. The class that contains the inner class is known as the outer class. Nested classes can access members of the outer class, even if they are declared private. They are a way to logically group classes that are only used in one place, increasing encapsulation and maintainability.\n\nVisit the following resources to learn more:\n\n- [@article@Java Nested Classes](https://jenkov.com/tutorials/java/nested-classes.html)\n- [@article@Guide to Nested Classes in Java](https://www.baeldung.com/java-nested-classes)\n",
    "networking@JeMG0gU8IVRBZgczjXmPi": "# Networking sockets\n\n- Java Networking is a concept of connecting two or more computing devices together so that we can share resources.\n- Java socket programming provides facility to share data between different computing devices.\n- A socket is one endpoint of a two-way communication link between two programs running on the network. A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to.\n\nVisit the following resources to learn more:\n\n- [@article@Sockets](https://docs.oracle.com/javase/tutorial/networking/sockets/index.html)\n- [@video@What is Socket Programming?](https://youtu.be/BqBKEXLqdvI)\n- [@article@Java Networking](https://www.tutorialspoint.com/java/java_networking.htm)\n- [@feed@Explore top posts about Networking](https://app.daily.dev/tags/networking?ref=roadmapsh)\n",
    "object-lifecycle@3qowgj1pas1X7oRric9eU": "# Object Lifecycle\n\nThe object lifecycle refers to the series of stages an object goes through from its creation (allocation of memory) to its destruction (reclaiming of memory). These stages typically include object creation, initialization, usage, and eventual garbage collection when the object is no longer needed. Understanding this lifecycle is crucial for efficient memory management and preventing resource leaks.",
    "optionals@l9fxK8K9fcUqR7hs5TkWU": "# Optionals\n\nOptionals are a container object that may or may not contain a non-null value. They are primarily used to represent the absence of a value, avoiding the need to return null, which can lead to NullPointerExceptions. Optionals provide methods to explicitly check if a value is present and to handle cases where a value is absent in a more controlled and readable manner.\n\nVisit the following resources to learn more:\n\n- [@article@Guide To Optionals](https://www.baeldung.com/java-optional)\n- [@article@Java Optional](https://dzone.com/articles/optional-in-java)\n",
    "packages@60POZOjwHSdKYL6rfkyEy": "# Packages\n\nA package is a namespace that mainly contains classes and interfaces. For instance, the standard class `ArrayList` is in the package `java.util`. For this class, `java.util.ArrayList` is called its fully qualified name because this syntax has no ambiguity. Classes in different packages can have the same name. For example, you have the two classes `java.util.Date` and `java.sql.Date`, which are different. If no package is declared in a class, its package is the default package.\n\nTo create package use this command -> javac -d directory javafilename\n\nVisit the following resources to learn more:\n\n- [@article@Packages in Java](https://docs.oracle.com/javase/8/docs/api/java/lang/Package.html)\n",
    "pass-by-value--pass-by-reference@3r0Er9XZHovIZz3gNyj4A": "# Pass by Value / Pass by Reference\n\nPass by value and pass by reference are two different ways of passing arguments to a function or method. In pass by value, a copy of the variable's value is passed to the function, so any changes made to the parameter inside the function do not affect the original variable. In pass by reference, a direct reference to the variable is passed, meaning that changes made to the parameter inside the function will directly affect the original variable.\n\nVisit the following resources to learn more:\n\n- [@article@Java is Pass-by-Value, Not Pass-by-Reference](https://www.baeldung.com/java-pass-by-value-or-pass-by-reference)\n- [@article@Is Java \"pass-by-reference\" or \"pass-by-value\"?](https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value)",
    "play-framework@kN-mXxqUPNJNsJGQ0U_7J": "# Play Framework\n\nPlay Framework is a high-productivity web application framework that allows the model-view-controller pattern. It is written in Scala but can also be used for other programming languages that are compiled and run on the JVM. e.g.Java.\n\nVisit the following resources to learn more:\n\n- [@official@Play Framework Website](https://www.playframework.com/)\n- [@video@Introduction to Play Framework](https://youtu.be/bLrmnjPQsZc)\n- [@article@What is Play Framework?](https://en.wikipedia.org/wiki/Play_Framework)\n- [@article@Intro to Play Framework](https://www.baeldung.com/java-intro-to-the-play-framework)\n",
    "quarkus@w-kcKPh8U0P_jtT90_1Xy": "# Quarkus\n\nQuarkus is a Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards. It is a full-stack, Kubernetes-native Java framework made for Java virtual machines (JVMs) and native compilation, optimizing Java specifically for containers and enabling it to become an effective platform for serverless, cloud, and Kubernetes environments.\n\n- [@official@Official Website](https://quarkus.io/)\n- [@feed@Explore top posts about Quarkus](https://app.daily.dev/tags/quarkus?ref=roadmapsh)\n",
    "queue@ThoWhXb4vUvNfE70_wMfa": "# Queue\n\nA queue is a fundamental data structure that follows the First-In, First-Out (FIFO) principle. Think of it like a line at a store: the first person to join the line is the first person to be served.  Elements are added to the rear (enqueue) and removed from the front (dequeue) of the queue.\n\nVisit the following resources to learn more:\n\n- [@article@Java Queue](https://jenkov.com/tutorials/java-collections/queue.html)\n",
    "record@VqLV7kolfRFnvOuJAvzlg": "# Record\n\nA record is a special type of class in Java that is designed to hold immutable data. It automatically generates methods like `equals()`, `hashCode()`, and `toString()` based on the components declared in its header, reducing boilerplate code. Records are useful for creating data transfer objects (DTOs) or simple data aggregates where the primary purpose is to store and access data.\n\nVisit the following resources to learn more:\n\n- [@article@Java Records](https://jenkov.com/tutorials/java/record.html)\n- [@video@Java Records](https://www.youtube.com/watch?v=xs7DiEIHW0U)\n",
    "regular-expressions@C7rB3jkshHFN7TkHRJPlz": "# Regular Expressions\n\nRegular expressions, often shortened to \"regex,\" are sequences of characters that define a search pattern. These patterns are used to match character combinations in strings. They can be used to search, edit, or manipulate text and data. Regular expressions provide a powerful and flexible way to work with text-based data.\n\nVisit the following resources to learn more:\n\n- [@article@Java Regular Expressions Tutorial](https://jenkov.com/tutorials/java-regex/index.html)\n",
    "rest-assured@gB4XUR9nCdF1-dOEwGcHi": "# Rest assured\n\nTesting and validating REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST Assured brings the simplicity of using these languages into the Java domain.\n\nVisit the following resources to learn more:\n\n- [@official@Rest-assured](https://rest-assured.io/)\n- [@opensource@Rest-assured Documentation](https://github.com/rest-assured/rest-assured/wiki)\n- [@article@A Guide to REST-assured](https://www.baeldung.com/rest-assured-tutorial)\n- [@feed@Explore top posts about REST API](https://app.daily.dev/tags/rest-api?ref=roadmapsh)\n",
    "set@XjkNd5WJ9yxW48dwHQNkZ": "# Set\n\nA Set is a data structure that stores a collection of unique elements. This means that no duplicate values are allowed within a Set. Sets provide efficient ways to check for membership (if an element exists in the set) and perform operations like union, intersection, and difference.\n\nVisit the following resources to learn more:\n\n- [@article@Java Set](https://jenkov.com/tutorials/java-collections/set.html)\n- [@article@Java Set Interface and Implementation](https://www.digitalocean.com/community/tutorials/java-set)\n",
    "slf4j@LGlZHKqyQ-aWtHnhklhgn": "# Slf4j\n\nThe SLF4J or the Simple Logging Facade for Java is an abstraction layer for various Java logging frameworks, like Log4j 2 or Logback. This allows for plugging different logging frameworks at deployment time without the need for code changes.\n\nVisit the following resources to learn more:\n\n- [@article@Official Website](https://www.slf4j.org/)\n",
    "spring-data-jpa@WzWOxBUKKg6LeuBmVesc2": "# Spring data jpa\n\nSpring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that's actually needed. As a developer you write your repository interfaces, including custom finder methods, and Spring will provide the implementation automatically.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Data JPA](https://spring.io/projects/spring-data-jpa)\n- [@article@Introduction to Spring Data JPA](https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa)\n- [@video@Spring Data JPA Tutorial](https://youtu.be/XszpXoII9Sg)\n- [@video@Spring Boot Tutorial - Spring Data JPA](https://youtu.be/8SGI_XS5OPw)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-spring-boot@xoryfi4SpJlkz-PV05ql6": "# Spring Boot\n\nSpring Boot is an open source, microservice-based Java web framework. The Spring Boot framework creates a fully production-ready environment that is completely configurable using its prebuilt code within its codebase. The microservice architecture provides developers with a fully enclosed application, including embedded application servers.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Spring Boot Roadmap](https://roadmap.sh/spring-boot)\n- [@official@Spring Boot](https://spring.io/projects/spring-boot/)\n- [@article@What is Spring Boot?](https://www.ibm.com/cloud/learn/java-spring-boot)\n- [@article@Spring Boot Tutorial](https://www.javaguides.net/2021/07/spring-boot-tutorial-for-beginners.html)\n- [@article@Learn Spring Boot](https://www.baeldung.com/spring-boot)\n- [@video@Spring Boot Tutorial](https://youtu.be/vtPkZShrvXQ)\n- [@video@Spring Boot for Beginners](https://youtu.be/UfOxcrxhC0s)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "stack@DzfE_9WLAp-BrG3C1-MwU": "# Stack\n\nA stack is a fundamental data structure that follows the Last-In, First-Out (LIFO) principle. Imagine a stack of plates; you can only add or remove plates from the top. This means the last element added to the stack is the first one to be removed. Stacks are used to manage function calls, evaluate expressions, and implement undo/redo functionality.\n\nVisit the following resources to learn more:\n\n- [@article@Java Stack Tutorial](https://jenkov.com/tutorials/java-collections/stack.html)\n- [@article@Guide to Java Stack](https://www.baeldung.com/java-stack)\n",
    "static-keyword@ZcNxO6qIXIg7RaWYnZj2e": "# Static Keyword\n\nThe `static` keyword in Java is used to create members (variables and methods) that belong to the class itself, rather than to any specific instance of the class. This means there's only one copy of a static variable shared by all objects of that class, and you can access static members directly using the class name without needing to create an object. Static methods can only access static variables and call other static methods.\n\nVisit the following resources to learn more:\n\n- [@article@Java Static Keyword Explained With Examples](https://www.freecodecamp.org/news/java-static-keyword-explained/)\n- [@article@Static and Non-static Fields in Java](https://jenkov.com/tutorials/java/fields.html#static-and-non-static-fields)\n- [@article@Guide to the Java 'static' Keyword](https://www.baeldung.com/java-static)\n",
    "static-vs-dynamic-binding@Kjdj862xnz8fqDYE3HKhC": "# Static vs Dynamic Binding\n\nStatic binding, also known as early binding, happens at compile time. The compiler knows exactly which method will be called based on the type of the variable. Dynamic binding, or late binding, occurs at runtime. The specific method to be called is determined based on the actual object type, not the variable type, allowing for more flexibility and polymorphism.\n\nVisit the following resources to learn more:\n\n- [@article@Static and Dynamic Binding in Java](https://www.baeldung.com/java-static-dynamic-binding)\n- [@article@Static and Dynamic Binding in Java with Examples](https://beginnersbook.com/2013/04/java-static-dynamic-binding/)\n",
    "stream-api@WHxAwfdKHQSOg0TLX05EG": "# Streams\n\nJava provides a new additional package in Java 8 called java.util.stream. This package consists of classes, interfaces and enum to allows functional-style operations on the elements. You can use stream by importing java.util.stream package.\n\nVisit the following resources to learn more:\n\n- [@video@Streams API Tutorial in Java 8+](https://www.youtube.com/watch?v=VNovNwHr9jY)\n- [@video@Java 8 Streams Tutorial](https://www.youtube.com/watch?v=t1-YZ6bF-g0)\n- [@article@The Java 8 Stream API Tutorial](https://www.baeldung.com/java-8-streams)",
    "strings-and-methods@aEaBobzFWv0mJHGAbgxKY": "# Strings and Methods\n\nStrings are sequences of characters, like words or sentences, used to represent text in programming. Methods are actions you can perform on these strings, such as finding their length, changing their case (uppercase or lowercase), or extracting parts of them. These methods allow you to manipulate and work with text data effectively.\n\nVisit the following resources to learn more:\n\n- [@article@Java Strings](https://jenkov.com/tutorials/java/strings.html)\n",
    "testing@LgpsnXV0CTvTspjnsd0Rd": "# Testing\n\nA key to building software that meets requirements without defects is testing. Software testing helps developers know they are building the right software. When tests are run as part of the development process (often with continuous integration tools), they build confidence and prevent regressions in the code.\n\nVisit the following resources to learn more:\n\n- [@article@What is Software Testing?](https://www.guru99.com/software-testing-introduction-importance.html)\n- [@article@Testing Pyramid](https://www.browserstack.com/guide/testing-pyramid-for-test-automation)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "testng@XU2C8bF9ICej8LS7ZGTTv": "# Testng\n\nTestNG is a testing framework inspired from JUnit and NUnit but introducing some new functionalities that make it more powerful and easier to use.\n\nVisit the following resources to learn more:\n\n- [@official@Testng](https://testng.org)\n- [@official@Testng Documentation](https://testng.org/doc/documentation-main.html)\n- [@article@Testng tutorial](https://www.guru99.com/all-about-testng-and-selenium.html)\n",
    "threads@u_YysD7Bpnq-xkFX5yJGz": "# Basics of Threads\n\nA thread in Java is the direction or path that is taken while a program is being executed. Generally, all the programs have at least one thread, known as the main thread, that is provided by the JVM or Java Virtual Machine at the starting of the program’s execution.\n\nWriting correct multi-threaded application is complex and it's an advanced topic. Things like ParallelStreams, thread-safe Collections and ExecutorService can be helpful.\n\nVisit the following resources to learn more:\n\n- [@article@Threads in Java](https://jenkov.com/tutorials/java-concurrency/index.html)\n- [@video@Java Threads Tutorial](https://www.youtube.com/watch?v=TCd8QIS-2KI)\n",
    "tinylog@Fn7aAaGbwYsAp4xLuuFud": "# Tinylog\n\nTinylog is a lightweight open-source logging framework for Java and Android, optimized for ease of use.\n\nVisit the following resources to learn more:\n\n- [@official@Official Website](https://tinylog.org/v1/)\n- [@official@TinyLog v2](https://tinylog.org/v2/)\n",
    "type-casting@yNDbk6r5wFqBi25xmIRF_": "# Type Casting\n\nType casting is the process of converting a variable from one data type to another. This is often necessary when you need to perform operations between variables of different types, or when you need to store a value of one type in a variable of another type. In Java, type casting can be either implicit (automatic) or explicit (requiring a cast operator).\n\nVisit the following resources to learn more:\n\n- [@article@Type Casting in Java: Everything You Need to Know](https://www.simplilearn.com/tutorials/java-tutorial/type-casting-in-java)\n- [@article@Java Type Casting (With Examples)](https://www.programiz.com/java-programming/typecasting)\n",
    "variables-and-scopes@VBNcAO0STaZJ1iV9A7utv": "# Variables and Scopes\n\nVariables are like containers that hold data in a program. Each variable has a name, a type (like integer, text, or boolean), and a value. The scope of a variable determines where in your code you can access and use that variable. Understanding scope is crucial to avoid naming conflicts and ensure data is accessed correctly within different parts of your program.\n\nVisit the following resources to learn more:\n\n- [@article@Java Variables](https://jenkov.com/tutorials/java/variables.html)\n- [@article@Java Variable Scope](https://www.baeldung.com/java-variable-scope)\n",
    "virtual-threads@vJSq1GJLIMQ6IIB8CMK8g": "# Virtual Threads\n\nVirtual Threads are lightweight threads managed by the Java Virtual Machine (JVM). Unlike traditional operating system threads, which are relatively expensive to create and manage, virtual threads are designed to be extremely lightweight, allowing for the creation of millions of them. They are intended to improve the scalability and concurrency of Java applications by making it easier to write code that can handle a large number of concurrent operations without the overhead associated with traditional threads.\n\nVisit the following resources to learn more:\n\n- [@article@Java 21 Virtual Threads: Dude, Where's My Lock?](https://netflixtechblog.com/java-21-virtual-threads-dude-wheres-my-lock-3052540e231d)\n- [@article@Virtual Thread vs Thread in Java](https://www.baeldung.com/java-virtual-thread-vs-thread)\n- [@article@The Ultimate Guide to Java Virtual Threads](https://rockthejvm.com/articles/the-ultimate-guide-to-java-virtual-threads)\n",
    "volatile-keyword@U4Wx3MH3LgJLa0n9Ne0Br": "# Volatile Keyword\n\nThe `volatile` keyword in Java is a modifier that can be applied to instance variables. It ensures that all threads see the most up-to-date value of a variable. Without `volatile`, each thread might cache its own copy of the variable, leading to inconsistencies when multiple threads access and modify it concurrently. Using `volatile` forces the thread to read the variable's value directly from main memory, and write changes directly back to main memory, bypassing the thread's local cache.\n\nVisit the following resources to learn more:\n\n- [@article@Java Volatile Keyword](https://jenkov.com/tutorials/java-concurrency/volatile.html)\n- [@article@Guide to the Volatile Keyword in Java](https://www.baeldung.com/java-volatile)\n",
    "web-frameworks@_W84u4UXMSY0zvy6RJvFi": "# Web Frameworks\n\nFrameworks are tools with pre-written code, that act as a template or skeleton, which can be reused to create an application by simply filling with your code as needed which enables developers to program their application with no overhead of creating each line of code again and again from scratch.\n"
  },
  "java": "---\njsonUrl: '/jsons/roadmaps/java.json'\npdfUrl: '/pdfs/roadmaps/java.pdf'\norder: 9\nrenderer: 'editor'\nbriefTitle: 'Java'\nbriefDescription: 'Step by step guide to becoming a Java Developer in 2025'\ntitle: 'Java Developer'\ndescription: 'Step by step guide to becoming a Java developer in 2025'\nhasTopics: true\ncourses:\n  - title: 'Complete Course to Master SQL'\n    description: 'Learn SQL from scratch with this comprehensive course'\n    link: 'https://roadmap.sh/courses/sql'\n    features:\n      - '55+ Lessons'\n      - 'AI Tutor'\n      - 'Coding Environment'\n      - 'Quizzes'\n      - 'Certification'\n    instructor:\n      name: 'Kamran Ahmed'\n      image: 'https://github.com/kamranahmedse.png'\n      title: 'Founder - roadmap.sh'\nquestion:\n  title: 'What is a Java Developer?'\n  description: |\n    A Java Developer is a software engineer specialized in developing applications using the Java language.\n\n    Their work includes building web apps (like AEM or Liferay, both built in Java), desktop apps (such as Eclipse, the de facto IDE for Java itself), and enterprise systems (like ERP & CRM systems). Their responsibilities include writing code, solving technical issues, and ensuring the performance and reliability of the software.\n\n    Java developers usually work with various tools and technologies, including JVM, frameworks like Vaadin, Struts, and others, and REST APIs, to deliver high-quality solutions.\n\n    While Java is a very versatile language and the JVM allows for portability across multiple environments, Java developers can typically be found working in the financial, healthcare, telecom, and data-related industries.\n\n    ## What do Java Developers do?\n\n    Java Developers spend most of their time creating Java programs for various applications, including web apps, desktop applications, and large-scale enterprise systems. They are responsible for designing, writing, testing, and maintaining code to ensure performance, functionality, and security.\n\n    One of the most common tasks of a Java Developer is working on backend development, where they create server-side logic, manage databases, and ensure seamless communication between different parts of an application. For example, they can use Spring Boot and Hibernate to build RESTful APIs.\n\n    In enterprise environments, Java Developers work with large-scale solutions used by corporations, banks, and government institutions. For instance, they might develop an online banking system that processes thousands of transactions per second, ensuring high performance and reliability. In this case, they would work with JVM tuning, concurrency management, and database optimization to maintain system stability.\n\n    Overall, Java Developers are expected to continuously learn and stay updated with the latest tech trends and best practices to ensure they deliver high-performance software solutions that meet business and user needs.\n\n    ## What skills do I need to become a Java Developer?\n\n    To become a Java Developer you need multiple different skills. The first thing you need is a strong foundation in the Java programming language, its ecosystem, and a proper understanding of software engineering principles.\n\n    Of course, going deeper into Java, knowledge of JVM, concurrency, and memory management are crucial [java developer skills](https://roadmap.sh/java/developer-skills) to work on those large-scale enterprise systems.\n\n    If you're working with RESTful APIs (which is highly likely), understanding technologies like Hibernate and having experience with Oracle (or other types of SQL) databases are important for backend Java developers.\n\n    Generally speaking, devs should also be skilled in analyzing and solving tech problems, working within a team, and following industry standards in software development. Given the industries where Java is quite popular, familiarity with web applications, testing tools, and modern engineering practices is also very valuable.\n\n    ## How do I become a Java Developer?\n\n    To become a Java developer, it's highly recommended to follow a structured learning process (for example, the [Java roadmap](https://roadmap.sh/java) is a good place to start).\n\n    The first thing to focus on is to learn the Java programming language, gaining an understanding of its core concepts, typing system, and some Object Oriented Programming (given how Java is highly based on it). You'll likely expand this last part over time, as it's one of the core principles around the language.\n\n    Once familiar with Java, start practicing developing small Java programs; they will give you a chance to face real-world problems and find creative solutions to them. While you're doing that, try to study best practices and understand development methodologies to help you build expertise.\n\n    And if that wasn't enough, many aspiring developers take online training courses and gain real-world experience through entry-level roles. In the end, the best way to learn programming is by doing, and these entry-level jobs are great for that.\n\ndimensions:\n  width: 968\n  height: 2000\nschema:\n  headline: 'Java Developer Roadmap'\n  description: 'Learn how to become a Java Developer with this interactive step by step guide in 2025. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/java.png'\n  datePublished: '2023-01-05'\n  dateModified: '2023-01-20'\nseo:\n  title: 'Learn to become a modern Java developer'\n  description: 'Community driven, articles, resources, guides, interview questions, quizzes for java development. Learn to become a modern Java developer by following the steps, skills, resources and guides listed in this roadmap.'\n  keywords:\n    - 'guide to becoming a developer'\n    - 'guide to becoming a java developer'\n    - 'java developer'\n    - 'java engineer'\n    - 'java skills'\n    - 'guide to java'\n    - 'java roadmap'\n    - 'java roadmap 2025'\n    - 'java skills'\n    - 'java skills test'\n    - 'skills for java'\n    - 'cloud development'\n    - 'what is java'\n    - 'java quiz'\n    - 'java interview questions'\n    - 'java engineer roadmap'\n    - 'java engineer roadmap 2025'\n    - 'java developer roadmap 2025'\n    - 'java developer roadmap'\n    - 'become a java developer'\n    - 'java developer career path'\n    - 'java developer'\n    - 'modern java developer'\nrelatedRoadmaps:\n  - 'backend'\n  - 'spring-boot'\n  - 'devops'\n  - 'golang'\n  - 'javascript'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'skill-roadmap'\n---\n",
  "migration-mapping": {
    "java-fundamentals": "2TGq1y2QthnxxN-FfToSe",
    "java-fundamentals:basic-syntax": "OlbQNB6YXZjO1J7D0lZU1",
    "java-fundamentals:conditionals": "sG_3ZQIE1-FQXQkk-OduQ",
    "java-fundamentals:date-time": "9h20XVRli7TDq0QIJwX2U",
    "java-fundamentals:loops": "JHUhVEjWFXTn6-wKcKevg",
    "java-fundamentals:exception-handling": "g9P3548F38tYGjevBc42w",
    "java-fundamentals:data-types-variables": "5g9mmi01WeZ4aDqNzwx_V",
    "java-fundamentals:packages": "60POZOjwHSdKYL6rfkyEy",
    "java-fundamentals:files-and-apis": "NowpzyPVFcX082j5YS5i8",
    "java-advanced-topics:basics-of-threads": "u_YysD7Bpnq-xkFX5yJGz",
    "java-advanced-topics:streams": "WHxAwfdKHQSOg0TLX05EG",
    "java-advanced-topics:networking-sockets": "JeMG0gU8IVRBZgczjXmPi",
    "java-build-tools:gradle": "rmDIm5dqtdlNfPhvpqS7-",
    "java-build-tools:maven": "VdL_fAHxmRbuF0J627beA",
    "java-build-tools": "81N1cZLue_Ii0uD5CV6kZ",
    "java-web-frameworks": "_W84u4UXMSY0zvy6RJvFi",
    "java-web-frameworks:spring-boot": "xoryfi4SpJlkz-PV05ql6",
    "java-web-frameworks:quarkus": "w-kcKPh8U0P_jtT90_1Xy",
    "java-web-frameworks:play-framework": "kN-mXxqUPNJNsJGQ0U_7J",
    "java-logging-frameworks:logback": "okC1uMdyfIJAhX_R9Npsw",
    "java-logging-frameworks:log4j2": "sFaNj_1MviaTc6UIfjXl6",
    "java-logging-frameworks:slf4j": "LGlZHKqyQ-aWtHnhklhgn",
    "java-logging-frameworks:tinylog": "Fn7aAaGbwYsAp4xLuuFud",
    "java-orm": "fV-gW51jhna2__Ln2HIIh",
    "java-orm:spring-data-jpa": "WzWOxBUKKg6LeuBmVesc2",
    "java-orm:hibernate": "UEiDzzodyEu5O1xFAFDly",
    "java-orm:ebean": "X2rJ3BY1ytFKsbJqJETFu",
    "java-jdbc": "9UbRG752qxJdUwmqEAjN3",
    "java-logging-frameworks": "d9F5Wt8onY125DLuzNULg",
    "testing-java-apps": "LgpsnXV0CTvTspjnsd0Rd",
    "testing-java-apps:mocking": "mLM1HJf6_pxrUDOmb45ew",
    "testing-java-apps:cucumber-jvm": "UFDy19TNkykRsKv4vRsVJ",
    "testing-java-apps:junit": "hY1-sEpTmpaj1PregdkFf",
    "testing-java-apps:testng": "XU2C8bF9ICej8LS7ZGTTv",
    "testing-java-apps:jmeter": "U2BqOY49HaII6mKQB3SVt",
    "testing-java-apps:rest-assured": "gB4XUR9nCdF1-dOEwGcHi",
    "java-advanced-topics:generics": "eL4pc6SaNiKP48PzN7mNe"
  }
}