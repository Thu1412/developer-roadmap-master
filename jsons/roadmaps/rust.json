{
  "content": {
    "actix@3Y90v2ysoMcyjDL24H7mC": "# Actix\n\nActix is a high-performance, pragmatic web framework for Rust built on the actor model. It features powerful middleware, WebSocket support, and excellent performance benchmarks. Actix provides a flexible, feature-rich API for building web applications, APIs, and microservices with minimal boilerplate.\n\nVisit the following resources to learn more:\n\n- [@official@Actix - Actor framework for Rust](https://actix.rs/)\n- [@official@Actix Documentation](https://docs.rs/actix/latest/actix/)\n- [@article@Building a Clean API in Rust with Actix Web](https://medium.com/@anto18671/building-a-clean-api-in-rust-with-actix-web-a-comprehensive-guide-d084e368a988)",
    "arc@yYmV5qkldu0FkDhOhWOXs": "# Arc\n\n`Arc<T>` (Atomic Reference Counting) is a thread-safe smart pointer for sharing immutable data across multiple threads. It uses atomic operations to track reference counts, allowing multiple ownership of heap-allocated data. When the reference count reaches zero, the data is automatically cleaned up.\n\nLearn more from the following links:\n\n- [@official@Arc in std::sync](https://doc.rust-lang.org/std/sync/struct.Arc.html)\n- [@official@Arc in Rust Lang](https://doc.rust-lang.org/rust-by-example/std/arc.html)",
    "array@2DbdHCjFzGHwCUETakaGh": "# Array\n\nArrays are fixed-size collections of elements of the same type stored consecutively in memory. Size must be known at compile time and cannot change. Syntax: `let arr: [type; size] = [elements];`. Example: `let nums: [i32; 3] = [1, 2, 3];`. Access elements with zero-based indexing: `arr[0]`.\n\nLearn more from the following links:\n\n- [@official@Array](https://doc.rust-lang.org/std/primitive.array.html)\n- [@article@The Array Type](https://rust-book.cs.brown.edu/ch03-02-data-types.html#the-array-type)\n- [@article@Rust Array (With Examples)](https://www.programiz.com/rust/array)\n- [@video@Rust Tutorial - Arrays](https://www.youtube.com/watch?v=t047Hseyj_k&t=767s)\n",
    "async-std@_2uQInXPdOY-DpYTO1Prt": "# async-std\n\n`async-std` provides an asynchronous version of Rust's standard library, offering familiar APIs for async programming. It includes its own runtime, task scheduler, and async I/O primitives, designed as a drop-in replacement for std with async capabilities and intuitive syntax.\n\nVisit the following resources to learn more:\n\n- [@official@async-std](https://docs.rs/async-std/latest/async_std/)\n- [@article@Rust Async Programming: Tokio & Async-std](https://medium.com/@AlexanderObregon/async-programming-in-rust-exploring-tokio-and-async-std-97d4b524cef0)",
    "asynchronous-programming@yu0f5gALho0e8wzV10yow": "# Asynchronous Programming\n\nAsync programming in Rust allows executing tasks concurrently rather than sequentially, enabling efficient resource usage especially in IO-heavy applications. Rust provides `async` and `await` keywords: `async` marks functions that can return `Future` values, while `await` pauses and resumes async functions. Popular async runtimes like Tokio and async-std manage task execution efficiently.\n\nVisit the following resources to learn more:\n\n- [@official@Fundamentals of Asynchronous Programming](https://doc.rust-lang.org/book/ch17-00-async-await.html)\n- [@official@async-std](https://docs.rs/async-std/latest/async_std/)\n- [@article@Demystifying Async Programming in Rust](https://medium.com/@trek007/demystifying-async-programming-in-rust-a-complete-guide-with-real-world-examples-147079950f8b)\n- [@article@Rust Async Programming: Tokio & Async-std](https://medium.com/@AlexanderObregon/async-programming-in-rust-exploring-tokio-and-async-std-97d4b524cef0)",
    "atomic-operations--memory-barriers@n1Epl_nBuoXW2OE0IKYVR": "# Atomic Operations and Memory Barriers\n\nAtomic operations provide lock-free concurrency through uninterruptible operations like `load`, `store`, `swap`, and `compare_and_swap`. These low-level primitives enable thread-safe data sharing without locks, forming the foundation for higher-level concurrent abstractions and non-blocking data structures.\n\nVisit the following resources to learn more:\n\n- [@official@fence in std::sync::atomic](https://doc.rust-lang.org/std/sync/atomic/fn.fence.html)\n- [@article@Atomic Operations and Memory Barriers](https://medium.com/@murataslan1/atomic-operations-and-memory-barriers-43ee6f60ead5)\n",
    "axum@duQ1RO1lqq793mfb5w31P": "# Axum\n\nAxum is a modern, ergonomic web framework built on hyper and designed for async Rust. It features excellent type safety, powerful extractors, middleware support, and seamless Tokio integration. Axum emphasizes developer experience while maintaining high performance for web services and APIs.\n\nVisit the following resources to learn more:\n\n- [@official@Axum Documentation](https://docs.rs/axum/latest/axum/)\n- [@article@Getting Started with Axum - Rust's Most Popular Web Framework](https://www.shuttle.dev/blog/2023/12/06/using-axum-rust)",
    "bevy@uyrGki0jB7DXQ0HJe2-vY": "# bevy\n\nBevy is a modern, data-driven game engine built in Rust featuring an ECS (Entity Component System) architecture. It supports both 2D and 3D games with modular design, custom shaders, and high performance. Bevy emphasizes developer ergonomics and provides comprehensive tools for game development.\n\nVisit the following resources to learn more:\n\n- [@official@Bevy Engine](https://bevy.org/)\n- [@official@Bevy Documentation](https://docs.rs/bevy/latest/bevy/)\n- [@opensource@bevyengine/bevy](https://github.com/bevyengine/bevy)",
    "binary-heap@jdndHBzmdgI6uYql6bO4W": "# BinaryHeap\n\n`BinaryHeap<T>` is a priority queue implemented as a max-heap using a binary tree structure stored in an array. The largest element is always at the root, accessible via `peek()`. Supports O(log n) insertion with `push()` and removal with `pop()`. Useful for priority-based algorithms.\n\nLearn more from the following links:\n\n- [@official@BinaryHeap](https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html)\n- [@article@The Rust Guide - BinaryHeap](https://rust-guide.com/en/documentation/collections/BinaryHeap)\n- [@article@Comprehensive Guide to BinaryHeap in Rust](https://www.gyata.ai/rust/binaryheap)",
    "boolean@bjwJCGMx5ZfrH7vz3eLS7": "# Boolean\n\nRust's `bool` primitive type represents truth values with two possible states: `true` or `false`. Booleans are used in conditional statements and logical operations like `&&` (AND), `||` (OR), and `!` (NOT). When cast to integers, `true` becomes `1` and `false` becomes `0`. Example: `let is_active: bool = true;`\n\nLearn more from the following links:\n\n- [@official@bool](https://doc.rust-lang.org/std/primitive.bool.html)\n- [@article@The Boolean Type](https://rust-book.cs.brown.edu/ch03-02-data-types.html#the-boolean-type)\n- [@video@Rust Tutorial - Booleans](https://www.youtube.com/watch?v=t047Hseyj_k&t=388s)\n",
    "borrowing-references-and-slices@-onH5vPffdcZFjjVcnEpk": "# Borrowing, References, and Slices\n\nBorrowing allows accessing data without taking ownership. Immutable borrows (`&T`) permit multiple read-only references, while mutable borrows (`&mut T`) allow one exclusive reference that can modify data. Slices (`&[T]`, `&str`) are references to contiguous sequences, enabling safe access to portions of data.\n\nLearn more from the following links:\n\n- [@official@References and Borrowing](https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html)\n- [@article@The Slice Type](https://rust-book.cs.brown.edu/ch04-04-slices.html)\n- [@article@Borrowing and References in Rust](https://codeforgeek.com/borrowing-and-references-in-rust/)",
    "btreemap@LWgaZWTJVWLDes3HzflRh": "# BTreeMap\n\n`BTreeMap<K, V>` stores key-value pairs in a sorted binary tree structure. Keys must implement `Ord` trait and are automatically kept in sorted order. Provides O(log n) operations for insertion, removal, and lookup. Ideal when you need ordered iteration and range queries.\n\nLearn more from the following links:\n\n- [@official@BTreeMap](https://doc.rust-lang.org/std/collections/struct.BTreeMap.html)\n- [@article@BTreeMap](https://cglab.ca/~abeinges/blah/rust-btree-case/)\n",
    "btreeset@FsyLYRQP_rs4qL7IAj9Mo": "# BTreeSet\n\n`BTreeSet<T>` is a sorted set of unique elements implemented using a B-tree. Elements must implement `Ord` trait and are kept in sorted order. Provides O(log n) insertion, removal, and lookup operations. Supports efficient range queries and set operations like union and intersection.\n\nLearn more from the following links:\n\n- [@official@Btree Set](https://doc.rust-lang.org/std/collections/struct.BTreeSet.html)",
    "channels@3nXJg5Y4SUug_dEAj0eQm": "# Channels\n\nChannels enable thread communication via message passing from `std::sync::mpsc` (Multiple Producer, Single Consumer). They have `Sender` for sending data and `Receiver` for receiving. This avoids shared state concurrency issues and enables safe communication between threads without data races.\n\nLearn more from the following links:\n\n- [@official@Channels](https://doc.rust-lang.org/rust-by-example/std_misc/channels.html)\n- [@article@Using Channels in Rust: Why and When?](https://howtorust.com/using-channels-in-rust-why-and-when/)",
    "character@dXMJb2wDmmh2jie1AnPoK": "# Character\n\nRust's `char` type represents a Unicode Scalar Value, supporting far more than ASCII including emojis, accented letters, and various scripts. Each `char` occupies 4 bytes (32 bits) in memory and is defined using single quotes. Example: `let letter: char = 'z';` or `let emoji: char = 'ðŸ¦€';`\n\nLearn more from the following links:\n\n- [@official@The char Primitive Type](https://doc.rust-lang.org/std/primitive.char.html)\n- [@article@The Character Type](https://rust-book.cs.brown.edu/ch03-02-data-types.html#the-character-type)\n- [@article@Unicode Glossary - Unicode Scalar Value](https://www.unicode.org/glossary/#unicode_scalar_value)\n- [@video@Char Type in Rust](https://www.youtube.com/watch?v=NZaEinuVPVg&pp=ygURY2hhciB0eXBlIGluIHJ1c3Q%3D)\n",
    "clap@AId80IokM7NvGBVutmuGC": "# clap\n\n`clap` is Rust's most popular command-line argument parser library. It provides declarative CLI definition with automatic help generation, subcommands, validation, and error handling. Supports both builder pattern and derive macros for easy CLI app development with comprehensive features.\n\nLearn more from the following links:\n\n- [@official@clap](https://docs.rs/clap/latest/clap/)\n- [@article@Using Clap in Rust for command line (CLI) Argument Parsing](https://blog.logrocket.com/using-clap-rust-command-line-argument-parsing/)\n",
    "cli-utilities@2Zyyf9q_CxmOW-z2pipL": "# CLI Utilities\n\nRust excels at building fast, reliable command-line tools with memory safety and performance. Popular crates include `clap` for argument parsing, `structopt` for derives, and `termion` for terminal control. Rust's tooling ecosystem makes CLI development efficient and robust.\n\nLearn more from the following links:\n\n- [@official@structopt](https://docs.rs/structopt/latest/structopt/)\n- [@official@clap](https://docs.rs/clap/latest/clap/)\n- [@official@Command-line Apps](https://www.rust-lang.org/what/cli/)\n- [@article@Rust CLI Utilities - GitHub](https://github.com/baldwin-sudo/rusty-utils)",
    "cli-utilities@2Zyyf9q_CxmOW-z2pipL8": "# CLI Utilities\n\nCLI utilities are command-line tools that allow users to interact with their system through text commands. Rust is excellent for building fast, reliable CLI tools due to its memory safety and performance. Popular crates like clap and structopt help parse command-line arguments, handle input validation, and generate help messages, making CLI development efficient.\n\nLearn more from the following links:\n\n- [@official@structopt](https://docs.rs/structopt/latest/structopt/)\n- [@official@clap](https://docs.rs/clap/latest/clap/)\n- [@official@Command-line Apps](https://www.rust-lang.org/what/cli/)\n- [@article@Rust CLI Utilities - GitHub](https://github.com/baldwin-sudo/rusty-utils)",
    "code-organization--namespacing@c_SdccEXEJyh4ymWzvCeX": "# Code Organization and Namespacing\n\nRust organizes code through modules (`mod`) for grouping related functionality and crates (binary/library projects). Modules provide namespacing and can be nested. Crates are compilation units with a root file (`main.rs` or `lib.rs`) forming the module tree for libraries or executables.\n\nVisit the following resources to learn more:\n\n- [@official@Modules](https://doc.rust-lang.org/rust-by-example/mod.html)\n- [@official@Namespaces](https://doc.rust-lang.org/reference/names/namespaces.html)\n- [@feed@Explore top posts about General Programming](https://app.daily.dev/tags/general-programming?ref=roadmapsh)\n",
    "concurrency--parallelism@pehYc_xLrs6BFUbcpPTiJ": "# Concurrency and Parallelism\n\nConcurrency allows tasks to run in overlapping time periods (interleaved execution), while parallelism executes multiple tasks simultaneously on different cores. Rust provides safe concurrency primitives like channels, mutexes, and atomic operations without data races, enforced at compile time.\n\nVisit the following resources to learn more:\n\n- [@official@Fearless Concurrency](https://doc.rust-lang.org/book/ch16-00-concurrency.html)\n- [@article@Rust Concurrency and Parallelism](https://rustlang.app/article/Rust_concurrency_and_parallelism.html)\n- [@article@Concurrency and Parallelism in Rust](https://sterlingcobb.medium.com/concurrency-and-parallelism-in-rust-an-overview-and-examples-bd811f5a5afe)\n",
    "control-flow-and-constructs@u2wlnmE1uLaTqWw35UF0a": "# Control Flow Constructs\n\nIn Rust, control flow is managed through various structures, like `if`, `else`, `while`, `for`, `loop`, `match` and `if let`. The `if` and `else` structures are used to execute different blocks of code based on certain conditions. Similar to other languages, `while` and `for` are used for looping over a block of code. The `while` loop repeats a block of code until the condition is false, and the `for` loop is used to iterate over a collection of values, such as an array or a range. The `loop` keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop. Rust's `match` structure, which is similar to switch statements in other languages, is a powerful tool used for pattern matching: it checks through different cases defined by the programmer and executes the block where the match is found. The `if let` syntax lets you combine `if` and `let` into a less verbose way to handle values that match one pattern while ignoring the rest.\n\nLearn more from the following links:\n\n- [@official@Control Flow](https://doc.rust-lang.org/book/ch03-05-control-flow.html)\n- [@article@Concise Control Flow with `if let`](https://rust-book.cs.brown.edu/ch06-03-if-let.html)\n- [@article@Mastering Control Flow in Rust](https://dev.to/iamdipankarpaul/mastering-control-flow-in-rust-36fd)",
    "covariant--contravariant-lifetimes@7yVvMnvCvLbFa51pESx0j": "# Covariant and Contravariant Lifetimes\n\nVariance describes how subtyping relationships change when types are nested. Covariant types preserve ordering (`&'long T` is subtype of `&'short T`), contravariant reverses it, invariant requires exact matches. Affects how lifetimes work with references, boxes, and function parameters.\n\nLearn more from the following links:\n\n- [@official@Subtyping and Variance](https://doc.rust-lang.org/nomicon/subtyping.html)\n- [@article@Demystifying Covariant and Contravariant Lifetimes in Rust](https://medium.com/@murataslan1/demystifying-covariant-and-contravariant-lifetimes-in-rust-76051484fe1c)\n",
    "criterionrs@clQ26LFV_9AdQ4evnaxUK": "# Criterion.rs\n\n`Criterion.rs` is a statistics-driven microbenchmarking library for Rust that provides reliable performance analysis over time. It offers detailed feedback, automatic outlier detection, and statistical methods to compare algorithm performance and track regressions with actionable insights.\n\nLearn more from the following links:\n\n- [@official@Criterion](https://docs.rs/criterion/latest/criterion/)\n- [@article@Rust Benchmarking with Criterion.rs](https://www.rustfinity.com/blog/rust-benchmarking-with-criterion)\n- [@article@Benchmarking Rust Functions Using Criterion](https://www.slingacademy.com/article/benchmarking-rust-functions-using-criterion/)",
    "cryptography@Rv_Z-rbtELPZ1Nv0PZQmV": "# Cryptography\n\nCryptography involves securing data through encryption (making readable data unreadable) and decryption (reversing the process). Rust offers crypto libraries like `ring`, `sodiumoxide`, and `rust-crypto` for hashing, symmetric/asymmetric encryption, and digital signatures with memory-safe implementations.\n\nLearn more from the following links:\n\n- [@official@Cryptography â€” list of Rust libraries/crates](https://lib.rs/cryptography)\n- [@article@Awesome Rust Cryptography](https://cryptography.rs/)\n",
    "custom-error-types-and-traits@LwqOxYY9E9MUDgz2M40uV": "# Custom Error Types and Traits\n\nCustom error types use `enum` to define specific error variants with attached data. Implement `Debug`, `Display`, and optionally `std::error::Error` traits for proper error handling integration. Libraries like `thiserror` provide derive macros to simplify custom error creation and formatting.\n\nVisit the following resources to learn more:\n\n- [@official@Defining an Error Type](https://doc.rust-lang.org/rust-by-example/error/multiple_error_types/define_error_type.html)\n",
    "database-and-orm@_n7emeqzf5UTxVB5-385G": "# Database and ORM\n\nORMs (Object-Relational Mapping) provide abstraction layers between Rust code and SQL databases. Popular Rust ORMs include Diesel (compile-time safety), SQLx (async with compile-time query checking), and Sea-ORM. They eliminate raw SQL writing while maintaining type safety and performance.\n\nVisit the following resources to learn more:\n\n- [@official@Diesel is a Safe, Extensible ORM and Query Builder for Rust](https://diesel.rs/)\n- [@article@Choosing the Right ORM for Rust: A Comparative Analysis](https://medium.com/@wiederinchristoph/rusts-ecosystem-offers-a-variety-of-object-relational-mapping-orm-libraries-and-database-ce4690a97a61)\n",
    "debugging@7YKWYxogJq6X35IAUwcZF": "# Debugging\n\nRust provides excellent debugging support through `rust-gdb` and `rust-lldb` debuggers, along with built-in macros like `println!`, `dbg!`, and `debug!`. The strict compiler catches many bugs at compile-time, while runtime debugging is enhanced by panic backtraces and comprehensive error messages.\n\nVisit the following resources to learn more:\n\n- [@article@Debugging Rust apps with GDB](https://blog.logrocket.com/debugging-rust-apps-with-gdb/)\n- [@article@Rust Debugging: Easy Guide with Practical Examples](https://boxoflearn.com/rust-debugging-guide/)\n- [@article@Testing and Debugging in Rust](https://rustmeup.com/testing-and-debugging-in-rust)\n- [@article@Mastering Rust Debugging: Tips & Tools](https://medium.com/@AlexanderObregon/rust-debugging-strategies-tools-and-best-practices-b18b92e0a921)\n",
    "declarative-macros-with-macro_rules@AXWXXsww7Xkl3BYgtThNe": "# Declarative Macros with macro_rules!\n\nDeclarative macros use `macro_rules!` for pattern-based code generation at compile time. They match syntax patterns and expand into replacement code, enabling code reuse without runtime overhead. More limited than procedural macros but simpler to write and understand.\n\nVisit the following resources to learn more:\n\n- [@official@Macros](https://doc.rust-lang.org/book/ch20-05-macros.html)\n- [@article@Macros in Rust: A Tutorial with Examples](https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/)\n",
    "deep-dive-stack-vs-heap@UdXq0H8599cDTKXaIlPqt": "# Deep Dive: Stack vs Heap\n\nStack memory stores fixed-size data with automatic allocation/deallocation following LIFO order - fast but limited. Heap memory stores dynamic-size data with manual management - slower but flexible. Rust's ownership system ensures memory safety across both, with stack being default and heap accessed via smart pointers.\n\nLearn more from the following resources:\n\n- [@official@Box, Stack and Heap](https://doc.rust-lang.org/rust-by-example/std/box.html)\n- [@article@Memory Management in Rust: Stack vs. Heap](https://dev.to/iamdipankarpaul/memory-management-in-rust-stack-vs-heap-3m45)\n- [@article@The Stack and the Heap](https://web.mit.edu/rust-lang_v1.25/arch/amd64_ubuntu1404/share/doc/rust/html/book/first-edition/the-stack-and-the-heap.html)\n",
    "dependency-management-with-cargo@PkePVzV-b1pgFJP5xID5_": "# Dependency Management with Cargo.toml\n\nCargo manages Rust projects and dependencies through `Cargo.toml` files. Dependencies are listed in `[dependencies]` sections with crate names and semantic version specifications. Cargo automatically downloads, builds, and manages external libraries (crates) from crates.io or other sources.\n\nVisit the following resources to learn more:\n\n- [@official@Dependencies](https://doc.rust-lang.org/rust-by-example/cargo/deps.html)\n- [@official@Cargo](https://blog.rust-lang.org/2016/05/05/cargo-pillars.html)\n",
    "diesel@UAXpBK3lfnq0Q4RcBehZ1": "# Diesel\n\nDiesel is a safe, extensible ORM and query builder for Rust that provides compile-time guarantees against SQL injection and type mismatches. It supports PostgreSQL, MySQL, and SQLite with high-level APIs for database operations while maintaining excellent performance and type safety.\n\nVisit the following resources to learn more:\n\n- [@official@Diesel](https://diesel.rs/)\n- [@opensource@Repository](https://github.com/diesel-rs/diesel)\n- [@offiial@Docs.rs: Diesel](https://docs.rs/diesel/latest/diesel/)\n- [@video@Rust & SQL Databases (With Diesel)](https://www.youtube.com/watch?v=tRC4EIKhMzw)\n",
    "documenting-with-rustdoc@65nbahPj9qAb9y8dF8Jnd": "# Documenting with rustdoc\n\nRustDoc is an invaluable tool within the Rust ecosystem for generating comprehensive and user-friendly documentation directly from your source code. By leveraging special documentation comments (starting with `///` for regular comments and `//!` for crate-level comments), developers can embed Markdown-formatted text, code examples, and even doctests directly alongside their functions, modules, and types. RustDoc then processes these comments to produce static HTML pages, making it easy for others (and your future self) to understand how to use your libraries and applications. This integrated approach not only promotes good documentation habits but also ensures that the documentation remains in sync with the codebase.\n\nVisit the following resources to learn more:\n\n- [@official@How to Write Documentation](https://doc.rust-lang.org/rustdoc/how-to-write-documentation.html)\n- [@article@Writing Rust Documentation](https://dev.to/gritmax/writing-rust-documentation-5hn5)",
    "domain-specific-languages-dsls@Kb7KF7JCMaWFz-GuaQmQV": "# Domain-Specific Languages (DSLs)\n\nDSLs are specialized programming languages for specific domains. Rust macros enable creating DSLs by manipulating syntax trees and defining custom syntax patterns. This allows extending Rust's language capabilities for specialized applications like game development, configuration, or domain-specific tasks.\n\nVisit the following resources to learn more:\n\n- [@official@Domain Specific Languages (DSLs)](https://doc.rust-lang.org/rust-by-example/macros/dsl.html)\n- [@article@Crafting Expressive Tools: Domain-Specific Languages (DSLs)](https://medium.com/@murataslan1/crafting-expressive-tools-domain-specific-languages-dsls-in-rust-94394debe12b)",
    "embedded-and-systems@RKXljexmLAceMYwg4D_uP": "# Embedded and Systems\n\nRust excels in embedded systems programming for microcontrollers and real-time applications. Its zero-cost abstractions, memory safety, and low-level control make it ideal for resource-constrained environments. Popular for IoT devices, firmware, and system-level programming without garbage collection overhead.\n\nVisit the following resources to learn more:\n\n- [@official@Embedded Devices](https://www.rust-lang.org/what/embedded)\n- [@article@Rust for Embedded Systems](https://medium.com/@enravishjeni411/rust-for-embedded-systems-a-beginner-friendly-guide-e8c171cfb359)\n- [@article@Rust Embedded Systems: Beginner's Guide with Example](https://boxoflearn.com/rust-embedded-systems-guide/)",
    "embedded-hal@LzaO2cpDajXERqEYDjMl_": "# embedded-hal\n\n`embedded-hal` (Hardware Abstraction Layer) provides generic traits for creating portable embedded drivers in Rust. Enables hardware-agnostic code by abstracting digital I/O, UART, I2C, SPI, and other communication protocols into a uniform API, promoting code reuse across different hardware platforms.\n\nVisit the following resources to learn more:\n\n- [@official@HALs - The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/design-patterns/hal/index.html)\n- [@opensource@A Hardware Abstraction Layer (HAL) for Embedded Systems](https://github.com/rust-embedded/embedded-hal)\n",
    "enums@FswpjWqqt8-BzUTsDDjel": "# Enums\n\nAn enum, short for enumeration, is a custom data type that allows you to define a type by enumerating (listing out one-by-one) all of its possible variants. In Rust, if something is one of a given set of possibilities (e.g., `Rock` or `Paper` or `Scissors`), it's probably appropriate to represent that data with an enum, like so: `enum RpsChoice { Rock, Paper, Scissors }`.\n\nAn instance of an `enum` can be one and only one of the enum's declared variants at any given time. Unlike enumerations in some other languages, variants in Rust are not restricted to a singular data type. When you define an `enum`, you can decide for each of its possible variants whether or not that variant will hold additional embedded data; each variant of the enum is also allowed to hold data of completely different types and amounts.\n\nLearn more from the following resources:\n\n- [@official@Defining an Enum](https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html)\n- [@article@Understanding and Implementing Enums in Rust](https://towardsdev.com/understanding-and-implementing-enums-in-rust-6eae37b6b5e3)",
    "error-handling@X2gB0m-ZKSC4TJyIcwsMx": "# Error Handling\n\nRust handles errors through `Result<T, E>` for operations that may fail and `Option<T>` for values that may be absent. `Result` has `Ok(T)` for success and `Err(E)` for errors, while `Option` has `Some(T)` and `None`. Pattern matching and the `?` operator enable elegant error handling and propagation. Rust doesn't use exceptions, eliminating many common error-handling problems.\n\nLearn more from the following resources:\n\n- [@official@Error Handling](https://doc.rust-lang.org/book/ch09-00-error-handling.html)\n- [@article@How to Handle Errors in Rust](https://dev.to/nathan20/how-to-handle-errors-in-rust-a-comprehensive-guide-1cco)",
    "explicit-lifetime-annotations@R5HIVS-lyCp9b46aXqx2m": "# Explicit Lifetime Annotations\n\nExplicit lifetime annotations use syntax like `'a` to specify relationships between reference lifetimes in function signatures. Required when the compiler can't infer lifetimes automatically. Example: `fn longest<'a>(x: &'a str, y: &'a str) -> &'a str` ensures all references live equally long.\n\nLearn more from the following resources:\n\n- [@official@Explicit Annotation](https://doc.rust-lang.org/rust-by-example/scope/lifetime/explicit.html)\n- [@article@What are Lifetimes in Rust? Explained with Code Examples](https://www.freecodecamp.org/news/what-are-lifetimes-in-rust-explained-with-code-examples/)",
    "floats@rNHHp1GgmRnKIYlZayi59": "# Floats\n\nIn Rust, `floats` are a primitive data types used to represent floating-point numbers. They are defined as numerical values with fractional components. Floating-point numbers are represented according to the IEEE-754 standard.\n\nRust supports two types of floating-point numbers: `f32` and `f64`. These are 32-bit and 64-bit in size, respectively.\n\n- `f32` (_binary32_ type defined in IEEE-754-2008) is a single-precision float, which means is less precise than `f64` type.\n- `f64` (_binary64_ type defined in IEEE-754-2008) has double precision. The default type is `f64` because on modern CPUs itâ€™s roughly the same speed as `f32` but allows more precision.\n\nBoth `f32` and `f64` represent negative, zero and positive floating-point values.\n\nVisit the following resources to learn more:\n\n- [@official@f32](https://doc.rust-lang.org/std/primitive.f32.html)\n- [@article@IEEE-754 Standard](https://en.wikipedia.org/wiki/IEEE_754)\n- [@article@Floating-Point Types](https://rust-book.cs.brown.edu/ch03-02-data-types.html#floating-point-types)\n- [@video@Rust Tutorial - Floating-Points](https://www.youtube.com/watch?v=t047Hseyj_k&t=335s)\n",
    "functions-and-method-syntax@5hKJaMKpeFEUi3S1Hpiyk": "# Functions and Method Syntax\n\nIn Rust, functions are declared using the `fn` keyword. Each function can take a set of input variables with their specified types, and may return data of a specified type. The body of a function is contained within curly braces `{}`. Unlike other languages, in Rust, you don't need to end the last statement in a block with a semicolon; omitting the last semicolon of a block in this way turns the last statement into an expression, and the result of this expression becomes the implicit return value of the block.\n\nVisit the following resources to learn more:\n\n- [@official@Functions](https://doc.rust-lang.org/book/ch03-03-how-functions-work.html)\n- [@article@Rust Functions Explained with Examples](https://boxoflearn.com/rust-functions-complete-guide/)",
    "futures-and-asyncawait-paradigm@kVfBbsOHoixvqb4dYTG3Q": "# Futures and Async/Await Paradigm\n\nFutures represent asynchronous computations that produce values or errors eventually. The `async/await` syntax provides ergonomic programming over futures, allowing asynchronous code to look synchronous. Futures are lazy and must be polled to make progress, forming the foundation of Rust's async ecosystem.\n\nVisit the following resources to learn more:\n\n- [@official@Fundamentals of Asynchronous Programming](https://doc.rust-lang.org/book/ch17-00-async-await.html)\n- [@article@Async/Await in Rust: A Beginner's Guide](https://leapcell.medium.com/async-await-in-rust-a-beginners-guide-8752d2c2abbf)",
    "fyrox@x9bmK_cLYpX0ebwjZUn4R": "# Fyrox\n\nFyrox is a modern, highly optimized 3D game engine designed specifically for Rust. Leverages Rust's safety and concurrency for high performance and reliability. Features advanced lighting, shadowing, support for common 3D formats, and low-level hardware control for performance-critical applications.\n\nVisit the following resources to learn more:\n\n- [@official@Fyrox - A feature-rich game engine built in Rust](https://fyrox.rs/)\n- [@opensource@FyroxEngine/Fyrox: 3D and 2D game engine written in Rust](https://github.com/FyroxEngine/Fyrox)\n- [@article@Game Development with Fyrox and Rust](https://bocksdincoding.com/blog/game-development-with-fyrox-and-rust-pt-1)",
    "game-development@uG-EmZVZ-jc3mswOT4-7l": "# Game Development\n\nRust's performance and memory safety make it excellent for game development. Popular engines and frameworks include Bevy (ECS-based), Macroquad, ggez, and Fyrox. Rust handles both 2D and 3D games efficiently, with growing ecosystem support for graphics, audio, and physics.\n\nVisit the following resources to learn more:\n\n- [@official@Fyrox - A feature-rich game engine built in Rust](https://fyrox.rs/)\n- [@article@5 Rust Game Engines to Consider for your Next Project](https://blog.logrocket.com/5-rust-game-engines-consider-next-project/)\n- [@article@Game Development with Fyrox and Rust](https://bocksdincoding.com/blog/game-development-with-fyrox-and-rust-pt-1)",
    "generics--type-level-programming@_hxwo_iAdOwlWBltv7i6i": "# Advanced Generics and Type-level Programming\n\nAdvanced generics in Rust include `where` clauses for complex bounds, `?Sized` for unsized types, associated types, and higher-kinded types. These enable sophisticated type-level programming, allowing precise control over generic constraints and enabling powerful abstractions while maintaining zero-cost performance.\n\nVisit the following resources to learn more:\n\n- [@official@Generic Types, Traits, and Lifetimes](https://doc.rust-lang.org/book/ch10-00-generics.html)\n- [@official@Generics](https://doc.rust-lang.org/rust-by-example/generics.html)\n- [@official@Generics Data Type](https://doc.rust-lang.org/book/ch10-01-syntax.html)\n",
    "ggez@qquYnrrzUlyd8738jzj1D": "# ggez\n\n`ggez` is a lightweight 2D game framework for Rust inspired by Love2D. Provides facilities for graphics rendering, input handling, audio manipulation, and game timing with an easy, Rusty interface. Enables developers to focus on game logic without worrying about low-level implementation details.\n\nVisit the following resources to learn more:\n\n- [@official@ggez: Rust Game Thing](https://ggez.rs/)\n- [@article@2D Game Renderer in Rust](https://dev.to/trish_07/2d-game-renderer-in-rust-lets-make-a-mini-rpg-a9h)\n",
    "gtk-rs@2Zp3m3Y7j6R1hK3DIVdkH": "# gtk-rs\n\n`gtk-rs` provides Rust bindings for GTK+3 and related libraries (GObject, Glib, Cairo, Pango) enabling cross-platform GUI application development. These open-source libraries offer a Rust-friendly interface for GTK components, allowing developers to create graphical applications using Rust with native GTK functionality.\n\nVisit the following resources to learn more:\n\n- [@official@Unlocking the GNOME stack for Rust](https://gtk-rs.org/)\n- [@opensource@gtk-rs/gtk4-rs: Rust Bindings of GTK 4](https://github.com/gtk-rs/gtk4-rs)\n",
    "gui-development@T1LlJz5m5wnwBvKAEuGnP": "# GUI Development\n\nRust offers several GUI frameworks for desktop applications including Tauri (web-based), Iced (inspired by Elm), Druid, GTK-rs, and Egui. These provide cross-platform support for creating native desktop applications with modern UI patterns and performance benefits of Rust.\n\nVisit the following resources to learn more:\n\n- [@article@Rust and GUI Development - Comprehensive Guide](https://rustmeup.com/rust-and-gui-development)\n- [@article@The state of Rust GUI libraries](https://blog.logrocket.com/state-rust-gui-libraries/)\n- [@article@Building Beautiful and Intuitive GUIs with Rust and egui](https://triophore.com/blogs/content/rust-egui-gui-development/)",
    "hashmap@JAgjrf5WDXiorZ6gFRzTc": "# Hashmap\n\n`HashMap<K, V>` stores key-value pairs using hashing for fast lookups, insertions, and removals. Keys must be unique; duplicate keys replace old values. Rust uses cryptographically strong hashing for security. Items are unordered. Example: `HashMap::new()` or `HashMap::from([(\"key\", \"value\")])`.\n\nLearn more from the following links:\n\n- [@official@HashMap in std::collections](https://doc.rust-lang.org/std/collections/struct.HashMap.html)\n- [@official@Storing Keys With Associated Values In Hash Maps](https://doc.rust-lang.org/book/ch08-03-hash-maps.html?highlight=hashmap#storing-keys-with-associated-values-in-hash-maps)\n- [@article@Hash Table](https://en.wikipedia.org/wiki/Hash_table)\n- [@video@HashMaps: key-value stores in Rust](https://www.youtube.com/watch?v=BfmSYuDdg8Q)\n",
    "hashset@b1iYy4Hvkj47Q13V2HE4i": "# Hashset\n\n`HashSet<T>` is a collection of unique elements using hash-based storage for fast lookups, insertions, and deletions. No duplicates are allowed and elements are unordered. Provides methods like `insert()`, `contains()`, and `remove()`. Example: `let mut set = HashSet::new(); set.insert(\"value\");`\n\nLearn more from the following links:\n\n- [@official@HashSet in std::collections](https://doc.rust-lang.org/std/collections/struct.HashSet.html)\n- [@official@Hashset](https://doc.rust-lang.org/rust-by-example/std/hash/hashset.html)\n- [@video@Rust HashSet Collection Type](https://www.youtube.com/watch?v=KYw3Lnf0nSY&t=1440s)\n",
    "hyper@-MiN5ytI43EjgmWV55BhU": "# hyper\n\nHyper is a fast, safe HTTP client/server library for Rust built on Tokio for async I/O. It supports HTTP/1 and HTTP/2 with automatic protocol negotiation. Hyper provides low-level HTTP primitives that power many higher-level web frameworks and serves as the foundation for efficient network programming.\n\nVisit the following resources to learn more:\n\n- [@official@Hyper.rs](https://hyper.rs/)\n- [@article@Hyper Documentation](https://docs.rs/hyper/latest/hyper/)\n- [@article@Creating a Basic HTTP Server in Rust using Hyper](https://medium.com/@ajay.bhatia/creating-a-basic-http-server-in-rust-using-hyper-a-step-by-step-tutorial-459b48d61151)",
    "ides-and-rust-toolchains@oyP1ZyOgDC4nYEQXHwdVQ": "# IDEs and Rust Toolchains\n\nFor the Rust Programming Language, several Integrated Development Environments (IDEs) and editors provide great support. Visual Studio Code is highly preferred among Rust developers due to its support for Rust via the \"Rust Language Server\" or \"rust-analyzer\" plugins. Another popular choice is RustRover, a dedicated IDE for Rust development by JetBrains. Additionally, Sublime Text with respective Rust-enhancement plugins are also used. For a more terminal-centric approach, Vim and Emacs are equipped with Rust modes. These IDEs and editors offer various features like auto-completion, syntax highlighting, and debugging tools which prove useful for Rust programming.\n\nVisit the following resources to learn more:\n\n- [@official@Visual Studio Code](https://code.visualstudio.com)\n- [@official@RustRover](https://www.jetbrains.com/rust/)\n- [@official@Vim](https://www.vim.org)\n- [@official@Emacs](https://www.gnu.org/software/emacs/)\n- [@official@Sublime Text](https://www.sublimetext.com)\n",
    "impl-blocks@HzWHDQZjA9OgVZEWrmhKf": "# Impl Blocks\n\nImpl blocks use the `impl` keyword, and are used to **implement** behavior in the form of **methods** for a `struct`, `enum`, or `trait`. If you want your data type or trait to have methods, you need a corresponding `impl` block containing functions for the type or trait.\n\nNote that `self` and `Self` have different meanings in the context of an `impl` block's functions. `self` represents the specific value in your program that's calling the method and passing itself as an argument, while `Self` is syntax sugar for the `impl` block's data type, which is commonly used in constructor methods that return a new instance of the type.\n\nVisit the following resources to learn more:\n\n- [@official@Keyword impl](https://doc.rust-lang.org/std/keyword.impl.html)\n- [@article@Method Syntax](https://rust-book.cs.brown.edu/ch05-03-method-syntax.html)\n- [@article@Rust: Understanding Structs and impl Blocks with 10 Examples](https://medium.com/@TechSavvyScribe/rust-understanding-structs-and-impl-blocks-with-10-examples-20371f90b1ed)",
    "installing-rust-and-cargo@-IqA02ObYvXPW1ot6t_b9": "# Installing Rust and Cargo\n\nTo install Rust, navigate to the rust official website and download the appropriate installation file (or run the appropriate terminal command) for your operating system. You'll be installing `rustup`, which is the preferred tool for installing, updating, and managing your core Rust tooling. For UNIX systems like Linux and MacOS, installation is as easy as running a single command in the terminal. For Windows, you'll be provided with an '.exe' installer which you need to execute. Further instructions can be found on the download page of the website.\n\nVisit the following resources to learn more:\n\n- [@official@Rust Programming Language](https://www.rust-lang.org)\n- [@official@Install Rust](https://www.rust-lang.org/tools/install)\n- [@official@Installation - The Rust Programming Language](https://doc.rust-lang.org/book/ch01-01-installation.html)\n",
    "integers@FHZSxSiOZYNBEz6tu8wuF": "# Integers\n\nIn Rust, integers are a primitive data type that hold whole number values, both positive and negative. Integer types in Rust can be divided into signed and unsigned ones:\n\n- Signed integers, denoted by \"i\", are those that can hold negative, zero, and positive values.\n- Unsigned integers, denoted by \"u\", only hold zero and positive values.\n\nVisit the following resources to learn more:\n\n- [@official@Integer Data Type in Rust](https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-types)\n- [@official@Machine-dependent Integer Types](https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types)\n- [@article@Rust Data Types (With Examples)](https://www.programiz.com/rust/data-types#integer-type)\n- [@article@Integer Types](https://rust-book.cs.brown.edu/ch03-02-data-types.html#integer-types)\n",
    "introduction@4U-HZQGH7kaWCB94Xy8Mh": "# Introduction\n\nRust is a modern system programming language focused on performance, safety, and concurrency. It accomplishes these goals without having a garbage collector, making it a useful language for a number of use cases other languages arenâ€™t good at. Its syntax is similar to C++, but Rust offers better memory safety while maintaining high performance.\n\nVisit the following resources to learn more:\n\n- [@official@Rust Programming Language](https://www.rust-lang.org/)\n- [@official@Rust by Example](https://doc.rust-lang.org/stable/rust-by-example/index.html)\n- [@opensource@Rust Book](https://edu.anarcho-copy.org/Programming%20Languages/Rust/rust-programming-language-steve-klabnik.pdf)\n- [@opensource@Rust Book Interactive](https://rust-book.cs.brown.edu/experiment-intro.html)\n",
    "json-rust@ZXMKY0f7mqqlsvyH9u-LM": "# json-rust\n\nJSON handling in Rust primarily uses `serde` and `serde_json` libraries for high-performance serialization/deserialization. These provide seamless conversion between Rust data structures and JSON, with parsing from strings/files, serialization to JSON, and direct manipulation of JSON values.\n\nVisit the following resources to learn more:\n\n- [@official@Serde](https://serde.rs/)\n- [@article@Docs.rs: JSON](https://docs.rs/json/latest/json/)\n- [@opensource@serde-rs/serde: Serialization framework for Rust](https://github.com/serde-rs/serde)\n- [@feed@Explore top posts about Rust](https://app.daily.dev/tags/rust?ref=roadmapsh)",
    "language-basics@6E4pGifNfSAq6SbzfzFNT": "# Language Basics\n\nRust language basics cover fundamental programming concepts including syntax and semantics, variables and data types, control flow (loops and conditionals), and functions. These elements form the foundation for writing effective Rust code and understanding how to structure and reuse code segments.\n\nVisit the following resources to learn more:\n\n- [@official@Introduction - Rust By Example](https://doc.rust-lang.org/stable/rust-by-example/)\n- [@article@How to Learn Rust in 2025: A Complete Beginner's Guide](https://blog.jetbrains.com/rust/2024/09/20/how-to-learn-rust/)\n- [@feed@Explore top posts about Rust](https://app.daily.dev/tags/rust?ref=roadmapsh)",
    "leptos@n5t3MUqmvrcr36VIIOw0u": "# Leptos\n\nLeptos is a rust based web framework that lets you build reactive UIs with Rust and WebAssembly. It supports SSR and CSR, fine-grained reactivity, and a rich ecosystem of libraries and tools. Leptos lets you build web applications with client-side rendering, server-side rendering, or hydration.\n\nVisit the following resources to learn more:\n\n- [@official@Home - Leptos](https://www.leptos.dev/)\n- [@official@Introduction - Leptos Documentation](https://book.leptos.dev/)\n- [@opensource@leptos-rs/leptos: Build fast web applications with Rust](https://github.com/leptos-rs/leptos)\n",
    "lifetime-elision-rules@qJI8GObmsxyc_tTtUEOAd": "# Lifetime Elision Rules\n\nLifetime elision allows the compiler to infer lifetimes in common patterns, reducing explicit annotations. Rules: each reference parameter gets its own lifetime, single input lifetime applies to all outputs, methods with `&self` propagate its lifetime to outputs. Simplifies code while maintaining safety.\n\nVisit the following resources to learn more:\n\n- [@official@Lifetime Elision](https://doc.rust-lang.org/reference/lifetime-elision.html)\n- [@article@Understanding Lifetime Elision in Rust](https://masteringbackend.com/posts/understanding-lifetime-elision-in-rust)\n",
    "lifetimes--borrow-checker@UZ56NKloehcxUFNuSeO19": "# Lifetimes and Borrow Checker\n\nLifetimes define how long references remain valid, preventing dangling references and memory safety issues. The borrow checker enforces these rules at compile time. Lifetime annotations use syntax like `'a` to specify relationships between references in function signatures when the compiler can't infer them automatically.\n\nVisit the following resources to learn more:\n\n- [@official@Lifetimes](https://doc.rust-lang.org/rust-by-example/scope/lifetime.html)\n- [@article@Mastering Lifetimes in Rust: Memory Safety and Borrow Checking](https://leapcell.medium.com/mastering-lifetimes-in-rust-memory-safety-and-borrow-checking-4a8c082a54ee)\n- [@video@Crust of Rust: Lifetime Annotations](https://youtu.be/rAl-9HwD858)\n",
    "linkedlist@iR0ewc2yURqS7bfMWfoBi": "# LinkedList\n\n`LinkedList<T>` is a doubly-linked list where each node contains a value and pointers to both next and previous nodes. Provides O(1) insertion/removal at both ends but O(n) indexing. Generally slower than `Vec` and rarely needed; `VecDeque` is usually preferred for queue operations.\n\nVisit the following resources to learn more:\n\n- [@official@LinkedList in std::collections](https://doc.rust-lang.org/std/collections/struct.LinkedList.html)\n- [@article@Too Many Linked Lists](https://rust-unofficial.github.io/too-many-lists/)\n",
    "loco@GnSBtZoN9mAehRf5Eczng": "# Loco\n\nLoco is a web framework for Rust that is inspired by Ruby on Rails, designed to help developers build MVC-style applications easily. It emphasizes simplicity, rapid development, and integrates features like ORM, background jobs, and templating engines for a productive coding experience.\n\nVisit the following resources to learn more:\n\n- [@official@Loco.rs - Productivity-first Rust Fullstack Web Framework](https://loco.rs/)\n- [@official@The Loco Guide - Loco.rs](https://loco.rs/docs/getting-started/guide/)\n- [@article@Getting Started with Loco in Rust](https://www.shuttle.dev/blog/2023/12/28/using-loco-rust-rails)",
    "macroquad@EtKhe3lgK3NoiBOjXRb2O": "# macroquad\n\nMacroquad is a simple, cross-platform 2D game engine for Rust focusing on rapid prototyping and development. Features efficient rendering via miniquad, input handling, coroutine-based async programming, and sound support. Portable across Windows, macOS, Linux, WebAssembly, Android, and iOS.\n\nVisit the following resources to learn more:\n\n- [@official@Macroquad](https://macroquad.rs/)\n- [@official@Macroquad Documentation](https://macroquad.rs/docs/)\n- [@article@Rust: Create A Clicker Game With Macroquad](https://dev.to/flavius_the_0th/rust-create-a-clicker-game-with-macroquad-1820)",
    "macros--metaprogramming@eTpZXd8E2jVBmk_aSLZYV": "# Macros and Metaprogramming\n\nMacros are code that writes code, enabling metaprogramming in Rust. Declarative macros use `macro_rules!` for pattern-based code generation, while procedural macros provide custom derives and function-like macros. They're expanded at compile time, offering zero-cost abstractions.\n\nVisit the following resources to learn more:\n\n- [@official@Macros](https://doc.rust-lang.org/book/ch20-05-macros.html)\n- [@official@macro_rules\\!](https://doc.rust-lang.org/rust-by-example/macros.html)\n- [@article@Macros in Rust: A Tutorial with Examples](https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/)\n- [@article@Metaprogramming Magic in Rust: The Complete Guide](https://elitedev.in/rust/metaprogramming-magic-in-rust-the-complete-guide-/)",
    "mocking--property-based-testing@HEqfA6An6ZeT3z4R610en": "# Mocking and Property-based Testing\n\nMocking creates fake functions/objects for testing different scenarios. Rust uses external libraries like `mockito`, `mockall`, and `mockall_double` for mocking capabilities. Property-based testing generates test cases automatically to verify code behavior across a wide range of inputs.\n\nVisit the following resources to learn more:\n\n- [@article@Docs.rs: mockito](https://docs.rs/mockito/latest/mockito/)\n- [@article@Docs.rs: mockall](https://docs.rs/mockall/latest/mockall/)\n- [@article@Docs.rs: mockall\\_double](https://docs.rs/mockall_double/latest/mockall_double/)\n- [@article@Mocking in Rust: Mockall and alternatives](https://blog.logrocket.com/mocking-rust-mockall-alternatives/)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)",
    "modules--crates@Zpowr_NGd-E2DC3g-oW9h": "# Modules and Crates\n\nModules provide namespacing and encapsulation within a crate, organizing code with `mod` keyword and controlling visibility with `pub`. Crates are compilation units (binaries or libraries) that can depend on other crates. The module system organizes code within crates, while crates enable sharing functionality between projects.\n\nVisit the following resources to learn more:\n\n- [@official@Crates](https://doc.rust-lang.org/rust-by-example/crates.html)\n- [@official@Managing Growing Projects with Packages, Crates, and Modules](https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html)\n- [@article@How It Works: Rust's Module System Finally Explained](https://confidence.sh/blog/rust-module-system-explained/)",
    "mutex@GbbeV3r27IBEKHyiyLqs6": "# Mutex\n\n`Mutex<T>` (Mutual Exclusion) protects shared data from concurrent access by multiple threads. Only one thread can access the protected data at a time through `lock()`. Rust automatically unlocks mutexes when they go out of scope and handles panics to prevent deadlocks.\n\nVisit the following resources to learn more:\n\n- [@official@Mutex](https://doc.rust-lang.org/std/sync/struct.Mutex.html)\n- [@article@Rust Mutex: From Basics to Advanced Techniques](https://medium.com/@TechSavvyScribe/rust-mutex-from-basics-to-advanced-techniques-56e1f1389d9b)\n- [@article@Rust Concurrency Made Easy: A Guide to Arc and Mutex](https://www.ruststepbystep.com/rust-concurrency-made-easy-a-guide-to-arc-and-mutex/)",
    "networking@3pL0ARqk8uRNimopHSalW": "# Networking\n\nRust's `std::net` module provides networking primitives including `TcpStream`, `TcpListener`, `UdpSocket`, and address types. Built on BSD sockets, it offers low-level network operations for building networking applications. Higher-level crates like Tokio provide async networking capabilities.\n\nVisit the following resources to learn more:\n\n- [@official@std\\:\\:net](https://doc.rust-lang.org/std/net/)\n- [@official@TcpListener](https://doc.rust-lang.org/std/net/struct.TcpListener.html)\n- [@official@UdpSocket](https://doc.rust-lang.org/std/net/struct.UdpSocket.html)\n- [@official@TcpStream](https://doc.rust-lang.org/std/net/struct.TcpStream.html)\n- [@article@Networking Fundamentals in Rust](https://medium.com/@murataslan1/networking-fundamentals-in-rust-525dcfbd5058)\n",
    "nrf-hal@ETYrk0s5Wn80XyntNG_t1": "# nrf-hal\n\n`nrf-hal` is a Rust Peripheral Access Crate for Nordic Semiconductor nRF52 and nRF91 series chips. Provides high-level, semantic interfaces for GPIO, timers, RNG, RTC, I2C/SPI, temperature sensors, and delay routines. Open-source Apache licensed library abstracting direct register access.\n\nVisit the following resources to learn more:\n\n- [@official@nRF-HAL â€” embedded dev in Rust](https://lib.rs/crates/nrf-hal)\n- [@opensource@nrf-rs/nrf-hal](https://github.com/nrf-rs/nrf-hal)\n- [@article@What the HAL? The Quest for Finding a Suitable Embedded Rust HAL](https://dev.to/theembeddedrustacean/what-the-hal-the-quest-for-finding-a-suitable-embedded-rust-hal-2i02)\n",
    "option-and-result-enumerations@wQHkBydWsiGEOZMdKmz40": "# Option & Result Enumerations\n\n`Option<T>` handles nullable values with `Some(T)` and `None` variants, replacing null pointers safely. `Result<T, E>` manages error handling with `Ok(T)` for success and `Err(E)` for failures. Both enums enable safe error handling through pattern matching and method chaining.\n\nVisit the following resources to learn more:\n\n- [@official@Option & unwrap](https://doc.rust-lang.org/rust-by-example/error/option_unwrap.html)\n- [@official@Result](https://doc.rust-lang.org/rust-by-example/error/result.html)\n- [@article@Error Handling in Rust - Andrew Gallant's Blog](https://burntsushi.net/rust-error-handling)\n- [@article@Using unwrap() in Rust is Okay - Andrew Gallant's Blog](https://burntsushi.net/unwrap/)\n",
    "ownsership-rules--memory-safety@2UQ3AuGkDbT0-54l0rOGM": "# Ownership Rules and Memory Safety\n\nRust's ownership has three key rules: each value has exactly one owner, only one owner exists at a time, and values are dropped when owners go out of scope. This prevents data races, ensures memory safety without garbage collection, and eliminates common bugs like use-after-free and memory leaks.\n\nVisit the following resources to learn more:\n\n- [@official@What is Ownership?](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html)\n- [@article@Rust Ownership & Borrowing - Memory Safety Without Garbage](https://webreference.com/rust/ownership/)\n- [@article@What Is Ownership?](https://rust-book.cs.brown.edu/ch04-01-what-is-ownership.html)\n",
    "pattern-matching--destructuring@yqp3UePmSlGyOYpxITis4": "# Pattern Matching and Destructuring\n\nIn Rust, \"pattern matching\" is a robust tool that allows you to destructure data types and perform conditional checks in a succinct and clear way. The main structures used for pattern matching are `match` and `if let`. The `match` keyword can be used to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things. The `if let` structure allows you to combine `if` and `let` into a less verbose way of handling values that match one specific pattern, rather than a series of patterns. It's basically a nice syntax sugar over a `match` statement.\n\nVisit the following resources to learn more:\n\n- [@official@Patterns and Matching](https://doc.rust-lang.org/book/ch19-00-patterns.html)\n- [@official@Destructuring](https://doc.rust-lang.org/rust-by-example/flow_control/match/destructuring.html)\n- [@official@Matching](https://doc.rust-lang.org/rust-by-example/flow_control/match.html)\n- [@article@Control Flow with if let](https://rust-book.cs.brown.edu/ch06-03-if-let.html)\n",
    "performance-and-profiling@WduD9VIcYSs_JTnuMNyxk": "# Performance and Profiling\n\nPerformance profiling in Rust identifies bottlenecks using tools like `perf`, `cargo bench`, `criterion`, and `flamegraph`. These tools collect statistical data about runtime performance, helping developers optimize code efficiently by targeting actual problem areas rather than guessing.\n\nVisit the following resources to learn more:\n\n- [@article@Profiling - The Rust Performance Book](https://nnethercote.github.io/perf-book/profiling.html)\n- [@article@How to benchmark Rust code with Criterion](https://bencher.dev/learn/benchmarking/rust/criterion/)\n- [@article@Optimizing Rust Application Performance with Profiling](https://hemaks.org/posts/optimizing-rust-application-performance-with-profiling/)\n",
    "procedural-macros--custom-derive@bkVM1OIbv4XUpY6FQb8x_": "# Procedural Macros and Custom Derive\n\nProcedural macros operate on token streams at compile time, generating new code. Three types exist: custom derive (for `#[derive(MyTrait)]`), attribute-like (`#[my_attr]`), and function-like (`my_macro!()`). More powerful than declarative macros but require separate crates with special configuration.\n\nVisit the following resources to learn more:\n\n- [@official@Procedural Macros](https://doc.rust-lang.org/reference/procedural-macros.html)\n- [@article@Understanding Procedural Macros and Custom Derive](https://www.gyata.ai/rust/procedural-macros-and-custom-derive)",
    "propagating-errors-and--operator@pTC1ucmErVnMbNFnYLJK7": "# Propagating Errors and `?` Operator\n\nThe `?` operator provides concise error propagation in functions returning `Result` or `Option`. It automatically unwraps `Ok`/`Some` values or early-returns `Err`/`None` to the caller. This eliminates verbose `match` expressions and enables clean, readable error handling patterns.\n\nVisit the following resources to learn more:\n\n- [@official@Recoverable Errors with Result](https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html)\n- [@article@Understanding Result, Option, and '?' Operators in Rust](https://howtorust.com/understanding-result-option-and-operators-in-rust/)",
    "publishing-on-cratesio@Op0-bdMV3kE9Be6Ot1aC6": "# Publishing on crates.io\n\nPublishing Rust crates involves creating an account on crates.io, preparing proper `Cargo.toml` metadata, and using `cargo publish`. Once published, versions cannot be deleted or overwritten, ensuring dependency stability. The registry serves as Rust's central package repository for sharing libraries.\n\nVisit the following resources to learn more:\n\n- [@official@The Cargo Book: Publishing](https://doc.rust-lang.org/cargo/reference/publishing.html)\n- [@article@From Zero to Hero: Your First Rust Crate](https://medium.com/rust-programming-language/from-zero-to-hero-your-first-rust-crate-6f2c084df464)",
    "queue@fq2NMV-QV9ayJl82ZWzov": "# Queue\n\nQueue follows FIFO (First-In-First-Out) ordering where elements are added at one end and removed from the other. Rust doesn't have a built-in queue, but `VecDeque` provides queue functionality with `push_back()` for adding and `pop_front()` for removing elements efficiently.\n\nVisit the following resources to learn more:\n\n- [@official@VecDeque in std::collections](https://doc.rust-lang.org/std/collections/struct.VecDeque.html)\n- [@article@Working with Queues in Rust](https://basillica.medium.com/working-with-queues-in-rust-5a5afe82da46)\n- [@official@Queues](https://docs.rs/queues/latest/queues/)\n",
    "quinn@qi1pmsY8bPk8nbHiBIGha": "# quinn\n\n`Quinn` is a high-performance QUIC protocol implementation for Rust built on Tokio. QUIC is a modern transport protocol offering better performance than TCP with multiplexing and security. Quinn provides async, futures-based API supporting both client and server roles for networking applications.\n\nVisit the following resources to learn more:\n\n- [@opensource@quinn-rs/quinn: Async-friendly QUIC implementation in Rust](https://github.com/quinn-rs/quinn)\n- [@official@Quinn â€” Rust Network Library](https://lib.rs/crates/quinn)\n- [@article@Quinn](https://docs.rs/quinn/latest/quinn/)",
    "rc@U9Bd-GO0QwYVLvESR4PTb": "# Rc\n\n`Rc<T>` (Reference Counting) enables multiple owners of the same heap-allocated data in single-threaded contexts. It tracks the number of references and automatically deallocates data when the count reaches zero. Use `Rc::clone()` to create additional references without deep copying data.\n\nVisit the following resources to learn more:\n\n- [@official@Rc\\<T\\> in std::rc](https://doc.rust-lang.org/std/rc/struct.Rc.html)\n- [@official@rct - The Reference Counted Smart Pointer](https://doc.rust-lang.org/book/ch15-04-rc.html#rct-the-reference-counted-smart-pointer)",
    "relm@QbdGnUoTLgMHO1NCQINIi": "# Relm\n\n`relm` is a declarative, event-driven GUI framework for Rust built on `gtk-rs` and GTK+3. Uses Model-View-Update architecture with async Futures for complex UI interactions. Features widget identification by name, seamless inter-widget communication, and leverages Rust's safe concurrency for dynamic desktop applications.\n\nVisit the following resources to learn more:\n\n- [@official@Relm](https://relm4.org/)\n- [@official@Relm Documentation](https://relm4.org/book/stable/)\n- [@article@Relm, a GUI library, based on GTK+ and futures, written in Rust](https://relm.antoyo.xyz/relm-intro/)",
    "reqwest@TtajUXZpyNx9AmdUawm-8": "# reqwest\n\n`reqwest` is a popular HTTP client library for Rust that provides both sync and async APIs for making HTTP requests. Built on `hyper` and `tokio`, it supports JSON, forms, cookies, and various authentication methods with an ergonomic, easy-to-use interface for web API interactions.\n\nVisit the following resources to learn more:\n\n- [@article@Making HTTP requests in Rust with Reqwest](https://blog.logrocket.com/making-http-requests-rust-reqwest/)\n- [@article@Exploring Reqwest in Rust](https://medium.com/@chetanreddyk394/exploring-reqwest-in-rust-b91c548e69af)\n- [@article@Reqwest Documentation](https://docs.rs/reqwest/latest/reqwest/)\n",
    "ring@w8nxQDxmfoUHkFV66TKiq": "# ring\n\n`ring` is a safe, fast cryptography library for Rust focused on TLS and core cryptographic primitives. It includes RSA, AES, SHA, and other algorithms with compile-time and runtime safety checks. Restricts usage to safe, reviewed algorithms to prevent common cryptographic pitfalls and insecure implementations.\n\nVisit the following resources to learn more:\n\n- [@opensource@briansmith/ring](https://github.com/briansmith/ring)\n- [@article@Ring](https://docs.rs/ring/latest/ring/)\n",
    "rocket@ApjwY_70OGG_dNIC85oBD": "# Rocket\n\nRocket is a web framework for Rust emphasizing ease of use, expressiveness, and type safety. It features code generation via procedural macros, built-in templating, request guards, and comprehensive error handling. Rocket prioritizes developer productivity with intuitive APIs and detailed error messages.\n\nVisit the following resources to learn more:\n\n- [@official@Rocket - Simple, Fast, Type-Safe Web Framework for Rust](https://rocket.rs/)\n- [@article@Getting Started with Rocket in Rust](https://www.shuttle.dev/blog/2023/12/13/using-rocket-rust)",
    "rppal@L01rVq2_H4rWzlKygW5kA": "# rppal\n\n`RPPAL` (Raspberry Pi Peripheral Access Library) provides Rust access to Raspberry Pi GPIO, I2C, PWM, SPI, and UART peripherals. Features comprehensive interrupt handling, software-based PWM, and I2C/SPI buses. Supports all Raspberry Pi models running Raspbian/Debian Stretch or newer.\n\nVisit the following resources to learn more:\n\n- [@official@RPPAL Documentation](https://docs.golemparts.com/rppal/0.11.1/rppal/)\n- [@opensource@golemparts/rppal](https://github.com/golemparts/rppal)\n- [@article@RPPAL â€” Embedded dev in Rust](https://lib.rs/crates/rppal)",
    "rusqlite@a2MLN7f-FvsgdmvP9ixlv": "# rusqlite\n\n`rusqlite` is an ergonomic SQLite library for Rust built around the sqlite3 C library. It provides simple, efficient database operations with minimal SQL knowledge required. Features seamless `serde` integration for type-safe bidirectional mapping between SQL and Rust data structures.\n\nVisit the following resources to learn more:\n\n- [@article@Rusqlite](https://docs.rs/rusqlite/latest/rusqlite/)\n- [@opensource@rusqlite/rusqlite](https://github.com/rusqlite/rusqlite)\n- [@article@Rust | Sqlite Database](https://medium.com/@mikecode/rust-sqlite-database-rusqlite-162bad63fb5d)",
    "rust-crypto@f68x7r-qzaQfrzXnjOI2q": "# rust-crypto\n\n`rust-crypto` is a collection of cryptographic algorithms implemented in pure Rust including AES, DES ciphers, SHA, MD5 hash functions, and RSA digital signatures. Known for speed and low memory usage, making it suitable for resource-constrained systems requiring cryptographic functionality.\n\nVisit the following resources to learn more:\n\n- [@article@Awesome Rust Cryptography](https://cryptography.rs/)\n- [@article@rust-crypto](https://docs.rs/rust-crypto/latest/crypto/)\n- [@article@Rust | Sqlite Database](https://medium.com/@mikecode/rust-sqlite-database-rusqlite-162bad63fb5d)",
    "rust-gdb@UkHXsAolmbk-MsJFfqObC": "# rust-gdb\n\n`rust-gdb` is GDB (GNU Project debugger) enhanced for Rust debugging. It provides low-level debugging capabilities including breakpoints, execution tracing, runtime modification, and memory inspection. Designed for command-line debugging with deep system integration for comprehensive Rust application analysis.\n\nVisit the following resources to learn more:\n\n- [@official@Use rust-gdb and rust-lldb for Improved Debugging](https://users.rust-lang.org/t/use-rust-gdb-and-rust-lldb-for-improved-debugging-you-already-have-them/756)\n- [@article@Debugging Rust apps with GDB](https://blog.logrocket.com/debugging-rust-apps-with-gdb/)\n",
    "rust-lldb@p1w1iljGABgHoJjIRJYLY": "# rust-lldb\n\n`rust-lldb` is LLDB debugger enhanced with Rust-specific modifications for understanding Rust data structures and concepts. It includes pretty-printers for standard library types and comes bundled with the Rust compiler, providing better debugging experience for Rust applications.\n\nVisit the following resources to learn more:\n\n- [@official@Using rust-lldb for Improved Debugging](https://users.rust-lang.org/t/use-rust-gdb-and-rust-lldb-for-improved-debugging-you-already-have-them/756)\n- [@article@Debugging Rust apps with GDB](https://blog.logrocket.com/debugging-rust-apps-with-gdb/)\n- [@article@Debugging Rust with rust-lldb](https://dev.to/bmatcuk/debugging-rust-with-rust-lldb-j1f)",
    "rust-repl-rust-playground@eYCNYtwXBjZwcPUe7QYZ-": "# Rust REPL (Rust Playground)\n\n`Rust REPL` (Read-Eval-Print-Loop) is an interactive shell in which you can write and test Rust snippets in real-time. Unlike running a program normally in Rust where you have to manually compile and then run the program, REPL automatically evaluates your inputs, and the result is returned immediately after execution. This is helpful when experimenting with Rust code, learning the language, and debugging. REPL isn't built into Rust directly, but is available via third-party tools such as `evcxr_repl`.\n\nVisit the following resources to learn more:\n\n- [@official@Rust Playground](https://play.rust-lang.org/)\n- [@article@Debugging Rust apps with GDB](https://blog.logrocket.com/debugging-rust-apps-with-gdb/)\n- [@article@Debugging Rust with rust-lldb](https://dev.to/bmatcuk/debugging-rust-with-rust-lldb-j1f)\n- [@article@Interactive Rust in a REPL and Jupyter Notebook](https://depth-first.com/articles/2020/09/21/interactive-rust-in-a-repl-and-jupyter-notebook-with-evcxr/)",
    "rwlock@WzGl4DkANjUu7VC1AIWI-": "# RwLock\n\n`RwLock<T>` (Read-Write Lock) allows multiple concurrent readers OR one exclusive writer, unlike Mutex which allows only one accessor. Use `read()` for shared access and `write()` for exclusive access. Ideal for read-heavy workloads where data is frequently read but rarely modified.\n\nVisit the following resources to learn more:\n\n- [@official@RwLock](https://doc.rust-lang.org/std/sync/struct.RwLock.html)\n- [@article@Rust Read-Write Locks: Managing Concurrent Read and Write Access](https://medium.com/@TechSavvyScribe/rust-read-write-locks-managing-concurrent-read-and-write-access-a6ab689bbed3)\n",
    "serde@EHErECEYws05oi59OsZpC": "# Serde\n\nSerde is Rust's most popular serialization framework for converting data structures to/from formats like JSON, YAML, TOML, and Binary. It provides `Serialize` and `Deserialize` traits with derive macros for automatic implementation. Offers high performance with customizable behavior for complex use cases.\n\nVisit the following resources to learn more:\n\n- [@official@Serde](https://serde.rs/)\n- [@article@Serde Documentation](https://docs.rs/serde/latest/serde/)\n- [@article@Serialization in Rust with Serde](https://rustmeup.com/serialization-in-rust-with-serde)",
    "serialization--deserialization@gcmKSLWfBqx4aPZOmyQsg": "# Serialization/Deserialization\n\nSerialization converts Rust data structures into bytes for storage or transmission, while deserialization reverses the process. *Serde* is the standard framework with support for JSON, YAML, TOML, Binary, and more formats. Provides efficient, type-safe data conversion.\n\nVisit the following resources to learn more:\n\n- [@article@Serde Documentation](https://docs.rs/serde/latest/serde/)\n- [@article@Serialization and Deserialization in Rust: A Comprehensive Guide](https://rustmeup.com/serialization-in-rust-with-serde)\n- [@article@Rust Serialization: Easy Beginner's Guide with Examples](https://boxoflearn.com/rust-serialization-guide/)",
    "smol@3C9gCBAq3OQVb583S72D4": "# smol\n\n`smol` is a small, fast async runtime for Rust with minimal API and clean design. Built on async-std and Tokio, it supports async/await natively with efficient scheduling. Offers essential async functionality including timers, futures, and task management with superior performance in a lightweight package.\n\nVisit the following resources to learn more:\n\n- [@official@Smol - Gist of Rust](https://book.gist.rs/rust/r1/smol.html)\n- [@article@Smol Documentation](https://docs.rs/smol/latest/smol/)\n- [@opensource@smol-rs/smol: A small and fast async runtime for Rust](https://github.com/smol-rs/smol)",
    "sodiumoxide@hzzRFb5cyXkgUdLZxaozB": "# sodiumoxide\n\n`sodiumoxide` is a Rust binding to libsodium cryptography library, designed for easy use and misuse prevention. Provides safe, high-level, idiomatic Rust wrappers for cryptographic primitives with automatic error handling. Follows NaCl design principles for simplicity while offering libsodium performance benefits.\n\nVisit the following resources to learn more:\n\n- [@article@Rust Password Hashing with Argon2id and the Sodiumoxide](https://blue42.net/code/rust/examples/sodiumoxide-password-hashing/post/)\n- [@article@sodiumoxide/sodiumoxide](https://deepwiki.com/sodiumoxide/sodiumoxide)",
    "sqlx@r2KembNZ2WIzLe87EB91K": "# sqlx\n\nSQLx is an async, pure-Rust SQL toolkit providing compile-time query checking for PostgreSQL, MySQL, SQLite, and MSSQL. It features macro-based query validation, strong typing, and compatibility with Tokio/async-std runtimes. SQLx eliminates runtime SQL errors through compile-time verification.\n\nVisit the following resources to learn more:\n\n- [@opensource@launchbadge/sqlx](https://github.com/launchbadge/sqlx)\n- [@article@sqlx Documentation](https://docs.rs/sqlx/latest/sqlx/)\n- [@article@Getting Started with SQLx and SQLite in Rust](https://medium.com/rustaceans/getting-started-with-sqlx-and-sqlite-in-rust-895ae7fc01ae)",
    "stack@B-S1hE-ofNTutnkc2hJBf": "# Stack\n\nStack is a LIFO (Last-In-First-Out) data structure where elements are added and removed from the same end. In Rust, the call stack manages function calls, with each call pushing a frame and returns popping it. Stack memory is fast but limited in size, with stack overflow occurring when exceeded.\n\nVisit the following resources to learn more:\n\n- [@official@Box, Stack and Heap](https://doc.rust-lang.org/rust-by-example/std/box.html)\n- [@official@std::collections](https://doc.rust-lang.org/std/collections/index.html)\n- [@article@Getting Started with SQLx and SQLite in Rust](https://medium.com/rustaceans/getting-started-with-sqlx-and-sqlite-in-rust-895ae7fc01ae)\n",
    "string@Hu1jf46OpX44nam_UvYqc": "# String\n\nRust's `String` is a growable, mutable, UTF-8 encoded string type stored on the heap. Unlike string slices (`&str`), `String` owns its data and can be modified. Create with `String::from(\"text\")` or `\"text\".to_string()`. Common operations include `push_str()`, `push()`, and concatenation with `+` or `format!()` macro.\n\nVisit the following resources to learn more:\n\n- [@official@String](https://doc.rust-lang.org/std/string/struct.String.html)\n- [@official@str](https://doc.rust-lang.org/std/primitive.str.html)\n- [@official@What as a String?](https://doc.rust-lang.org/book/ch08-02-strings.html?highlight=String#what-is-a-string)\n- [@article@Rust String (With Examples)](https://www.programiz.com/rust/string)\n- [@video@All Rust string types explained](https://www.youtube.com/watch?v=CpvzeyzgQdw&pp=ygUOc3RyaW5nIGluIHJ1c3Q%3D)\n",
    "structopt@_43912wPdXgLL8v-IMHX_": "# StructOpt\n\n`StructOpt` is a library for parsing command-line arguments by defining structs where fields represent flags, options, and arguments. Combines `clap`'s parsing power with Rust's type system for declarative CLI definition with automatic help generation, strong typing, and validation.\n\nVisit the following resources to learn more:\n\n- [@official@Defining and Instantiating Structs](https://doc.rust-lang.org/book/ch05-01-defining-structs.html)\n- [@article@Parsing Command Line Args with StructOpt](https://www.tenderisthebyte.com/blog/2019/05/08/parsing-cli-args-with-structopt/)\n",
    "structs@Mi9mQ-8gyDPd8Mbu1zuHt": "# Structs\n\nIn Rust, a struct is a custom data type used for grouping related values together into one entity. Structs are similar to classes in other programming languages. Essentially, each `struct` creates a new type that we can use to streamline complex data handling.\n\nVisit the following resources to learn more:\n\n- [@official@Defining and Instantiating Structs](https://doc.rust-lang.org/book/ch05-01-defining-structs.html)\n- [@article@Understanding Structs in Rust: A Complete Guide with Examples](https://medium.com/@er.pwndhull07/understanding-structs-in-rust-a-complete-guide-with-examples-621bf9753b88)\n",
    "tauri@Q71MnFDQBkZF1c2hj13pU": "# Tauri\n\nTauri is a framework for building lightweight, secure desktop applications using web technologies (HTML, CSS, JS) with a Rust backend. It offers smaller bundle sizes than Electron, enhanced security, and cross-platform support for Windows, macOS, and Linux with native system integration.\n\nVisit the following resources to learn more:\n\n- [@official@Tauri](https://tauri.app)\n- [@official@Tauri Guides](https://v1.tauri.app/v1/guides/)\n- [@article@How to Build Cross-Platform GUI Applications with Rust & Tauri](https://codezup.com/cross-platform-gui-apps-rust-tauri-guide/)",
    "termion@YS0igALDqSanGDWva_vls": "# Termion\n\n`termion` is a pure Rust, zero-dependency library for low-level terminal manipulation and information handling. Provides cross-terminal compatibility with features like color support, input handling, and terminal-specific capabilities. Ideal for building cross-platform CLI applications without external bindings.\n\nVisit the following resources to learn more:\n\n- [@official@Termion Documentation](https://docs.rs/termion/latest/termion/)\n- [@article@Implementing Terminal I/O in Rust | by Packt](https://packt.medium.com/implementing-terminal-i-o-in-rust-4a44652b0f11)\n- [@article@Making Terminal Applications in Rust with Termion](https://ticki.github.io/blog/making-terminal-applications-in-rust-with-termion/)",
    "testing@08qKtgnhJ3tlb5JKfTDf5": "# Testing\n\nRust has built-in testing support through `cargo test` and the `#[test]` attribute. Test functions use assertion macros like `assert!`, `assert_eq!`, and `assert_ne!` to verify expected behavior. Organize tests with unit tests, integration tests, and documentation tests for comprehensive coverage.\n\nVisit the following resources to learn more:\n\n- [@official@Writing Automated Tests](https://doc.rust-lang.org/book/ch11-01-writing-tests.html)\n- [@article@Testing in Rust: A Quick Guide to Unit Tests](https://dev.to/tramposo/testing-in-rust-a-quick-guide-to-unit-tests-integration-tests-and-benchmarks-2bah)\n- [@video@Mocking and Testing Rust](https://www.youtube.com/watch?v=8XaVlL3lObQ)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)\n",
    "threads-channels-and-message-passing@pJN260pWQVO0gHxi1-_3U": "# Threads, Channels, and Message Passing\n\nRust provides native threading with `std::thread::spawn()` and `join()` for 1:1 OS thread mapping. Channels enable safe message passing between threads, avoiding shared state issues. This model promotes concurrent programming without data races through Rust's ownership system.\n\nVisit the following resources to learn more:\n\n- [@official@std::thread](https://doc.rust-lang.org/std/thread/)\n- [@official@Using Message Passing to Transfer Data Between Threads](https://doc.rust-lang.org/book/ch16-02-message-passing.html)\n- [@article@Understanding Threads in Rust: A Comprehensive Guide](https://blog.stackademic.com/understanding-threads-in-rust-a-comprehensive-guide-7e2d23fb85b0)\n- [@article@Rust Atomics and Locks - Low-Level Concurrency in Practice](https://marabos.nl/atomics/)\n",
    "tokio@H0mctp3Bj2OYfIGFDWGfz": "# Tokio\n\nTokio is Rust's most popular async runtime for building fast, reliable network applications. It provides an async/await runtime, I/O drivers, timers, and networking primitives. Tokio enables high-performance concurrent applications by efficiently managing thousands of tasks on a small number of threads.\n\nVisit the following resources to learn more:\n\n- [@official@Tokio](https://tokio.rs/)\n- [@article@Tokio Docs](https://docs.rs/tokio/latest/tokio/)\n",
    "toml-rust@LmFog_qXrS9e5ARhV6OD_": "# TOML Parsing\n\n`toml-rs` parses and serializes TOML (Tom's Obvious, Minimal Language) configuration files in Rust. Uses serde for automatic serialization/deserialization between TOML and Rust types. Leverages Rust's trait system and type inference to convert TOML documents into statically-typed Rust structures.\n\nVisit the following resources to learn more:\n\n- [@official@TOML](https://docs.rs/toml/latest/toml/)\n- [@opensourcetoml-rs/toml-rs](https://github.com/toml-rs/toml-rs)",
    "trait-bounds-and-associated-types@pRDgDtRIVpNM2CdhSOS3Q": "# Trait Bounds and Associated Types\n\nTrait bounds constrain generics by requiring types to implement specific traits (`T: Display`). Associated types define type placeholders within traits that implementors must specify. Together, they enable flexible generic programming with type safety and improved API design patterns.\n\nVisit the following resources to learn more:\n\n- [@official@Trait and Lifetime Bounds](https://doc.rust-lang.org/reference/trait-bounds.html)\n- [@article@Understanding Traits and Trait Bounds in Rust](https://leapcell.medium.com/understanding-traits-and-trait-bounds-in-rust-d575f19dd649)\n",
    "trait-definitions--implementations@_EicstELZcdesHiXFWJGu": "# Trait Definitions and Implementations\n\nTraits define shared behavior as a set of method signatures that types can implement. Define with `trait Name { fn method(&self); }` and implement with `impl TraitName for Type`. Traits enable polymorphism, code reuse, and abstraction while maintaining type safety and zero-cost performance.\n\nVisit the following resources to learn more:\n\n- [@official@Traits](https://doc.rust-lang.org/rust-by-example/trait.html)\n- [@article@Understanding Traits and Trait Bounds in Rust](https://leapcell.medium.com/understanding-traits-and-trait-bounds-in-rust-d575f19dd649)\n",
    "traits--generics@zLKbYX0nnbfD5n3P_JRaS": "# Traits and Generics\n\nTraits define shared behavior that types can implement, while generics enable code reuse with type parameters. Together, they provide trait bounds (`T: Display`) to constrain generic types, ensuring they have required functionality. This enables safe, zero-cost polymorphism and code abstraction.\n\nVisit the following resources to learn more:\n\n- [@official@Generic Types, Traits, and Lifetimes](https://doc.rust-lang.org/book/ch10-00-generics.html)\n",
    "traits@SJMuIEuHp8X6nfLb0k0TU": "# Traits\n\nTraits in Rust define behaviors that are shared among different data types. Implementing traits for data types is a great way to group method signatures together and define a set of behaviors your types require. Essentially, anything with a certain `trait` applied to it will \"inherit\" the behavior of that trait's methods, but this is not the same thing as inheritance found in object-oriented programming languages.\n\nTraits are abstract; it's not possible to create instances of traits. However, we can define pointers of trait types, and these can hold any data type that implements the `trait`. A `trait` is **implemented** for something else with the syntax `impl TraitAbc for Xyz {...}`, which can be a concrete type or another trait.\n\nVisit the following resources to learn more:\n\n- [@article@Traits: Defining Shared Behaviour](https://doc.rust-lang.org/book/ch10-02-traits.html)\n- [@article@Understanding Traits and Trait Bounds in Rust](https://leapcell.medium.com/understanding-traits-and-trait-bounds-in-rust-d575f19dd649)\n",
    "tuple@81_J7CwtUUjYPvKV_prg3": "# Tuple\n\nTuples are fixed-size collections that can hold elements of different types. Access elements using dot notation with zero-based indexing: `tuple.0`, `tuple.1`, etc. Example: `let data: (i32, f64, char) = (42, 3.14, 'x');`. Useful for grouping related values of different types and multiple variable assignments.\n\nLearn more from the following links:\n\n- [@official@Tuple](https://doc.rust-lang.org/std/primitive.tuple.html)\n- [@article@The Tuple Type](https://rust-book.cs.brown.edu/ch03-02-data-types.html#the-tuple-type)\n- [@video@Rust Tutorial - Tuples](https://www.youtube.com/watch?v=t047Hseyj_k&t=506s)\n",
    "unit--integration-testing@w9coeW9-crDxu0KC-9gEU": "# Unit and Integration Testing\n\nUnit tests verify individual functions using `#[test]` and live alongside code. Integration tests are in separate files/directories and test component interactions. Rust provides `cargo test` to run both types, supporting test organization for comprehensive code verification and quality assurance.\n\nVisit the following resources to learn more:\n\n- [@official@Unit Testing](https://doc.rust-lang.org/rust-by-example/testing/unit_testing.html)\n- [@official@How to Write Tests](https://doc.rust-lang.org/book/ch11-01-writing-tests.html)\n- [@article@Testing in Rust: A Quick Guide to Unit Tests](https://dev.to/tramposo/testing-in-rust-a-quick-guide-to-unit-tests-integration-tests-and-benchmarks-2bah)\n- [@video@Mocking and Testing Rust](https://www.youtube.com/watch?v=8XaVlL3lObQ)",
    "variables-datatypes-and-constants@Gw5E21W5zis-RUIgNSEV2": "# Variables, Constants, and Data Types\n\nIn Rust, variables are declared using the `let` keyword. All variables are immutable by default, which means once a value is bound to a variable, it cannot be changed. If you want to make a variable mutable, the `mut` keyword is used. So, if you wanted to declare a mutable variable `x` and assign it the value `5`, you would write `let mut x = 5;`. Variables can also be patterned. By default in Rust, variables are block-scoped. Rust also supports several types of variable attributes.\n\nVisit the following resources to learn more:\n\n- [@official@Variables and Mutability](https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html)\n- [@official@Data Types](https://doc.rust-lang.org/book/ch03-02-data-types.html)\n- [@official@Constants](https://doc.rust-lang.org/rust-by-example/custom_types/constants.html)\n",
    "vector@PskCueCc9pSxfnSzfdX-u": "# Vector\n\n`Vec<T>` is Rust's growable, heap-allocated array that stores elements of the same type contiguously. Unlike arrays, vectors can resize at runtime. Key methods include `push()` to add elements, `pop()` to remove the last element, and `len()` for size. Example: `let mut v = vec![1, 2, 3];`\n\nVisit the following resources to learn more:\n\n- [@official@Vector](https://doc.rust-lang.org/std/vec/struct.Vec.html)\n- [@official@Storing Lists of Values with Vectors](https://doc.rust-lang.org/book/ch08-01-vectors.html?highlight=vector#storing-lists-of-values-with-vectors)\n- [@article@Rust Vector (With Examples)](https://www.programiz.com/rust/vector)\n- [@video@Rust Vectors](https://www.youtube.com/watch?v=nOKOFYzvvHo&t=97s&pp=ygUMcnVzdCB2ZWN0b3Jz)\n- [@video@Common Collections in Rust](https://www.youtube.com/watch?v=Zs-pS-egQSs&t=39s&pp=ygUMcnVzdCB2ZWN0b3Jz)\n",
    "wasm-bindgen@SUtBBqqDeR_yAkr669ZvE": "# wasm-bindgen\n\n`wasm-bindgen` facilitates high-level interactions between Rust and JavaScript in WebAssembly. It generates bindings allowing seamless communication, JavaScript API calls from Rust, and vice versa. Handles memory representations and call semantics for complex data types like strings and objects.\n\nVisit the following resources to learn more:\n\n- [@official@wasm-bindgen](https://docs.rs/wasm-bindgen/latest/wasm_bindgen/)\n- [@opensource@rustwasm/wasm-bindgen](https://github.com/rustwasm/wasm-bindgen)\n- [@article@Compiling from Rust to WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly/Guides/Rust_to_Wasm)\n",
    "wasm-pack@TSlj7mMUB5CDTy8uMFzKV": "# wasm-pack\n\n`wasm-pack` is a command-line tool for assembling and packaging Rust crates targeting WebAssembly. It bridges Rust/WASM and JavaScript, generating necessary files for npm publishing. Ensures proper Rust-to-WASM compilation setup with focus on ergonomics, performance, and correctness.\n\nVisit the following resources to learn more:\n\n- [@official@wasm-pack](https://lib.rs/crates/wasm-pack)\n- [@article@Writing & Compiling WASM in Rust](https://www.shuttle.dev/blog/2024/03/06/writing-wasm-rust)\n- [@opensource@rustwasm/wasm-pack](https://github.com/rustwasm/wasm-pack)\n- [@article@Compiling from Rust to WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly/Guides/Rust_to_Wasm)\n",
    "wasmer@iyFHvZj_ntr_dX6WlL4E1": "# Wasmer\n\nWasmer is a standalone WebAssembly runtime designed to run WASM files on any platform quickly and efficiently. Features a pluggable system with different compiling strategies, friendly CLI, and embedding APIs for calling WASM functions directly from various programming languages. Lightweight and modular.\n\nVisit the following resources to learn more:\n\n- [@official@Embedding WebAssembly in your Rust Application](https://blog.wasmer.io/executing-webassembly-in-your-rust-application-d5cd32e8ce46)\n- [@article@Wasmer â€” WebAssembly in Rust](https://lib.rs/crates/wasmer)\n- [@article@Writing & Compiling WASM in Rust](https://www.shuttle.dev/blog/2024/03/06/writing-wasm-rust)\n- [@opensource@wasmerio/wasmer](https://github.com/wasmerio/wasmer)\n- [@article@Compiling from Rust to WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly/Guides/Rust_to_Wasm)\n",
    "web-development@KomYBYxj0FTrJDYB3nU5B": "# Web Development\n\nRust offers excellent web development capabilities with frameworks like Actix, Rocket, Axum, and Warp. These provide HTTP handling, routing, middleware, and database integration. Rust's performance and safety make it ideal for high-performance web services, APIs, and microservices.\n\nVisit the following resources to learn more:\n\n- [@official@Rocket - Simple, Fast, Type-Safe Web Framework for Rust](https://rocket.rs/)\n- [@article@Rust for Web Development: A Beginner's Guide](https://medium.com/@enravishjeni411/rust-for-web-development-a-beginners-guide-fcc994e5c090)\n- [@article@How to Write Your First Rust Web App with Rocket and RustRover](https://blog.jetbrains.com/rust/2024/02/28/how-to-write-your-first-rust-web-app-with-rocket-and-rustrover/)\n",
    "webassembly-wasm@fusu4ZHH4-cjoouLr4F9U": "# WebAssembly (WASM)\n\nWebAssembly is a binary instruction format that runs at near-native speed in web browsers and other environments. Rust compiles excellently to WASM with tools like `wasm-pack` and `wasm-bindgen`, enabling high-performance web applications and cross-platform deployment.\n\nVisit the following resources to learn more:\n\n- [@official@Embedding WebAssembly in your Rust Application](https://blog.wasmer.io/executing-webassembly-in-your-rust-application-d5cd32e8ce46)\n- [@article@Writing & Compiling WASM in Rust](https://www.shuttle.dev/blog/2024/03/06/writing-wasm-rust)\n- [@article@Compiling from Rust to WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly/Guides/Rust_to_Wasm)\n- [@official@wasm-pack](https://lib.rs/crates/wasm-pack)\n- [@official@wasm-bindgen](https://docs.rs/wasm-bindgen/latest/wasm_bindgen/)\n",
    "wgpu-rs@6wGShK9WEnXiby_Jm8sTO": "# wgpu-rs\n\n`wgpu-rs` provides safe, idiomatic Rust graphics programming by abstracting over wgpu-core. Offers high-level convenience with low-level control options. Provides unified access to graphics and compute functionality across Vulkan, Metal, DirectX, and WebGPU backends for cross-platform compatibility.\n\nVisit the following resources to learn more:\n\n- [@official@wgpu: portable graphics library for Rust](https://wgpu.rs/)\n- [@article@wpgu docs](hhttps://docs.rs/wgpu/latest/wgpu/)\n- [@opensource@gfx-rs/wgpu](https://github.com/gfx-rs/wgpu)",
    "what-is-rust@cMfsRtvzvDZZJ0TqeUOxm": "# What is Rust?\n\nRust is a modern system programming language focused on performance, safety, and concurrency. It accomplishes these goals without having a garbage collector, making it a useful language for a number of use cases other languages arenâ€™t good at. Its syntax is similar to C++, but Rust offers better memory safety while maintaining high performance.\n\nVisit the following resources to learn more:\n\n- [@official@Rust? What is it?](https://doc.rust-lang.org/stable/rust-by-example/index.html)\n- [@official@Rust Programming Language](https://www.rust-lang.org/)\n- [@article@What is Rust and why is it so popular?](https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/)\n- [@video@What is Rust?](https://www.youtube.com/watch?v=R33h77nrMqc)\n- [@feed@Explore top posts about Rust](https://app.daily.dev/tags/rust?ref=roadmapsh)\n",
    "why-use-rust@VhSEH_RoWFt1z2lial7xZ": "# Why use Rust?\n\nRust is a system programming language that aims to provide memory safety, concurrency, and performance with a focus on zero cost abstractions. It was originally created by Graydon Hoare at Mozilla Research, with contributions from Brendan Eich, the creator of JavaScript. Rust is appreciated for the solutions it provides to common programming language issues. Its emphasis on safety, speed, and support for concurrent programming, as well as its robust type system, are just a few reasons why developers choose Rust.\n\nVisit the following resources to learn more:\n\n- [@official@Rust? What is it?](https://doc.rust-lang.org/stable/rust-by-example/index.html)\n- [@official@Rust Programming Language](https://www.rust-lang.org/)\n- [@video@What is Rust?](https://www.youtube.com/watch?v=R33h77nrMqc)\n- [@video@Convince your boss to use Rust](https://www.youtube.com/playlist?list=PLZaoyhMXgBzqkaLKR8HHWZaASMvW4gRtZ)\n- [@video@Rust in 100 seconds](https://www.youtube.com/watch?v=5C_HPTJg5ek\\&pp=ygUNcnVzdCBmaXJlYmFzZQ%3D%3D)\n- [@feed@Explore top posts about Rust](https://app.daily.dev/tags/rust?ref=roadmapsh)\n"
  },
  "migration-mapping": {
    "introduction": "4U-HZQGH7kaWCB94Xy8Mh",
    "introduction:what-is-rust": "cMfsRtvzvDZZJ0TqeUOxm",
    "introduction:why-rust": "VhSEH_RoWFt1z2lial7xZ",
    "introduction:installing-rust": "-IqA02ObYvXPW1ot6t_b9",
    "introduction:ides-and-rust": "oyP1ZyOgDC4nYEQXHwdVQ",
    "introduction:rust-repl": "eYCNYtwXBjZwcPUe7QYZ-",
    "language-basics": "6E4pGifNfSAq6SbzfzFNT",
    "language-basics:syntax:pattern-matching": "yqp3UePmSlGyOYpxITis4",
    "language-basics:syntax:functions": "5hKJaMKpeFEUi3S1Hpiyk",
    "language-basics:syntax:control-flow": "u2wlnmE1uLaTqWw35UF0a",
    "language-basics:syntax:variables": "Gw5E21W5zis-RUIgNSEV2",
    "language-basics:constructs:enums": "FswpjWqqt8-BzUTsDDjel",
    "language-basics:constructs:structs": "Mi9mQ-8gyDPd8Mbu1zuHt",
    "language-basics:constructs:traits": "SJMuIEuHp8X6nfLb0k0TU",
    "language-basics:constructs:impl-blocks": "HzWHDQZjA9OgVZEWrmhKf",
    "language-basics:data-structures:integers": "FHZSxSiOZYNBEz6tu8wuF",
    "language-basics:data-structures:floats": "rNHHp1GgmRnKIYlZayi59",
    "language-basics:data-structures:boolean": "bjwJCGMx5ZfrH7vz3eLS7",
    "language-basics:data-structures:character": "dXMJb2wDmmh2jie1AnPoK",
    "language-basics:data-structures:tuple": "81_J7CwtUUjYPvKV_prg3",
    "language-basics:data-structures:array": "2DbdHCjFzGHwCUETakaGh",
    "language-basics:data-structures:vector": "PskCueCc9pSxfnSzfdX-u",
    "language-basics:data-structures:string": "Hu1jf46OpX44nam_UvYqc",
    "language-basics:data-structures:hashmap": "JAgjrf5WDXiorZ6gFRzTc",
    "language-basics:data-structures:hashset": "b1iYy4Hvkj47Q13V2HE4i",
    "language-basics:data-structures:linked-list": "iR0ewc2yURqS7bfMWfoBi",
    "language-basics:data-structures:binary-heap": "jdndHBzmdgI6uYql6bO4W",
    "language-basics:data-structures:stack": "B-S1hE-ofNTutnkc2hJBf",
    "language-basics:data-structures:queue": "fq2NMV-QV9ayJl82ZWzov",
    "language-basics:data-structures:btree-map": "LWgaZWTJVWLDes3HzflRh",
    "language-basics:data-structures:btree-set": "FsyLYRQP_rs4qL7IAj9Mo",
    "language-basics:data-structures:rc": "U9Bd-GO0QwYVLvESR4PTb",
    "language-basics:data-structures:arc": "yYmV5qkldu0FkDhOhWOXs",
    "language-basics:data-structures:mutex": "GbbeV3r27IBEKHyiyLqs6",
    "language-basics:data-structures:rwlock": "WzGl4DkANjUu7VC1AIWI-",
    "language-basics:data-structures:channels": "3nXJg5Y4SUug_dEAj0eQm",
    "language-basics:ownership:rules": "2UQ3AuGkDbT0-54l0rOGM",
    "language-basics:ownership:borrowing": "-onH5vPffdcZFjjVcnEpk",
    "language-basics:ownership:stack-heap": "UdXq0H8599cDTKXaIlPqt",
    "error-handling": "X2gB0m-ZKSC4TJyIcwsMx",
    "error-handling:option": "wQHkBydWsiGEOZMdKmz40",
    "error-handling:propagating": "pTC1ucmErVnMbNFnYLJK7",
    "error-handling:custom-error": "LwqOxYY9E9MUDgz2M40uV",
    "modules-and-crates": "Zpowr_NGd-E2DC3g-oW9h",
    "modules-and-crates:code-organization": "c_SdccEXEJyh4ymWzvCeX",
    "modules-and-crates:dependency-mgmt": "PkePVzV-b1pgFJP5xID5_",
    "modules-and-crates:publishing": "Op0-bdMV3kE9Be6Ot1aC6",
    "concurrency-parallelism": "pehYc_xLrs6BFUbcpPTiJ",
    "concurrency-parallelism:threads": "pJN260pWQVO0gHxi1-_3U",
    "concurrency-parallelism:atomic-operations": "n1Epl_nBuoXW2OE0IKYVR",
    "concurrency-parallelism:futures": "kVfBbsOHoixvqb4dYTG3Q",
    "traits-generics": "zLKbYX0nnbfD5n3P_JRaS",
    "traits-generics:trait-def": "_EicstELZcdesHiXFWJGu",
    "traits-generics:trait-bounds": "pRDgDtRIVpNM2CdhSOS3Q",
    "traits-generics:advanced-generics": "_hxwo_iAdOwlWBltv7i6i",
    "lifetimes-borrow": "UZ56NKloehcxUFNuSeO19",
    "lifetimes-borrow:explicit-lifetime": "R5HIVS-lyCp9b46aXqx2m",
    "lifetimes-borrow:lifetime-elision": "qJI8GObmsxyc_tTtUEOAd",
    "lifetimes-borrow:covariant": "7yVvMnvCvLbFa51pESx0j",
    "macros": "eTpZXd8E2jVBmk_aSLZYV",
    "macros:declarative": "AXWXXsww7Xkl3BYgtThNe",
    "macros:procedural": "bkVM1OIbv4XUpY6FQb8x_",
    "macros:domain-specific": "Kb7KF7JCMaWFz-GuaQmQV",
    "web-development": "KomYBYxj0FTrJDYB3nU5B",
    "web-development:rocket": "ApjwY_70OGG_dNIC85oBD",
    "web-development:axum": "duQ1RO1lqq793mfb5w31P",
    "web-development:actix": "3Y90v2ysoMcyjDL24H7mC",
    "async-programming": "yu0f5gALho0e8wzV10yow",
    "async-programming:tokio": "H0mctp3Bj2OYfIGFDWGfz",
    "async-programming:async-std": "_2uQInXPdOY-DpYTO1Prt",
    "async-programming:smol": "3C9gCBAq3OQVb583S72D4",
    "networking": "3pL0ARqk8uRNimopHSalW",
    "networking:reqwest": "TtajUXZpyNx9AmdUawm-8",
    "networking:hyper": "-MiN5ytI43EjgmWV55BhU",
    "networking:quinn": "qi1pmsY8bPk8nbHiBIGha",
    "serialization": "gcmKSLWfBqx4aPZOmyQsg",
    "serialization:serde": "EHErECEYws05oi59OsZpC",
    "serialization:json-rust": "ZXMKY0f7mqqlsvyH9u-LM",
    "database-orm": "_n7emeqzf5UTxVB5-385G",
    "database-orm:diesel": "UAXpBK3lfnq0Q4RcBehZ1",
    "database-orm:sqlx": "r2KembNZ2WIzLe87EB91K",
    "database-orm:rusqlite": "a2MLN7f-FvsgdmvP9ixlv",
    "cryptography": "Rv_Z-rbtELPZ1Nv0PZQmV",
    "cryptography:ring": "w8nxQDxmfoUHkFV66TKiq",
    "cryptography:rust-crypto": "f68x7r-qzaQfrzXnjOI2q",
    "cryptography:sodiumoxide": "hzzRFb5cyXkgUdLZxaozB",
    "cli-utils": "2Zyyf9q_CxmOW-z2pipL8",
    "cli-utils:clap": "AId80IokM7NvGBVutmuGC",
    "cli-utils:structopt": "_43912wPdXgLL8v-IMHX_",
    "cli-utils:termion": "YS0igALDqSanGDWva_vls",
    "game-dev": "uG-EmZVZ-jc3mswOT4-7l",
    "game-dev:bevy": "uyrGki0jB7DXQ0HJe2-vY",
    "game-dev:fyrox": "x9bmK_cLYpX0ebwjZUn4R",
    "game-dev:ggez": "qquYnrrzUlyd8738jzj1D",
    "game-dev:macroquad": "EtKhe3lgK3NoiBOjXRb2O",
    "game-dev:wgpu-rs": "6wGShK9WEnXiby_Jm8sTO",
    "gui-dev": "T1LlJz5m5wnwBvKAEuGnP",
    "gui-dev:tauri": "Q71MnFDQBkZF1c2hj13pU",
    "gui-dev:gtk-rs": "2Zp3m3Y7j6R1hK3DIVdkH",
    "gui-dev:relm": "QbdGnUoTLgMHO1NCQINIi",
    "embedded": "RKXljexmLAceMYwg4D_uP",
    "embedded:embedded-hal": "LzaO2cpDajXERqEYDjMl_",
    "embedded:rppal": "L01rVq2_H4rWzlKygW5kA",
    "embedded:nrf-hal": "ETYrk0s5Wn80XyntNG_t1",
    "wasm": "fusu4ZHH4-cjoouLr4F9U",
    "wasm:wasm-bindgen": "SUtBBqqDeR_yAkr669ZvE",
    "wasm:wasm-pack": "TSlj7mMUB5CDTy8uMFzKV",
    "wasm:wasmer": "iyFHvZj_ntr_dX6WlL4E1",
    "testing": "08qKtgnhJ3tlb5JKfTDf5",
    "testing:unit-integration": "w9coeW9-crDxu0KC-9gEU",
    "testing:mocking": "HEqfA6An6ZeT3z4R610en",
    "debugging": "7YKWYxogJq6X35IAUwcZF",
    "debugging:rust-gdb": "UkHXsAolmbk-MsJFfqObC",
    "debugging:rust-lldb": "p1w1iljGABgHoJjIRJYLY",
    "rustdoc": "65nbahPj9qAb9y8dF8Jnd",
    "perf-profiling": "WduD9VIcYSs_JTnuMNyxk",
    "perf-profiling:criterion-rs": "clQ26LFV_9AdQ4evnaxUK",
    "serialization:toml-rs": "LmFog_qXrS9e5ARhV6OD_"
  },
  "rust": "---\njsonUrl: '/jsons/roadmaps/rust.json'\npdfUrl: '/pdfs/roadmaps/rust.pdf'\norder: 11\nbriefTitle: 'Rust'\nbriefDescription: 'Step by step guide to becoming a Rust developer in 2025'\ntitle: 'Rust Developer'\ndescription: 'Step by step guide to becoming a Rust developer in 2025'\nhasTopics: true\nisNew: false\nrenderer: 'editor'\ndimensions:\n  width: 968\n  height: 3120\nschema:\n  headline: 'Rust Developer Roadmap'\n  description: 'Learn how to become a Rust Developer with this interactive step by step guide in 2025. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/rust.png'\n  datePublished: '2023-11-14'\n  dateModified: '2023-11-14'\nseo:\n  title: 'Learn to become a Rust developer'\n  description: 'Community driven, articles, resources, guides, interview questions, quizzes for Rust development. Learn to become a modern Rust developer by following the steps, skills, resources and guides listed in this roadmap.'\n  keywords:\n    - 'guide to becoming a rust developer'\n    - 'rust developer'\n    - 'guide to rust'\n    - 'rust roadmap'\n    - 'rust roadmap 2024'\n    - 'rust roadmap 2025'\n    - 'rustlang roadmap'\n    - 'rustlang roadmap 2025'\n    - 'rust skills'\n    - 'rust skills test'\n    - 'skills for rust'\n    - 'cloud development'\n    - 'what is rust'\n    - 'rust quiz'\n    - 'rust interview questions'\nrelatedRoadmaps:\n  - 'backend'\n  - 'devops'\n  - 'golang'\n  - 'nodejs'\n  - 'cpp'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'skill-roadmap'\n---\n"
}