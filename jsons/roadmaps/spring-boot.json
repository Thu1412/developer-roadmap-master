{
  "content": {
    "actuators@N7hd3d_XQtvOgnCqdCFt3": "# Actuators\n\nSpring Boot Actuators are a set of production-ready features in Spring Boot that allow you to monitor and manage your application in various ways. They provide a variety of endpoints that expose information about the health and performance of your application, and allow you to perform various management tasks such as shutting down the application or refreshing its configuration.\n\nSpring Boot Actuators are typically used in production environments to monitor the health and performance of an application and identify any issues that may arise. They can also be used in development and testing environments to gain insight into the internal workings of the application.\n\nVisit the following resources to learn more:\n\n- [@official@Building a RESTful Web Service with Spring Boot Actuator](https://spring.io/guides/gs/actuator-service/)\n- [@article@What is Spring Boot Actuator](https://www.baeldung.com/spring-boot-actuators)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "annotations@HdCpfGMrMaXxk5QrtYn3X": "# Annotations\n\nOne of the key features of Spring Boot is its use of annotations, which are used to configure various aspects of the application and to enable certain features.\n\nSome of the most commonly used annotations in Spring Boot include:\n\n- `@SpringBootApplication`\n- `@RestController`\n- `@Autowired`\n- `@Value`\n- `@Enable`\n- `@Configuration`\n- `@Bean`\n\nThese are just a few examples of the many annotations that are available in Spring Boot. There are many other annotations that you can use to configure various aspects of your application, such as security, caching, and data access.\n\nVisit the following resources to learn more:\n\n- [@article@Spring Annotations](https://www.digitalocean.com/community/tutorials/spring-annotations)\n- [@article@Annotations in Spring](https://www.techferry.com/articles/spring-annotations.html)\n",
    "architecture@yuXN-rD4AyyPYUYOR50L_": "# Architecture\n\nSpring Boot follows a layered architecture in which each layer communicates with the layer directly below or above (hierarchical structure) it. There are four layers in Spring Boot are as follows:\n\n- **Presentation Layer**: handles the HTTP requests, translates the JSON parameter to object, and authenticates the request and transfer it to the business layer.\n- **Business Layer**: The business layer handles all the business logic. It consists of service classes and uses services provided by data access layers. It also performs authorization and validation.\n- **Persistence Layer**: The persistence layer contains all the storage logic and translates business objects from and to database rows.\n- **Database Layer**: In the database layer, CRUD (create, retrieve, update, delete) operations are performed.\n\nVisit the following resources to learn more:\n\n- [@article@Spring Boot Architecture â€“ Detailed Explanation](https://www.interviewbit.com/blog/spring-boot-architecture)\n- [@feed@Explore top posts about Architecture](https://app.daily.dev/tags/architecture?ref=roadmapsh)\n",
    "architecture@_vS_zdJZegZS6MIKAFyg8": "# Architecture\n\nThe Spring MVC (Model-View-Controller) is a web application framework that is part of the Spring Framework. It is designed to make it easy to build web applications using the MVC design pattern.\n\nVisit the following resources to learn more:\n\n- [@article@Overview of Spring MVC Architecture](https://terasolunaorg.github.io/guideline/1.0.1.RELEASE/en/Overview/SpringMVCOverview.html)\n- [@feed@Explore top posts about Architecture](https://app.daily.dev/tags/architecture?ref=roadmapsh)\n",
    "authentication@ssdk2iAt4avhc8B5tnIzQ": "# Authentication\n\nSpring Security is a framework for securing Java-based applications. One of its core features is authentication, which is the process of verifying that a user is who they claim to be. Spring Security provides a wide range of options for implementing authentication, including support for traditional username/password-based authentication as well as more modern alternatives such as OAuth and JSON Web Tokens (JWT).\n\nVisit the following resources to learn more:\n\n- [@official@Spring Authentication](https://docs.spring.io/spring-security/reference/features/authentication/index.html)\n- [@official@Spring Security Authentication](https://spring.io/projects/spring-security)\n- [@article@Spring Security Basic Authentication](https://www.baeldung.com/spring-security-basic-authentication)\n- [@feed@Explore top posts about Authentication](https://app.daily.dev/tags/authentication?ref=roadmapsh)\n",
    "authorization@c7w7Z3Coa81FKa_yAKTse": "# Authorization\n\nSpring Security supports a variety of authentication mechanisms, such as username and password authentication, OAuth2, and more. Once a user is authenticated, Spring Security can then be used to authorize that user's access to specific resources or functionality. There are several annotations that can be used to control access to specific methods or classes.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Authorization](https://docs.spring.io/spring-security/reference/servlet/authorization/index.html)\n- [@article@Advanced authorization in Spring](https://docs.spring.io/spring-security/site/docs/5.2.11.RELEASE/reference/html/authorization.html)\n- [@article@Spring Security: Authentication and Authorization In-Depth](https://www.marcobehler.com/guides/spring-security)\n- [@feed@Explore top posts about Authorization](https://app.daily.dev/tags/authorization?ref=roadmapsh)\n",
    "autoconfiguration@88-h3d7kb-VmUBsnUUXW_": "# Autoconfiguration\n\nSpring Boot's Autoconfiguration is a powerful and convenient feature that makes it easy to configure beans and other components in your application based on the presence of certain dependencies and properties. It saves developer's time by reducing the need for boilerplate configuration code, and can be fine-tuned through properties and annotations, to provide a fine-grained control over the auto-configurations.\n\nFor more information, visit the following links:\n\n- [@official@Auto-configuration using Spring Boot](https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/using-boot-auto-configuration.html)\n",
    "cloud-config@9hG3CB8r41bUb_s8-0u73": "# Cloud Config\n\nSpring Cloud Config is a library for managing configuration properties for distributed applications. It allows developers to externalize configuration properties for an application, so that they can be easily changed without modifying the application's code. It also provides a centralized server for storing and managing configuration properties for multiple applications, making it easy to update and rollback configurations across different environments.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Cloud Config](https://spring.io/projects/spring-cloud-config)\n- [@article@Quick Intro to Spring Cloud Configuration](https://www.baeldung.com/spring-cloud-configuration)\n- [@article@Spring Boot - Cloud Configuration Server](https://www.tutorialspoint.com/spring_boot/spring_boot_cloud_configuration_server.htm)\n- [@feed@Explore top posts about Cloud](https://app.daily.dev/tags/cloud?ref=roadmapsh)\n",
    "components@sgA06Tu9Y4cEHtfI8CyLL": "# Components\n\nThe Spring MVC (Model-View-Controller) framework has several key components that work together to handle the requests and generate the appropriate responses in a web application.\n\nThere are other supporting components that are used to manage the lifecycle of the application's objects, such as the Spring IoC container and different interceptors that provides additional functionality, such as caching and security.\n\nVisit the following resources to learn more:\n\n- [@official@Web MVC Framework](https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html)",
    "configuration@OB--nMudscm0p6RqqfA7T": "# Configuration\n\nSpring Core Configuration is the process of configuring the Spring Framework, which involves specifying the various configuration details required for an application to function properly. This can include setting up beans, specifying bean dependencies, configuring aspect-oriented programming (AOP) aspects, and more. Configuration can be done through Java code, XML files, or using annotations in the code.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Framework Documentation](https://docs.spring.io/spring/docs/current/spring-framework-reference/)\n- [@article@\"Spring Configuration\" tutorial](https://www.baeldung.com/project-configuration-with-spring)\n- [@article@\"Spring Framework\" tutorial](https://www.tutorialspoint.com/spring/index.htm)\n- [@video@\"Spring Core\" video tutorial](https://www.youtube.com/watch?v=GB8k2-Egfv0)\n",
    "dependency-injection@C2EQ5J1aJYF9e9Rr2KysT": "# Dependency Injection\n\nSpring Boot uses the Spring Framework's Inversion of Control (IoC) container to manage objects and their dependencies. The IoC container is responsible for creating objects, wiring them together, and managing their lifecycle. When an object is created, its dependencies are also created and injected into the object.\n\nVisit the following resources to learn more:\n\n- [@article@Spring Dependency Injection](https://www.baeldung.com/spring-dependency-injection)\n- [@article@Dependency Injection Using Spring Boot](https://medium.com/edureka/what-is-dependency-injection-5006b53af782)\n- [@feed@Explore top posts about Dependency Injection](https://app.daily.dev/tags/dependency-injection?ref=roadmapsh)\n",
    "embedded-server@ONb0VnSUMY8JBeW3G2mTp": "# Embedded Server\n\nSpring Boot's Embedded Server feature is a convenient and powerful feature that allows you to run a web server directly within your application, without the need to deploy it to a separate standalone web server. This makes it easy to develop, test, and deploy web applications, and it's also lightweight, easy to start and stop, and easy to configure.\n\nFor more resources, visit the following links:\n\n- [@official@Embedded Web Servers â€˜How-toâ€™ guides](https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/howto-embedded-web-servers.html)\n- [@article@Embedded Servers in Spring](https://subscription.packtpub.com/book/application-development/9781789132588/3/ch03lvl1sec24/embedded-servers)\n- [@article@What is an Embedded Server? (Spring Boot)](https://www.springboottutorial.com/java-programmer-essentials-what-is-an-embedded-server)\n- [@feed@Explore top posts about Embedded Systems](https://app.daily.dev/tags/embedded?ref=roadmapsh)\n",
    "entity-lifecycle@Ijmy0J3VyaeTGXtu2VkkQ": "# Entity lifecycle\n\nIn Hibernate, we can either create a new object of an entity and store it into the database, or we can fetch the existing data of an entity from the database. These entity is connected with the lifecycle and each object of entity passes through the various stages of the lifecycle.\n\nThere are mainly four states of the Hibernate Lifecycle :\n\n- Transient State\n- Persistent State\n- Detached State\n- Removed State\n\nVisit the following resources to learn more:\n\n- [@article@Hibernate Entity Lifecycle & and its state](https://www.baeldung.com/hibernate-entity-lifecycle)\n",
    "eurkea@6sLE6gb5Y477SmO2GhQIG": "# Eureka\n\nSpring Cloud Eureka is a library for service discovery in a microservices-based architecture. Service discovery is a technique that allows services to find and communicate with each other, without having to hardcode their addresses.\n\nEureka is a service registry that allows service instances to register themselves and to discover other services by name. It provides a simple, consistent way for services to find and communicate with each other, and it integrates with other Spring Cloud libraries such as Ribbon and Feign to provide load balancing and declarative REST clients.\n\nVisit the following resources to learn more:\n\n- [@article@Introduction to Spring Cloud Netflix â€“ Eureka](https://www.baeldung.com/spring-cloud-netflix-eureka)\n- [@article@Spring Boot - Eureka Server](https://www.tutorialspoint.com/spring_boot/spring_boot_eureka_server.htm)\n- [@video@Introducing Spring Cloud EUREKA](https://www.youtube.com/watch?v=1uNo1NrqsX4)\n- [@feed@Explore top posts about Backend Development](https://app.daily.dev/tags/backend?ref=roadmapsh)\n",
    "hibernate@h5-HnycxfbJgwalSdXTAz": "# Hibernate\n\nHibernate is a Java framework that provides an object-relational mapping to an object-oriented model to the relational database. It means hibernate provides from Java classes to database tables and also provides data querying and retrieval facility.\n\nVisit the following resources to learn more:\n\n- [@article@Difference Between Spring vs Hibernate](https://www.educba.com/spring-vs-hibernate/)\n- [@article@Spring Hibernate Integration Example](https://www.digitalocean.com/community/tutorials/spring-hibernate-integration-example-tutorial)",
    "introduction@jy2heDVZuM6ASCXlI1TDn": "# Introduction\n\nSpring Boot is a framework for building applications based on the Spring Framework, a widely-used, open-source framework for building Java-based enterprise applications. Spring Boot aims to make it easy to create stand-alone, production-grade Spring-based applications that you can \"just run\".\n\nVisit the following resources to learn more:\n\n- [@official@Spring Boot](https://spring.io/projects/spring-boot)\n- [@article@Spring Boot - Introduction](https://www.tutorialspoint.com/spring_boot/spring_boot_introduction.htm)\n- [@article@Introduction to Spring Boot](https://medium.com/adessoturkey/introduction-to-spring-boot-458cb814ec14)\n- [@article@What-is-Spring-Boot?](https://www.ibm.com/topics/java-spring-boot)",
    "jpa-test@Nhx2QiSD_4pVWD17lsCbu": "# JPA Test\n\nSpring JPA (Java Persistence API) is a library that makes it easy to work with databases and other data stores in a Spring application. Spring JPA uses the Java Persistence API (JPA) to interact with databases and provides an abstraction layer to work with different data stores.\n\nVisit the following resources to learn more:\n\n- [@article@Testing JPA Queries with Spring Boot and @DataJpaTest](https://reflectoring.io/spring-boot-data-jpa-test/)\n- [@DataJpaTest example for Spring Data Repository Unit Test](https://www.bezkoder.com/spring-boot-unit-test-jpa-repo-datajpatest/)\n- [@article@Testing in Spring Boot](https://www.baeldung.com/spring-boot-testing)\n- [@feed@Explore top posts about Java](https://app.daily.dev/tags/java?ref=roadmapsh)\n",
    "jsp-files@Lz0GPMiYzb30iFJdv1dL6": "# JSP Files\n\nJSP (JavaServer Pages) is a technology for building dynamic web pages using Java.\n\nIn a Spring MVC application that uses JSPs, the view component of the MVC pattern is implemented using JSP files. The JSP files contain the presentation logic for the application and are responsible for generating the HTML that is sent to the client's web browser. When a user makes a request to a Spring MVC application, the DispatcherServlet, which acts as the front controller, handles the request and delegates responsibility for generating the response to the appropriate JSP file.\n\nVisit the following resources to learn more:\n\n- [@article@Spring Boot With JavaServer Pages (JSP)](https://www.baeldung.com/spring-boot-jsp)\n- [@official@Spring MVC: from JSP and Tiles to Thymeleaf](https://spring.io/blog/2012/10/30/spring-mvc-from-jsp-and-tiles-to-thymeleaf/)\n",
    "jwt-authentication@1My7mbdwAbRcJoiA50pWW": "# JWT Authentication\n\nSpring Security can be used to implement JWT Authentication and Authorization to your APIs. The library provides a JWT-based authentication filter that you can add to your API endpoints. The filter will check the JWT that is included in the request header, and if it is valid, it will set the authentication information in the security context. You can then use the security context to perform authorization checks on the API endpoints.\n\nVisit the following resources to learn more:\n\n- [@article@JWT Token Authentication in Spring](https://springframework.guru/jwt-authentication-in-spring-microservices-jwt-token/)\n- [@article@Spring Security with JWT for REST API](https://www.toptal.com/spring/spring-security-tutorial)\n- [@article@Spring Security - JWT](https://www.tutorialspoint.com/spring_security/spring_security_with_jwt.htm)\n- [@feed@Explore top posts about Authentication](https://app.daily.dev/tags/authentication?ref=roadmapsh)\n",
    "micrometer@GsmBGRohWbJ6XOaALFZ8o": "# Micrometer",
    "microservices@jU_KHoPUSU_HoIKk0ZpRF": "# Microservices\n\nSpring Microservices is a framework that makes it easier to build and manage microservices-based applications using the Spring Framework. Microservices is an architectural style in which a large application is built as a collection of small, independently deployable services. Each service has a narrowly defined responsibility and communicates with other services through APIs.\n\nVisit the following resources to learn more:\n\n- [@official@Microservices with Spring](https://spring.io/microservices)\n- [@article@Microservices with Spring Boot ](https://medium.com/omarelgabrys-blog/microservices-with-spring-boot-intro-to-microservices-part-1-c0d24cd422c3)\n- [@feed@Explore top posts about Microservices](https://app.daily.dev/tags/microservices?ref=roadmapsh)",
    "mock-mvc@5d1BERqTKNJMKiBcqa8Ie": "# Mock MVC\n\nSpring's MockMvc is a class that allows you to test Spring MVC controllers without the need for an actual web server. It is part of the Spring Test module, which provides a set of testing utilities for Spring applications.\n\nVisit the following resources to learn more:\n\n- [@article@Spring MockMVC tutorial](https://zetcode.com/spring/mockmvc/)\n- [@article@Spring Boot MockMVC Example](https://howtodoinjava.com/spring-boot2/testing/spring-boot-mockmvc-example/)\n- [@article@Integration Testing in Spring](https://baeldung.com/integration-testing-in-spring)\n",
    "mockbean-annotation@i77NTa0hpGGBjmql9u_CT": "# @MockBean Annotation\n\n`MockBean` is a Spring annotation that can be used to create a mock implementation of a bean in the Spring application context. When a test is annotated with MockBean, Spring creates a mock implementation of the specified bean and adds it to the application context. The mock bean can then be used to replace the real bean during testing.\n\nVisit the following resources to learn more:\n\n- [@official@Annotation Interface MockBean](https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/mock/mockito/MockBean.html)\n- [@article@Mockito.mock() vs @Mock vs @MockBean](https://www.baeldung.com/java-spring-mockito-mock-mockbean)\n- [@article@Spring Boot @MockBean Example](https://howtodoinjava.com/spring-boot2/testing/spring-mockbean-annotation/)\n",
    "oauth2@p7t3RlIIm9U08GFC6azff": "# OAuth2\n\nSpring Security OAuth2 library provides support for both the authorization code grant type (for web apps) and the implicit grant type (for single-page apps). You can also use Spring Security to protect your resources, and to configure your application as an OAuth2 resource server. The OAuth2 authentication process can be complex and time-consuming, but the Spring Security OAuth2 library makes it easy to get started by providing a set of convenient configuration classes and annotations.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Boot and OAuth2](https://spring.io/guides/tutorials/spring-boot-oauth2/)\n- [@article@Spring Boot - OAuth2 with JWT](https://www.tutorialspoint.com/spring_boot/spring_boot_oauth2_with_jwt.htm)\n- [@article@Spring Security](https://www.tutorialspoint.com/spring_security/spring_security_with_oauth2.htm)\n",
    "relationships@D4ybyh0ydvl9W2_xUcvZ_": "# Relationships\n\nUsing hibernate, if we want to have relationship between two entities, there must exist a foreign key relationship between the tables, we call it as Referential integrity. The main advantage of having relationship between objects is, we can do operation on one object, and the same operation can transfer onto the other object in the database.\n\nVisit the following resources to learn more:\n\n- [@article@Hibernate Relationships In Depth](https://www.java4s.com/hibernate/hibernate-relationships-in-depth/)\n- [@article@Guide to JPA with Hibernate - Relationship Mapping](https://stackabuse.com/a-guide-to-jpa-with-hibernate-relationship-mapping/)\n- [@article@Hibernate Mapping](https://dzone.com/articles/hibernate-mapping)\n",
    "servlet@35NTx2eO1j02sjy4m6DPq": "# Servlet\n\nA Spring servlet is a Java class that serves as the central point for handling requests and managing the lifecycle of the Spring IoC container. The Spring Framework provides a class called DispatcherServlet, which acts as the front controller in a Spring-based web application. When a user makes a request to a Spring web application, the DispatcherServlet is responsible for handling the request, delegating responsibility to other components, and ultimately returning a response to the user. The DispatcherServlet also manages the lifecycle of the Spring IoC container, including creating and initializing the container and making its beans available for use by other components in the application.\n\nVisit the following resources to learn more:\n\n- [@official@The DispatcherServlet](https://docs.spring.io/spring-framework/docs/3.0.0.M4/spring-framework-reference/html/ch15s02.html)\n- [@article@DispatcherServlet and web.xml in Spring Boot](https://www.baeldung.com/spring-boot-dispatcherservlet-web-xml)\n",
    "spring-aop@wV1_I_4czMIxpBionvLs4": "# Spring AOP\n\nSpring AOP (Aspect-Oriented Programming) is a feature of the Spring Framework that allows developers to define certain behaviors (i.e., \"aspects\") that cut across multiple classes, such as logging or transaction management. These behaviors, which are called \"advices,\" can be applied to specific \"join points\" (i.e., points in the execution of a program) in the application, using \"pointcuts\" to determine where the advices should be applied.\n\nSpring AOP allows developers to separate the implementation of these cross-cutting concerns from the business logic of the application, making the code more modular and easier to understand. This can also make the application more flexible, since the same advices can be applied to different parts of the code without having to duplicate the code for the advices themselves.\n\nVisit the following resources to learn more:\n\n- [@article@Spring AOP Tutorial](https://www.simplilearn.com/tutorials/spring-tutorial/spring-aop-aspect-oriented-programming)\n- [@article@AOP with Spring Framework](https://www.tutorialspoint.com/spring/aop_with_spring.htm)\n- [@article@Spring AOP Tutorial](https://howtodoinjava.com/spring-aop-tutorial/)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-bean-scope@KdN62IpNgPFMndXfLaYa1": "# Spring Bean Scope\n\nIn the Spring Framework, a bean is an object that is instantiated, assembled, and managed by the Spring IoC container. One of the key features of the Spring container is its ability to manage the lifecycle of beans, which includes creating, configuring, and destroying beans as necessary. One way the container can control the lifecycle of a bean is by specifying its scope.\n\nVisit the following resources to learn more:\n\n- [@article@Spring - Bean Scopes](https://www.tutorialspoint.com/spring/spring_bean_scopes.htm)\n- [@article@Quick Guide to Spring Bean Scopes](https://www.baeldung.com/spring-bean-scopes)\n- [@article@Spring Bean Scopes](https://www.digitalocean.com/community/tutorials/spring-bean-scopes)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-boot-starters@JrH2hiu27PhIO1VtrArMa": "# Spring Boot Starters\n\nSpring Boot starters are a set of convenient dependency descriptors that you can include in your application. They provide a variety of functionality, such as security, data access, and web services, and help to minimize the amount of boilerplate code and configuration you need to write.\n\nVisit the following resources to learn more:\n\n- [@article@Intro to Spring Boot Starters](https://www.baeldung.com/spring-boot-starters)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-cloud-circuit-breaker@kqpSlO--X9-xYxfq1KFVe": "# Circuit Breaker\n\nSpring Cloud Circuit Breaker is a library for managing the fault tolerance of microservices-based applications using the Circuit Breaker pattern. The Circuit Breaker pattern is a design pattern that helps to prevent cascading failures and improve the resilience of distributed systems. It does this by introducing a \"circuit breaker\" proxy in front of a service that can detect when the service is unresponsive or has failed, and stop routing traffic to it temporarily, in order to allow the service to recover.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Cloud Circuit Breaker](https://spring.io/projects/spring-cloud-circuitbreaker)\n- [@article@Quick Guide to Spring Cloud Circuit Breaker](https://www.baeldung.com/spring-cloud-circuit-breaker)\n- [@article@Spring Cloud - Circuit Breaker using Hystrix](https://www.tutorialspoint.com/spring_cloud/spring_cloud_circuit_breaker_using_hystrix.htm)\n- [@feed@Explore top posts about Cloud](https://app.daily.dev/tags/cloud?ref=roadmapsh)\n",
    "spring-cloud-gateway@f-i0NX2KOzCh3JwkaSPFo": "# Spring Cloud Gateway\n\nSpring Cloud Gateway is a Spring Framework library for building API gateways. An API gateway is a service that acts as an intermediary between an application and a set of microservices. The API gateway is responsible for request routing, composition, and protocol translation, among other things. It can also perform tasks such as authentication, rate limiting, and caching.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Cloud Gateway](https://spring.io/projects/spring-cloud-gateway)\n- [@article@What is Spring Cloud Gateway?](https://tanzu.vmware.com/developer/guides/scg-what-is/)\n- [@article@Exploring the New Spring Cloud Gateway](https://www.baeldung.com/spring-cloud-gateway)\n- [@feed@Explore top posts about Cloud](https://app.daily.dev/tags/cloud?ref=roadmapsh)\n",
    "spring-cloud-open-feign@EKSXTMSN2xdaleJ4wOV1A": "# Spring Cloud OpenFeign\n\nSpring Cloud OpenFeign is a library for creating declarative REST clients in Spring applications. It allows developers to easily make HTTP requests to other microservices or remote services, without having to manually write the low-level code to handle the requests and responses. OpenFeign is built on top of the OpenFeign declarative HTTP client, which is a simple, lightweight library for creating HTTP clients in Java.\n\nVisit the following resources to learn more:\n\n- [@article@Introduction to Spring Cloud OpenFeign](https://www.baeldung.com/spring-cloud-openfeign)\n- [@official@Spring Cloud OpenFeign](https://spring.io/projects/spring-cloud-openfeign)\n- [@article@Simple Implementation of Spring Cloud OpenFeign](https://medium.com/javarevisited/simple-implementation-of-spring-cloud-openfeign-7f022630d01d)\n- [@feed@Explore top posts about Cloud](https://app.daily.dev/tags/cloud?ref=roadmapsh)\n",
    "spring-cloud@VWNDYSw83Vzi2UPQprJ5z": "# Spring Cloud\n\nSpring Cloud is a collection of libraries and tools for building cloud-native applications using the Spring Framework. It provides a set of abstractions and implementations for common patterns and best practices used in cloud-based applications, such as service discovery, configuration management, and circuit breaker patterns, among others.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Cloud](https://spring.io/projects/spring-cloud)\n- [@article@Spring Cloud â€“ Bootstrapping](https://www.baeldung.com/spring-cloud-bootstrapping)\n- [@feed@Explore top posts about Cloud](https://app.daily.dev/tags/cloud?ref=roadmapsh)",
    "spring-data-jdbc@dd1A-MyzBs_kNOtVG7f1D": "# Spring Data JDBC\n\nSpring Data JDBC is a part of the Spring Data project that provides support for using JDBC (Java Database Connectivity) to interact with relational databases. It is designed to provide a simple and consistent programming model for interacting with databases using JDBC, while still allowing for the full power of JDBC to be used if needed. Spring Data JDBC provides a set of abstraction and utility classes that simplify the task of working with databases, such as a simple template class for executing SQL queries, a repository abstraction for implementing data access objects (DAOs), and support for pagination and sorting of query results. It works with both Java and Kotlin.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Data JDBC](https://spring.io/projects/spring-data-jdbc)\n- [@article@Spring Data JDBC - Reference Documentation](https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/)\n- [@article@Introduction to Spring Data JDBC](https://www.baeldung.com/spring-data-jdbc-intro)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-data-jpa@6u08QN-pUeFm3o0h5Scfm": "# Spring Data JPA\n\nSpring Data JPA is a library that makes it easy to implement Java Persistence API (JPA) based repositories (a fancy word for \"DAO\") for Spring applications. It's an abstraction on top of JPA that allows you to use a simpler and more convenient API for performing CRUD (Create, Read, Update, Delete) operations on databases. Spring Data JPA also provides additional functionality such as pagination, dynamic query generation, and more.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Data JPA](https://spring.io/projects/spring-data-jpa)\n- [@article@Introduction to Spring Data JPA](https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-data-mongodb@fy-TphbqkLpR1zvFcr7dg": "# Spring Data Mongodb\n\nSpring Data for MongoDB is part of the umbrella Spring Data project which aims to provide a familiar and consistent Spring-based programming model for new datastores while retaining store-specific features and capabilities\n\nThe Spring Data MongoDB project provides integration with the MongoDB document database. Key functional areas of Spring Data MongoDB are a POJO centric model for interacting with a MongoDB DBCollection and easily writing a Repository style data access layer.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Data MongoDB](https://spring.io/projects/spring-data-mongodb)\n- [@article@Introduction to Spring Data MongoDB](https://www.baeldung.com/spring-data-mongodb-tutorial)\n- [@official@Spring Boot Integration with MongoDB Tutorial](https://www.mongodb.com/compatibility/spring-boot)\n- [@feed@Explore top posts about MongoDB](https://app.daily.dev/tags/mongodb?ref=roadmapsh)\n",
    "spring-data@pvVLbFQoT50vz_VRK4VbJ": "# Spring Data\n\nSpring Data is a collection of projects for data access in Spring-based applications. It provides a common interface for working with various types of data stores, including relational databases, NoSQL data stores, and cloud-based data services. The goal of Spring Data is to simplify data access in Spring applications by providing a consistent, high-level repository programming model across different data stores and data access technologies. This can help developers write less boilerplate code and focus on business logic, while still being able to take advantage of the full power of the underlying data store.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Data](https://spring.io/projects/spring-data)\n- [@article@Spring Data â€“ One API To Rule Them All?](https://www.infoq.com/articles/spring-data-intro/)\n- [@article@What is JPA, Spring Data and Spring Data JPA](https://www.amitph.com/jpa-and-spring-data-jpa/)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)",
    "spring-ioc@PlUU_vzFQ3Xx6Z5XREIYP": "# Spring IOC\n\nInversion of Control (IoC) is a design pattern that is often used in conjunction with the Dependency Injection (DI) pattern. The basic idea behind IoC is to invert the flow of control in a program, so that instead of the program controlling the flow of logic and the creation of objects, the objects themselves control the flow of logic and the creation of other objects.\n\nSpring is a popular Java framework that uses IoC and DI to provide a more flexible, modular approach to software development. The Spring IoC container is responsible for managing the creation and configuration of objects in a Spring-based application.\n\nVisit the following resources to learn more:\n\n- [@article@Spring IoC, Spring Bean Example Tutorial](https://www.digitalocean.com/community/tutorials/spring-ioc-bean-example-tutorial)\n- [@article@Intro to Inversion of Control with Spring](https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-mvc@QiNWE4sMTao3cVzjt3yPp": "# Spring MVC\n\nSpring MVC is a framework for building web applications in Java. It is part of the Spring Framework, which is a larger ecosystem of tools for building Java applications. Spring MVC is built on the Model-View-Controller (MVC) design pattern, which helps to separate the concerns of the application into three distinct components: the Model, the View, and the Controller.\n\nSpring MVC provides a powerful and flexible way to build web applications, and it integrates well with other parts of the Spring ecosystem, such as Spring Security for authentication and authorization, and Spring Data for data access.\n\nVisit the following resources to learn more:\n\n- [@official@Web MVC framework](https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html)\n- [@article@Spring - MVC Framework](https://www.tutorialspoint.com/spring/spring_web_mvc_framework.htm)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "spring-mvc@S-BbOoRD7anvoJrprjoKF": "# Spring MVC\n\nSpring MVC is a web application framework that is part of the Spring Framework. It is designed to make it easy to build web applications using the Model-View-Controller (MVC) design pattern.\n\nIn Spring MVC, the application is divided into three main components: the Model, the View, and the Controller. The Model represents the data and the business logic of the application, the View is responsible for generating the HTML that is sent to the client's web browser, and the Controller acts as an intermediary between the Model and the View, handling incoming HTTP requests and generating the appropriate response.\n\nVisit the following resources to learn more:\n\n- [@article@Spring - MVC Framework](https://www.tutorialspoint.com/spring/spring_web_mvc_framework.htm)\n- [@article@Spring MVC Tutorial â€“ Everything You Need To Know](https://www.edureka.co/blog/spring-mvc-tutorial/)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)",
    "spring-security@KaUdyVWEiZa6lUDRBlOKt": "# Spring security\n\nSpring Security is a framework for securing Java-based applications. It is a powerful and highly customizable authentication and access-control framework that can be easily integrated with a wide variety of applications, including web applications and RESTful web services. Spring Security provides a comprehensive security solution for both authentication and authorization, and it can be used to secure applications at both the web and method level.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Security](https://spring.io/projects/spring-security)\n- [@article@What is Spring security](https://www.javadevjournal.com/spring/what-is-spring-security/)\n- [@article@Spring Security: Authentication and Authorization In-Depth](https://www.marcobehler.com/guides/spring-security)\n- [@feed@Explore top posts about Security](https://app.daily.dev/tags/security?ref=roadmapsh)",
    "springboottest-annotation@p91CaVPh5GMzFU0yEU_hl": "# @SpringBootTest annotation\n\n`@SpringBootTest` This annotation is used to create a fully-configured instance of the Spring ApplicationContext for testing. It can be used to test the application's components, including controllers, services, and repositories, in a real application environment.\n\nVisit the following resources to learn more:\n\n- [@article@Testing with Spring Boot and @SpringBootTest](https://reflectoring.io/spring-boot-test/)\n- [@official@Annotation Interface SpringBootTest](https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html)\n- [@article@Testing in Spring Boot](https://www.baeldung.com/spring-boot-testing)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n",
    "terminology@WrUCyVfFNUpHB8jyjjKna": "# Terminology\n\nSpring Core, the base of the Spring Framework, provides a model for configuring Java applications. Key concepts include **Beans** (Java objects managed by Spring), **Inversion of Control (IoC)** (Spring managing bean lifecycles and dependencies), and **Dependency Injection (DI)** (Spring providing bean dependencies). The **Spring container** (specifically an **ApplicationContext**) creates and manages these beans. Spring also offers **Aspect-Oriented Programming (AOP)** for handling cross-cutting concerns, an **event model** for decoupled communication using **ApplicationEvent** and **listeners**, abstractions for **Data Access** and **Transactions**, and utilities for **Task Execution and Scheduling**.\n\nVisit the following resources to learn more:\n\n- [@official@Spring Boot](https://spring.io/projects/spring-boot)\n- [@official@Spring Boot - Starter Guide](https://spring.io/quickstart)\n",
    "testing@7Qqrh_Rz_7uAD49g9sDzi": "# Testing\n\nSpring provides a set of testing utilities that make it easy to test the various components of a Spring application, including controllers, services, repositories, and other components. It has a rich set of testing annotations, utility classes and other features to aid in unit testing, integration testing and more.\n\nVisit the following resources to learn more:\n\n- [@article@What Is Spring Testing?](https://www.developer.com/design/what-is-spring-testing/)\n- [@article@Complete Guide To Spring Testing](https://www.lambdatest.com/blog/spring-testing/)\n- [@feed@Explore top posts about Testing](https://app.daily.dev/tags/testing?ref=roadmapsh)",
    "transactions@H9Z0EvKT_148vD0mR-dUf": "# Transactions\n\nA transaction simply represents a unit of work. In such case, if one step fails, the whole transaction fails (which is termed as atomicity). A transaction can be described by ACID properties (Atomicity, Consistency, Isolation and Durability).\n\nIn hibernate framework, we have Transaction interface that defines the unit of work. It maintains abstraction from the transaction implementation (JTA,JDBC).\n\nVisit the following resources to learn more:\n\n- [@article@Hibernate Transaction Management](https://www.javaguides.net/2018/12/hibernate-transaction-management-tutorial.html)\n- [@article@Hibernate Transaction](https://www.w3schools.blog/hibernate-transaction-management)\n",
    "why-use-spring@WGf3W6bdWL0rK0o6O28G2": "# Why Spring\n\nSpring Boot provides a number of features that make it easier to create a Spring-based application, including:\n\n- Embedded Application Server\n- Automatic Configuration\n- Pre-configured Starters\n- Ease of Packaging and Distribution\n- Ease of monitoring through built-in health check endpoint and the ability to customize the management endpoint.\n\nAdditionally, it's come with a lot of best practices and conventions baked in, which reduces the amount of work and boiler plate code developers need to write.\n\nVisit the following resources to learn more:\n\n- [@official@Why Spring?](https://spring.io/why-spring)\n- [@article@Spring vs Spring Boot: Know The Difference](https://www.interviewbit.com/blog/spring-vs-spring-boot)\n- [@article@A Comparison Between Spring and Spring Boot](https://www.baeldung.com/spring-vs-spring-boot)\n- [@article@Advantages of Spring Boot](https://www.adservio.fr/post/advantages-of-spring-boot)\n- [@feed@Explore top posts about Spring Framework](https://app.daily.dev/tags/spring?ref=roadmapsh)\n"
  },
  "migration-mapping": {
    "spring-core": "jy2heDVZuM6ASCXlI1TDn",
    "spring-core:introduction:terminology": "WrUCyVfFNUpHB8jyjjKna",
    "spring-core:introduction:architecture": "yuXN-rD4AyyPYUYOR50L_",
    "spring-core:introduction:why-spring": "WGf3W6bdWL0rK0o6O28G2",
    "spring-core:configuration": "OB--nMudscm0p6RqqfA7T",
    "spring-core:dependency-injection": "C2EQ5J1aJYF9e9Rr2KysT",
    "spring-core:spring-ioc": "PlUU_vzFQ3Xx6Z5XREIYP",
    "spring-core:spring-aop": "wV1_I_4czMIxpBionvLs4",
    "spring-core:spring-mvc": "QiNWE4sMTao3cVzjt3yPp",
    "spring-core:annotations": "HdCpfGMrMaXxk5QrtYn3X",
    "spring-core:spring-bean-scope": "KdN62IpNgPFMndXfLaYa1",
    "spring-security": "KaUdyVWEiZa6lUDRBlOKt",
    "spring-security:authentication": "ssdk2iAt4avhc8B5tnIzQ",
    "spring-security:authorization": "c7w7Z3Coa81FKa_yAKTse",
    "spring-security:oauth2": "p7t3RlIIm9U08GFC6azff",
    "spring-security:jwt-authentication": "1My7mbdwAbRcJoiA50pWW",
    "spring-boot-starters": "JrH2hiu27PhIO1VtrArMa",
    "autconfiguration": "88-h3d7kb-VmUBsnUUXW_",
    "spring-boot-actuators": "N7hd3d_XQtvOgnCqdCFt3",
    "embedded-server": "ONb0VnSUMY8JBeW3G2mTp",
    "hibernate": "h5-HnycxfbJgwalSdXTAz",
    "hibernate:transactions": "H9Z0EvKT_148vD0mR-dUf",
    "hibernate:relationships": "D4ybyh0ydvl9W2_xUcvZ_",
    "hibernate:entity-lifecycle": "Ijmy0J3VyaeTGXtu2VkkQ",
    "spring-data": "pvVLbFQoT50vz_VRK4VbJ",
    "spring-data:spring-data-jpa": "6u08QN-pUeFm3o0h5Scfm",
    "spring-data:spring-data-mongodb": "fy-TphbqkLpR1zvFcr7dg",
    "spring-data:spring-data-jdbc": "dd1A-MyzBs_kNOtVG7f1D",
    "microservices": "jU_KHoPUSU_HoIKk0ZpRF",
    "microservices:spring-cloud": "VWNDYSw83Vzi2UPQprJ5z",
    "microservices:spring-cloud:spring-cloud-gateway": "f-i0NX2KOzCh3JwkaSPFo",
    "microservices:spring-cloud:cloud-config": "9hG3CB8r41bUb_s8-0u73",
    "microservices:spring-cloud:spring-cloud-circuit-breaker": "kqpSlO--X9-xYxfq1KFVe",
    "microservices:spring-cloud:spring-cloud-openfeign": "EKSXTMSN2xdaleJ4wOV1A",
    "microservices:spring-cloud:eureka": "6sLE6gb5Y477SmO2GhQIG",
    "spring-mvc": "S-BbOoRD7anvoJrprjoKF",
    "spring-mvc:servlet": "35NTx2eO1j02sjy4m6DPq",
    "spring-mvc:jsp-files": "Lz0GPMiYzb30iFJdv1dL6",
    "spring-mvc:architecture": "_vS_zdJZegZS6MIKAFyg8",
    "spring-mvc:components": "sgA06Tu9Y4cEHtfI8CyLL",
    "testing": "7Qqrh_Rz_7uAD49g9sDzi",
    "testing:jpa-test": "Nhx2QiSD_4pVWD17lsCbu",
    "testing:mock-mvc": "5d1BERqTKNJMKiBcqa8Ie",
    "testing:spring-boot-test-annotation": "p91CaVPh5GMzFU0yEU_hl",
    "testing:mockbean-annotation": "i77NTa0hpGGBjmql9u_CT"
  },
  "spring-boot": "---\njsonUrl: '/jsons/roadmaps/spring-boot.json'\npdfUrl: '/pdfs/roadmaps/spring-boot.pdf'\norder: 10\nbriefTitle: 'Spring Boot'\nbriefDescription: 'Step by step guide to becoming a Spring Boot Developer in 2025'\ntitle: 'Spring Boot Developer'\ndescription: 'Step by step guide to becoming a Spring Boot developer in 2025'\nrenderer: 'editor'\nhasTopics: true\nisNew: false\ndimensions:\n  width: 968\n  height: 1750\ncourses:\n  - title: 'Complete Course to Master SQL'\n    description: 'Learn SQL from scratch with this comprehensive course'\n    link: 'https://roadmap.sh/courses/sql'\n    features:\n      - '55+ Lessons'\n      - 'AI Tutor'\n      - 'Coding Environment'\n      - 'Quizzes'\n      - 'Certification'\n    instructor:\n      name: 'Kamran Ahmed'\n      image: 'https://github.com/kamranahmedse.png'\n      title: 'Founder - roadmap.sh'\nschema:\n  headline: 'Spring Boot Roadmap'\n  description: 'Learn Spring Boot with this interactive step by step guide in 2025. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/spring-boot.png'\n  datePublished: '2023-01-05'\n  dateModified: '2023-01-20'\nseo:\n  title: 'Spring Boot Roadmap'\n  description: 'Community driven, articles, resources, guides, interview questions, quizzes for spring boot development. Learn to become a modern Spring Boot developer by following the steps, skills, resources and guides listed in this roadmap.'\n  keywords:\n    - 'guide to becoming a spring boot developer'\n    - 'guide to spring boot'\n    - 'spring boot developer'\n    - 'spring boot engineer'\n    - 'spring boot guide'\n    - 'spring boot roadmap'\n    - 'spring boot roadmap 2024'\n    - 'spring boot roadmap 2025'\n    - 'spring boot skills'\n    - 'spring boot skills test'\n    - 'spring boot quiz'\n    - 'spring boot interview questions'\n    - 'spring boot engineer roadmap'\n    - 'spring boot developer roadmap'\n    - 'become a spring boot developer'\n    - 'spring boot developer career path'\n    - 'modern spring boot developer'\n    - 'skills for spring boot'\n    - 'cloud development'\n    - 'what is spring boot'\nrelatedRoadmaps:\n  - 'backend'\n  - 'java'\n  - 'devops'\n  - 'python'\n  - 'golang'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'skill-roadmap'\n---\n"
}