{
  "content": {
    "airflow@pVSlVHXIap0unFxLGM-lQ": "# Airflow\n\nAirflow is a platform to programmatically author, schedule and monitor workflows. Use airflow to author workflows as directed acyclic graphs (DAGs) of tasks. The airflow scheduler executes your tasks on an array of workers while following the specified dependencies. Rich command line utilities make performing complex surgeries on DAGs a snap. The rich user interface makes it easy to visualize pipelines running in production, monitor progress, and troubleshoot issues when needed. When workflows are defined as code, they become more maintainable, versionable, testable, and collaborative.\n\nVisit the following resources to learn more:\n\n- [@official@Airflow](https://airflow.apache.org/)\n- [@official@Airflow Documentation](https://airflow.apache.org/docs)\n- [@feed@Explore top posts about Apache Airflow](https://app.daily.dev/tags/apache-airflow?ref=roadmapsh)\n",
    "aws--azure--gcp@u3E7FGW4Iwdsu61KYFxCX": "# AWS / Azure / GCP\n\nAWS (Amazon Web Services), Azure and GCP (Google Cloud Platform) are three leading providers of cloud computing services. AWS by Amazon is the oldest and the most established among the three, providing a breadth and depth of solutions ranging from infrastructure services like compute, storage, and databases to the machine and deep learning. Azure, by Microsoft, has integrated tools for DevOps, supports a large number of programming languages, and offers seamless integration with on-prem servers and Microsoftâ€™s software. Google's GCP has strength in cost-effectiveness, live migration of virtual machines, and flexible computing options. All three have introduced various MLOps tools and services to boost capabilities for machine learning development and operations.\n\nVisit the following resources to learn more about AWS, Azure, and GCP:\n\n- [@roadmap.sh@Visit Dedicated AWS Roadmap](https://roadmap.sh/aws)\n- [@official@Microsoft Azure](https://docs.microsoft.com/en-us/learn/azure/)\n- [@official@Google Cloud Platform](https://cloud.google.com/)\n- [@official@GCP Learning Resources](https://cloud.google.com/training)\n- [@feed@Explore top posts about AWS](https://app.daily.dev/tags/aws?ref=roadmapsh)\n",
    "bash@mMzqJF2KQ49TDEk5F3VAI": "# Bash\n\nBash (Bourne Again Shell) is a Unix shell and command language used for interacting with the operating system through a terminal. It allows users to execute commands, automate tasks via scripting, and manage system operations. As the default shell for many Linux distributions, it supports command-line utilities, file manipulation, process control, and text processing. Bash scripts can include loops, conditionals, and functions, making it a powerful tool for system administration, automation, and task scheduling.\n\nLearn more from the following resources:\n\n- [@article@Bash Reference Manual](https://www.gnu.org/software/bash/manual/bashref.html)\n- [@opensource@bash-guide](https://github.com/Idnan/bash-guide)\n- [@video@Bash Scripting Course](https://www.youtube.com/watch?v=tK9Oc6AEnR4)",
    "cicd@a6vawajw7BpL6plH_nuAz": "# CI / CD\n\nCI/CD (Continuous Integration and Continuous Deployment/Delivery) is a software development practice that automates the process of integrating code changes, running tests, and deploying updates. Continuous Integration focuses on regularly merging code changes into a shared repository, followed by automated testing to ensure code quality. Continuous Deployment extends this by automatically releasing every validated change to production, while Continuous Delivery ensures code is always in a deployable state, but requires manual approval for production releases. CI/CD pipelines improve code reliability, reduce integration risks, and speed up the development lifecycle.\n\nLearn more from the following resources:\n\n- [@article@What is CI/CD? - GitLab](https://about.gitlab.com/topics/ci-cd/)\n- [@article@What is CI/CD? - Redhat](https://www.redhat.com/en/topics/devops/what-is-ci-cd)\n- [@video@CI/CD In 5 Minutes](https://www.youtube.com/watch?v=42UP1fxi2SY)",
    "cloud-computing@00GZcwe25QYi7rDzaOoMt": "# Cloud Computing\n\n**Cloud Computing** refers to the delivery of computing services over the internet rather than using local servers or personal devices. These services include servers, storage, databases, networking, software, analytics, and intelligence. Cloud Computing enables faster innovation, flexible resources, and economies of scale. There are various types of cloud computing such as public clouds, private clouds, and hybrids clouds. Furthermore, it's divided into different services like Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS). These services differ mainly in the level of control an organization has over their data and infrastructures.\n\nLearn more from the following resources:\n\n- [@article@Cloud Computing - IBM](https://www.ibm.com/think/topics/cloud-computing)\n- [@article@What is Cloud Computing? - Azure](https://azure.microsoft.com/en-gb/resources/cloud-computing-dictionary/what-is-cloud-computing)\n- [@video@What is Cloud Computing? - Amazon Web Services](https://www.youtube.com/watch?v=mxT233EdY5c)\n",
    "cloud-native-ml-services@kbfucfIO5KCsuv3jKbHTa": "# Cloud-native ML Services\n\nMost of the cloud providers offer managed services for machine learning. These services are designed to help data scientists and machine learning engineers to build, train, and deploy machine learning models at scale. These services are designed to be cloud-native, meaning they are designed to work with other cloud services and are optimized for the cloud environment.\n\nLearn more from the following resources:\n\n- [@official@AWS Sage Maker](https://aws.amazon.com/sagemaker/)\n- [@official@Azure ML](https://azure.microsoft.com/en-gb/products/machine-learning)\n- [@video@What is Cloud Native?](https://www.youtube.com/watch?v=fp9_ubiKqFU)\n",
    "containerization@tKeejLv8Q7QX40UtOjpav": "# Containers\n\nContainers are a construct in which cgroups, namespaces, and chroot are used to fully encapsulate and isolate a process. This encapsulated process, called a container image, shares the kernel of the host with other containers, allowing containers to be significantly smaller and faster than virtual machines.\n\nThese images are designed for portability, allowing for full local testing of a static image, and easy deployment to a container management platform.\n\nVisit the following resources to learn more:\n\n- [@article@What are Containers? - Google Cloud](https://cloud.google.com/learn/what-are-containers)\n- [@article@What is a Container? - Docker](https://www.docker.com/resources/what-container/)\n- [@video@What are Containers?](https://www.youtube.com/playlist?list=PLawsLZMfND4nz-WDBZIj8-nbzGFD4S9oz)\n- [@article@Articles about Containers - The New Stack](https://thenewstack.io/category/containers/)\n- [@feed@Explore top posts about Containers](https://app.daily.dev/tags/containers?ref=roadmapsh)\n",
    "data-engineering-fundamentals@VykbCu7LWIx8fQpqKzoA7": "# Data Engineering Fundamentals\n\nData Engineering is essentially dealing with the collection, validation, storage, transformation, and processing of data. The objective is to provide reliable, efficient, and scalable data pipelines and infrastructure that allow data scientists to convert data into actionable insights. It involves steps like data ingestion, data storage, data processing, and data provisioning. Important concepts include designing, building, and maintaining data architecture, databases, processing systems, and large-scale processing systems. It is crucial to have extensive technical knowledge in various tools and programming languages like SQL, Python, Hadoop, and more.\n\nLearn more from the following resources:\n\n- [@article@Data Engineering 101](https://www.redpanda.com/guides/fundamentals-of-data-engineering)\n- [@video@Fundamentals of Data Engineering](https://www.youtube.com/watch?v=mPSzL8Lurs0)",
    "data-ingestion-architecture@Berd78HvnulNEGOsHCf8n": "# Data Ingestion Architectures\n\nData ingestion is the process of collecting, transferring, and loading data from various sources to a destination where it can be stored and analyzed. There are several data ingestion architectures that can be used to collect data from different sources and load it into a data warehouse, data lake, or other storage systems. These architectures can be broadly classified into two categories: batch processing and real-time processing. How you choose to ingest data will depend on the volume, velocity, and variety of data you are working with, as well as the latency requirements of your use case.\n\nLambda and Kappa architectures are two popular data ingestion architectures that combine batch and real-time processing to handle large volumes of data efficiently.\n\nLearn more from the following resources:\n\n- [@article@Data Ingestion Patterns](https://docs.aws.amazon.com/whitepapers/latest/aws-cloud-data-ingestion-patterns-practices/data-ingestion-patterns.html)\n- [@video@What is a data pipeline?](https://www.youtube.com/watch?v=kGT4PcTEPP8)",
    "data-lakes--warehouses@wOogVDV4FIDLXVPwFqJ8C": "# Data lakes & Warehouses\n\n**Data Lakes** are large-scale data repository systems that store raw, untransformed data, in various formats, from multiple sources. They're often used for big data and real-time analytics requirements. Data lakes preserve the original data format and schema which can be modified as necessary. On the other hand, **Data Warehouses** are data storage systems which are designed for analyzing, reporting and integrating with transactional systems. The data in a warehouse is clean, consistent, and often transformed to meet wide-range of business requirements. Hence, data warehouses provide structured data but require more processing and management compared to data lakes.\n\nLearn more from the following resources:\n\n- [@article@Data Lake Definition](https://azure.microsoft.com/en-gb/resources/cloud-computing-dictionary/what-is-a-data-lake)\n- [@video@What is a Data Lake?](https://www.youtube.com/watch?v=LxcH6z8TFpI)\n- [@video@@hat is a Data Warehouse?](https://www.youtube.com/watch?v=k4tK2ttdSDg)",
    "data-lineage--feature-stores@6XgP_2NLuiw654zvTyueT": "# Data Lineage and Feature Stores\n\n**Data Lineage** refers to the life-cycle of data, including its origins, movements, characteristics and quality. It's a critical component in MLOps for tracking the journey of data through every process in a pipeline, from raw input to model output. Data lineage helps in maintaining transparency, ensuring compliance, and facilitating data debugging or tracing data related bugs. It provides a clear representation of data sources, transformations, and dependencies thereby aiding in audits, governance, or reproduction of machine learning models.\n\nLearn more from the following resources:\n\n- [@article@What is Data Lineage?](https://www.ibm.com/topics/data-lineage)\n- [@article@What is a Feature Store](https://www.snowflake.com/guides/what-feature-store-machine-learning/)\n",
    "data-pipelines@cOg3ejZRYE-u-M0c89IjM": "# Data Pipelines\n\nData pipelines are a series of automated processes that transport and transform data from various sources to a destination for analysis or storage. They typically involve steps like data extraction, cleaning, transformation, and loading (ETL) into databases, data lakes, or warehouses. Pipelines can handle batch or real-time data, ensuring that large-scale datasets are processed efficiently and consistently. They play a crucial role in ensuring data integrity and enabling businesses to derive insights from raw data for reporting, analytics, or machine learning.\n\nLearn more from the following resources:\n\n- [@article@What is a Data Pipeline? - IBM](https://www.ibm.com/topics/data-pipeline)\n- [@video@What are Data Pipelines?](https://www.youtube.com/watch?v=oKixNpz6jNo)",
    "docker@XIdCvT-4HyyglHJLRrHlz": "# Docker\n\nDocker is a platform for working with containerized applications. Among its features are a daemon and client for managing and interacting with containers, registries for storing images, and a desktop application to package all these features together.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Docker Roadmap](https://roadmap.sh/docker)\n- [@official@Docker Documentation](https://docs.docker.com/)\n- [@video@Docker Tutorial](https://www.youtube.com/watch?v=RqTEHSBrYFw)\n- [@video@Docker Simplified in 55 Seconds](https://youtu.be/vP_4DlOH1G4)\n- [@feed@Explore top posts about Docker](https://app.daily.dev/tags/docker?ref=roadmapsh)\n",
    "experiment-tracking--model-registry@fGGWKmAJ50Ke6wWJBEgby": "# Experiment Tracking and Model Registry\n\n**Experiment Tracking** is an essential part of MLOps, providing a system to monitor and record the different experiments conducted during the machine learning model development process. This involves capturing, organizing and visualizing the metadata associated with each experiment, such as hyperparameters used, models produced, metrics like accuracy or loss, and other information about the computational environment. This tracking allows for reproducibility of experiments, comparison across different experiment runs, and helps in identifying the best models.\n\nLearn more from the following resources:\n\n- [@article@Experiment Tracking](https://madewithml.com/courses/mlops/experiment-tracking/#dashboard)\n- [@article@ML Flow Model Registry](https://mlflow.org/docs/latest/model-registry.html)",
    "flink@o6GQ3-8DgDtHzdX6yeg1w": "# Flink\n\nApache Flink is an open-source stream processing framework designed for real-time and batch data processing with low latency and high throughput. It supports event time processing, fault tolerance, and stateful operations, making it ideal for applications like real-time analytics, fraud detection, and event-driven systems. Flink is highly scalable, integrates with various data systems, and is widely used in industries for large-scale, real-time data processing tasks.\n\nVisit the following resources to learn more:\n\n- [@official@Apache Flink Documentation](https://flink.apache.org/)\n- [@article@Apache Flink](https://www.tutorialspoint.com/apache_flink/apache_flink_introduction.htm)\n- [@feed@Explore top posts about Apache Flink](https://app.daily.dev/tags/apache-flink?ref=roadmapsh)\n",
    "git@06T5CbZAGJU6fJhCmqCC8": "# Git\n\nGit is a distributed version control system used to track changes in source code during software development. It enables multiple developers to collaborate on a project by managing versions of code, allowing for branching, merging, and tracking of revisions. Git ensures that changes are recorded with a complete history, enabling rollback to previous versions if necessary. It supports distributed workflows, meaning each developer has a complete local copy of the projectâ€™s history, facilitating seamless collaboration, conflict resolution, and efficient management of code across different teams or environments.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Git & GitHub Roadmap](https://roadmap.sh/git-github)\n- [@video@Git & GitHub Crash Course For Beginners](https://www.youtube.com/watch?v=SWYqp7iY_Tc)\n- [@article@Learn Git with Tutorials, News and Tips - Atlassian](https://www.atlassian.com/git)\n- [@article@Git Cheat Sheet](https://cs.fyi/guide/git-cheatsheet)\n- [@feed@Explore top posts about Git](https://app.daily.dev/tags/git?ref=roadmapsh)\n",
    "github@7t7jSb3YgyWlhgCe8Se1I": "# GitHub\n\nGitHub is a web-based platform built on top of Git that provides version control, collaboration tools, and project management features for software development. It enables developers to host Git repositories, collaborate on code through pull requests, and review and track changes. GitHub also offers additional features like issue tracking, continuous integration, automated workflows, and documentation hosting. With its social coding environment, GitHub fosters open-source contributions and team collaboration, making it a central hub for many software development projects.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Git & GitHub Roadmap](https://roadmap.sh/git-github)\n- [@official@GitHub](https://github.com)\n- [@official@GitHub Documentation](https://docs.github.com/en/get-started/quickstart)\n- [@video@What is GitHub?](https://www.youtube.com/watch?v=w3jLJU7DT5E)\n- [@feed@Explore top posts about GitHub](https://app.daily.dev/tags/github?ref=roadmapsh)\n",
    "go@vdVq3RQvQF3mF8PQc6DMg": "# Go\n\nGo, also known as Golang, is an open-source programming language developed by Google that emphasizes simplicity, efficiency, and strong concurrency support. Designed for modern software development, Go features a clean syntax, garbage collection, and built-in support for concurrent programming through goroutines and channels, making it well-suited for building scalable, high-performance applications, especially in cloud computing and microservices architectures. Go's robust standard library and tooling ecosystem, including a powerful package manager and testing framework, further streamline development processes, promoting rapid application development and deployment.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Go Roadmap](https://roadmap.sh/golang)\n- [@official@A Tour of Go â€“ Go Basics](https://go.dev/tour/welcome/1)\n- [@official@Go Reference Documentation](https://go.dev/doc/)\n- [@video@Go Programming Course](https://www.youtube.com/watch?v=un6ZyFkqFKo)\n- [@article@Making a RESTful JSON API in Go](https://thenewstack.io/make-a-restful-json-api-go/)\n- [@article@Go, the Programming Language of the Cloud](https://thenewstack.io/go-the-programming-language-of-the-cloud/)\n- [@feed@Explore top posts about Golang](https://app.daily.dev/tags/golang?ref=roadmapsh)\n",
    "infrastructure-as-code@sf67bSL7HAx6iN7S6MYKs": "# Infrastructure as Code\n\nInfrastructure as Code (IaC) is a modern approach to managing and provisioning IT infrastructure through machine-readable configuration files, rather than manual processes. It enables developers and operations teams to define and manage infrastructure resourcesâ€”such as servers, networks, and databasesâ€”using code, which can be versioned, tested, and deployed like application code. IaC tools, like Terraform and AWS CloudFormation, allow for automated, repeatable deployments, reducing human error and increasing consistency across environments. This practice facilitates agile development, enhances collaboration between teams, and supports scalable and efficient infrastructure management.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Terraform Roadmap](https://roadmap.sh/terraform)\n- [@article@What is Infrastructure as Code?](https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac)\n- [@video@Terraform Course for Beginners](https://www.youtube.com/watch?v=SLB_c_ayRMo)\n- [@video@8 Terraform Best Practices](https://www.youtube.com/watch?v=gxPykhPxRW0)\n",
    "kafka@fMNwzhgLgHlAZJ9NvKikR": "# Kafka\n\nApache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.\n\nVisit the following resources to learn more:\n\n- [@official@Apache Kafka Quickstart](https://kafka.apache.org/quickstart)\n- [@video@Apache Kafka Fundamentals](https://www.youtube.com/watch?v=B5j3uNBH8X4)\n- [@feed@Explore top posts about Kafka](https://app.daily.dev/tags/kafka?ref=roadmapsh)\n",
    "kubernetes@XQoK9l-xtN2J8ZV8dw53X": "# Kubernetes\n\nKubernetes is an open source container management platform, and the dominant product in this space. Using Kubernetes, teams can deploy images across multiple underlying hosts, defining their desired availability, deployment logic, and scaling logic in YAML. Kubernetes evolved from Borg, an internal Google platform used to provision and allocate compute resources (similar to the Autopilot and Aquaman systems of Microsoft Azure). The popularity of Kubernetes has made it an increasingly important skill for the DevOps Engineer and has triggered the creation of Platform teams across the industry. These Platform engineering teams often exist with the sole purpose of making Kubernetes approachable and usable for their product development colleagues.\n\nVisit the following resources to learn more:\n\n- [@roadmap@Visit Dedicated Kubernetes Roadmap](https://roadmap.sh/kubernetes)\n- [@official@Kubernetes](https://kubernetes.io/)\n- [@official@Kubernetes Documentation](https://kubernetes.io/docs/home/)\n- [@video@Kubernetes Crash Course for Absolute Beginners](https://www.youtube.com/watch?v=s_o8dwzRlu4)\n- [@article@Kubernetes: An Overview](https://thenewstack.io/kubernetes-an-overview/)\n- [@feed@Explore top posts about Kubernetes](https://app.daily.dev/tags/kubernetes?ref=roadmapsh)\n",
    "machine-learning-fundamentals@ulka7VEVjz6ls5SnI6a6z": "# Machine Learning Fundamentals\n\nMachine learning fundamentals encompass the key concepts and techniques that enable systems to learn from data and make predictions or decisions without being explicitly programmed. At its core, machine learning involves algorithms that can identify patterns in data and improve over time with experience. Key areas include supervised learning (where models are trained on labeled data), unsupervised learning (where models identify patterns in unlabeled data), and reinforcement learning (where agents learn to make decisions based on feedback from their actions). Essential components also include data preprocessing, feature selection, model training, evaluation metrics, and the importance of avoiding overfitting. Understanding these fundamentals is crucial for developing effective machine learning applications across various domains.\n\nLearn more from the following resources:\n\n- [@course@Fundamentals of Machine Learning - Microsoft](https://learn.microsoft.com/en-us/training/modules/fundamentals-machine-learning/)\n- [@course@MLCourse.ai](https://mlcourse.ai/)\n- [@course@Fast.ai](https://course.fast.ai)\n",
    "mlops-components@l1xasxQy2vAY34NWaqKEe": "# MLOps Components\n\nMLOps components can be broadly classified into three major categories: Development, Operations and Governance. The **Development** components include everything involved in the creation of machine learning models, such as data extraction, data analysis, feature engineering, and machine learning model training. The **Operations** category includes components involved in deploying, monitoring, and maintaining machine learning models in production. This may include release management, model serving, and performance monitoring. Lastly, the **Governance** category encompasses the policies and regulations related to machine learning models. This includes model audit and tracking, model explainability, and security & compliance regulations.\n\nLearn more from the following resources:\n\n- [@article@MLOps Workflow, Components, and Key Practices](https://mlops.tv/p/understanding-ml-pipelines-through)\n- [@article@MLOps Lifecycle](https://www.moontechnolabs.com/blog/mlops-lifecycle/)",
    "mlops-principles@iTsEHVCo6KGq7H2HMgy5S": "# MLOps Principles\n\nMLOps (Machine Learning Operations) principles focus on streamlining the deployment, monitoring, and management of machine learning models in production environments. Key principles include:\n\n1. **Collaboration**: Foster collaboration between data scientists, developers, and operations teams to ensure alignment on model goals, performance, and lifecycle management.\n\n2. **Automation**: Automate workflows for model training, testing, deployment, and monitoring to enhance efficiency, reduce errors, and speed up the development lifecycle.\n\n3. **Version Control**: Implement version control for both code and data to track changes, reproduce experiments, and maintain model lineage.\n\n4. **Continuous Integration and Deployment (CI/CD)**: Establish CI/CD pipelines tailored for machine learning to facilitate rapid model iteration and deployment.\n\n5. **Monitoring and Governance**: Continuously monitor model performance and data drift in production to ensure models remain effective and compliant with regulatory requirements.\n\n6. **Scalability**: Design systems that can scale to handle varying workloads and accommodate changes in data volume and complexity.\n\n7. **Reproducibility**: Ensure that experiments can be reliably reproduced by standardizing environments and workflows, making it easier to validate and iterate on models.\n\nThese principles help organizations efficiently manage the lifecycle of machine learning models, from development to deployment and beyond.\n\nVisit the following resources to learn more:\n\n- [@article@MLOps Principles](https://ml-ops.org/content/mlops-principles)",
    "model-training--serving@zsW1NRb0dMgS-KzWsI0QU": "# Model Training and Serving\n\nModel Training refers to the phase in the Machine Learning (ML) pipeline where we teach a machine learning model how to make predictions by providing it with data. This process begins with feeding the model a training dataset, which it uses to learn and understand patterns or perform computations. The model's performance is then evaluated by comparing its prediction outputs with the actual results. Various algorithms can be used in the model training process. The choice of algorithm usually depends on the task, the data available, and the requirements of the project. It is worth noting that the model training stage can be computationally expensive particularly when dealing with large datasets or complex models.\n\nVisit the following resources to learn more:\n\n- [@article@MLOps Principles](https://ml-ops.org/content/mlops-principles)\n- [@opensource@ML Deployment k8s Fast API](https://github.com/sayakpaul/ml-deployment-k8s-fastapi/)\n- [@article@ML deployment with k8s FastAPI, Building an ML app with FastAPI](https://dev.to/bravinsimiyu/beginner-guide-on-how-to-build-a-machine-learning-app-with-fastapi-part-ii-deploying-the-fastapi-application-to-kubernetes-4j6g)\n- [@article@KServe Tutorial](https://towardsdatascience.com/kserve-highly-scalable-machine-learning-deployment-with-kubernetes-aa7af0b71202)",
    "monitoring--observability@r4fbUwD83uYumEO1X8f09": "# Monitoring and Observability\n\n**Monitoring** in MLOps primarily involves tracking the performance of machine learning (ML) models in production to ensure that they continually deliver accurate and reliable results. Such monitoring is necessary because the real-world data that these models handle may change over time, a scenario known as data drift. These changes can adversely affect model performance. Monitoring helps to detect any anomalies in the modelâ€™s behaviour or performance and such alerts can trigger the retraining of models with new data. From a broader perspective, monitoring also involves tracking resources and workflows to detect and rectify any operational issues in the MLOps pipeline.\n\nLearn more from the following resources:\n\n- [@article@ML Monitoring vs ML Observability](https://medium.com/marvelous-mlops/ml-monitoring-vs-ml-observability-understanding-the-differences-fff574a8974f)\n- [@video@ML Observability vs ML Monitoring: What's the difference?](https://www.youtube.com/watch?v=k1Reed3QIYE)\n",
    "orchestration@fes7M--Y8i08_zeP98tVV": "# Orchestration\n\nML orchestration refers to the process of managing and coordinating the various tasks and workflows involved in the machine learning lifecycle, from data preparation and model training to deployment and monitoring. It involves integrating multiple tools and platforms to streamline operations, automate repetitive tasks, and ensure seamless collaboration among data scientists, engineers, and operations teams. By using orchestration frameworks, organizations can enhance reproducibility, scalability, and efficiency, enabling them to manage complex machine learning pipelines and improve the overall quality of models in production. This ensures that models are consistently updated and maintained, facilitating rapid iteration and adaptation to changing data and business needs.\n\nLearn more from the following resources:\n\n- [@article@ML Observability: what, why, how](https://ubuntu.com/blog/ml-observability)\n",
    "programming-fundamentals@_7uvOebQUI4xaSwtMjpEd": "# Programming Fundamentals\n\nML programming fundamentals encompass the essential skills and concepts needed to develop machine learning models effectively. Key aspects include understanding data structures and algorithms, as well as proficiency in programming languages commonly used in ML, such as Python and R. Familiarity with libraries and frameworks like TensorFlow, PyTorch, and scikit-learn is crucial for implementing machine learning algorithms and building models. Additionally, concepts such as data preprocessing, feature engineering, model evaluation, and hyperparameter tuning are vital for optimizing performance. A solid grasp of statistics and linear algebra is also important, as these mathematical foundations underpin many ML techniques, enabling practitioners to analyze data and interpret model results accurately.",
    "python@Vh81GnOUOZvDOlOyI5PwT": "# Python\n\nPython is an interpreted high-level general-purpose programming language. Its design philosophy emphasizes code readability with its significant use of indentation. Its language constructs as well as its object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects. Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. Python is often described as a \"batteries included\" language due to its comprehensive standard library.\n\nLearn more from the following resources:\n\n- [@roadmap@Visit Dedicated Python Roadmap](https://roadmap.sh/python)\n- [@official@Python](https://www.python.org/)\n- [@article@Real Python](https://realpython.com/)\n- [@article@Automate the Boring Stuff with Python](https://automatetheboringstuff.com/)\n- [@feed@Explore top posts about Python](https://app.daily.dev/tags/python?ref=roadmapsh)\n",
    "spark@UljuqA89_SlCSDWWMD_C_": "# Spark\n\nApache Spark is an open-source distributed computing system designed for big data processing and analytics. It offers a unified interface for programming entire clusters, enabling efficient handling of large-scale data with built-in support for data parallelism and fault tolerance. Spark excels in processing tasks like batch processing, real-time data streaming, machine learning, and graph processing. Itâ€™s known for its speed, ease of use, and ability to process data in-memory, significantly outperforming traditional MapReduce systems. Spark is widely used in big data ecosystems for its scalability and versatility across various data processing tasks.\n\nVisit the following resources to learn more:\n\n- [@official@ApacheSpark](https://spark.apache.org/documentation.html)\n- [@article@Spark By Examples](https://sparkbyexamples.com)\n- [@feed@Explore top posts about Apache Spark](https://app.daily.dev/tags/spark?ref=roadmapsh)\n",
    "version-control-systems@oUhlUoWQQ1txx_sepD5ev": "# Version Control Systems\n\nVersion control/source control systems allow developers to track and control changes to code over time. These services often include the ability to make atomic revisions to code, branch/fork off of specific points, and to compare versions of code. They are useful in determining the who, what, when, and why code changes were made.\n\nVisit the following resources to learn more:\n\n- [@official@Git](https://git-scm.com/)\n- [@article@What is Version Control?](https://www.atlassian.com/git/tutorials/what-is-version-control)\n- [@feed@Explore top posts about Version Control](https://app.daily.dev/tags/version-control?ref=roadmapsh)\n",
    "version-control@kHDSwlSq8WkLey4EJIQSR": "# Version Control Systems\n\nVersion control/source control systems allow developers to track and control changes to code over time. These services often include the ability to make atomic revisions to code, branch/fork off of specific points, and to compare versions of code. They are useful in determining the who, what, when, and why code changes were made.\n\nVisit the following resources to learn more:\n\n- [@official@Git](https://git-scm.com/)\n- [@official@Git Documentation](https://git-scm.com/docs)\n- [@article@What is Version Control?](https://www.atlassian.com/git/tutorials/what-is-version-control)\n- [@feed@Explore top posts about Version Control](https://app.daily.dev/tags/version-control?ref=roadmapsh)\n"
  },
  "migration-mapping": {
    "programming-fundamentals": "_7uvOebQUI4xaSwtMjpEd",
    "programming-fundamentals:python": "Vh81GnOUOZvDOlOyI5PwT",
    "programming-fundamentals:golang": "vdVq3RQvQF3mF8PQc6DMg",
    "programming-fundamentals:bash": "mMzqJF2KQ49TDEk5F3VAI",
    "version-control-systems": "oUhlUoWQQ1txx_sepD5ev",
    "version-control-systems:git": "06T5CbZAGJU6fJhCmqCC8",
    "version-control-systems:github": "7t7jSb3YgyWlhgCe8Se1I",
    "cloud-computing": "00GZcwe25QYi7rDzaOoMt",
    "cloud-computing:aws-azure-gcp": "u3E7FGW4Iwdsu61KYFxCX",
    "cloud-computing:cloud-native-ml-services": "kbfucfIO5KCsuv3jKbHTa",
    "containerization": "tKeejLv8Q7QX40UtOjpav",
    "containerization:docker": "XIdCvT-4HyyglHJLRrHlz",
    "containerization:kubernetes": "XQoK9l-xtN2J8ZV8dw53X",
    "ml-fundamentals": "ulka7VEVjz6ls5SnI6a6z",
    "data-eng-fundamentals": "VykbCu7LWIx8fQpqKzoA7",
    "data-eng-fundamentals:data-pipelines": "cOg3ejZRYE-u-M0c89IjM",
    "data-eng-fundamentals:data-lakes-warehouses": "wOogVDV4FIDLXVPwFqJ8C",
    "data-eng-fundamentals:data-ingestion-architecture": "Berd78HvnulNEGOsHCf8n",
    "data-eng-fundamentals:data-pipelines:airflow": "pVSlVHXIap0unFxLGM-lQ",
    "data-eng-fundamentals:spark": "UljuqA89_SlCSDWWMD_C_",
    "data-eng-fundamentals:kafka": "fMNwzhgLgHlAZJ9NvKikR",
    "data-eng-fundamentals:flink": "o6GQ3-8DgDtHzdX6yeg1w",
    "mlops-principles": "iTsEHVCo6KGq7H2HMgy5S",
    "mlops-components": "l1xasxQy2vAY34NWaqKEe",
    "mlops-components:version-control": "kHDSwlSq8WkLey4EJIQSR",
    "mlops-components:ci-cd": "a6vawajw7BpL6plH_nuAz",
    "mlops-components:orchestration": "fes7M--Y8i08_zeP98tVV",
    "mlops-components:experiment-tracking": "fGGWKmAJ50Ke6wWJBEgby",
    "mlops-components:data-lineage": "6XgP_2NLuiw654zvTyueT",
    "mlops-components:model-training": "zsW1NRb0dMgS-KzWsI0QU",
    "mlops-components:monitoring": "r4fbUwD83uYumEO1X8f09",
    "infra-as-code": "sf67bSL7HAx6iN7S6MYKs"
  },
  "mlops": "---\njsonUrl: '/jsons/roadmaps/mlops.json'\npdfUrl: '/pdfs/roadmaps/mlops.pdf'\nrenderer: 'editor'\norder: 18\nbriefTitle: 'MLOps'\nbriefDescription: 'Step by step guide to learn MLOps in 2025'\ntitle: 'MLOps Roadmap'\ndescription: 'Step by step guide to learn MLOps in 2025'\nhasTopics: true\nisNew: false\ndimensions:\n  width: 968\n  height: 1475\nschema:\n  headline: 'MLOps Roadmap'\n  description: 'Learn about MLOps with this interactive step by step guide in 2023. We also have resources and short descriptions attached to the roadmap items so you can get everything you want to learn in one place.'\n  imageUrl: 'https://roadmap.sh/roadmaps/mlops.png'\n  datePublished: '2024-02-12'\n  dateModified: '2024-07-18'\nseo:\n  title: 'MLOps Roadmap'\n  description: 'Learn about MLOps using this roadmap. Community driven, articles, resources, guides, interview questions, quizzes for modern machine learning operations.'\n  keywords:\n    - 'mlops roadmap 2024'\n    - 'mlops roadmap 2025'\n    - 'mlops roadmap'\n    - 'mlops engineer'\n    - 'machine learning expert'\n    - 'machine learning engineer'\n    - 'ai ops engineer'\nrelatedRoadmaps:\n  - 'ai-data-scientist'\n  - 'devops'\n  - 'backend'\n  - 'python'\n  - 'golang'\nsitemap:\n  priority: 1\n  changefreq: 'monthly'\ntags:\n  - 'roadmap'\n  - 'main-sitemap'\n  - 'role-roadmap'\n---\n"
}